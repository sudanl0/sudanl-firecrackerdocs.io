var searchIndex = new Map(JSON.parse('[\
["api_server",{"doc":"Implements the interface for intercepting API requests, …","t":"FPFPPPPPPPPFPPPPPPGPPPPPPPPPPFGFGPFFPPPGPPPGNNNONNNNNNNNNNNNNNNNNNNNNNNNNOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNONNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNOONNNNNNNNNNNNNNNNONNNNNNNNCONNNNNCOONNONNNNNNNNNONNONNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONPGPPPFFGPPONNNNNNNNNNNNNNNNNHNNOHHNNNNNNNNNNNNNNNNHNNNONNNNNNNNNNNNNNNNNNPFPPPPPPPFPPPPPGPPPPPPPPPFGFPPGPPGCCOOOCOCCCOOOOCOCCCCCOOCOOCCFGPPPONNNNNNNNNNNNNNNNHNNNNNNNNHHHHHHHHHHHHHHHHHHHHSSSHHHHHH","n":["ApiServer","BadRequest","Body","BodyWithoutPendingRequest","ConnectionError","Continue","Get","HeaderError","HeadersWithoutPendingRequest","Http10","Http11","HttpServer","IOError","InternalServerError","InvalidHttpMethod","InvalidHttpVersion","InvalidRequest","InvalidUri","Method","MethodNotAllowed","NoContent","NotFound","NotImplemented","OK","Overflow","Overflow","Patch","PayloadTooLarge","Put","Request","RequestError","Response","ServerError","ServerFull","ServerRequest","ServerResponse","ServiceUnavailable","ShutdownEvent","SizeLimitExceeded","StatusCode","Unauthorized","Underflow","Underflow","Version","add_kill_switch","allow","allow_method","api_request_sender","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","body","body","body","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","connections","content_length","content_type","default","deprecation","enqueue_responses","epoll","epoll","eq","eq","eq","eq","eq","eq","files","flush_outgoing_writes","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","handle_request","hash","headers","headers","http_version","http_version","id","id","inner","into","into","into","into","into","into","into","into","into","into","into","into","is_empty","json_fault_message","json_response","kill_switch","len","method","new","new","new","new","new","new_from_fd","parsed_request","payload_max_size","process","raw","raw","raw","raw","request","request","request_line","requests","respond","response","run","serve_vmm_action_request","set_allow","set_body","set_content_type","set_deprecation","set_encoding","set_payload_max_size","set_server","socket","start_server","status","status_line","to_owned","to_owned","to_owned","to_owned","to_str","to_string","to_string","to_vmm_fd","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uri","vmm_response_receiver","write_all","EmptyID","Error","Generic","InvalidID","InvalidPathMethod","ParsedRequest","ParsingInfo","RequestAction","SerdeJson","Sync","action","append_deprecation_message","as_any","as_any","as_any","as_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","checked_id","convert_to_response","default","deprecation_message","describe","describe_with_body","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","into","into","into","into","into_parts","method_to_error","new","new_sync","parsing_info","parsing_info","source","success_response_with_data","success_response_with_mmds_value","take_deprecation_message","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","BadRequest","Body","BodyWithoutPendingRequest","Continue","Get","HeaderError","HeadersWithoutPendingRequest","Http10","Http11","HttpServer","InternalServerError","InvalidHttpMethod","InvalidHttpVersion","InvalidRequest","InvalidUri","Method","MethodNotAllowed","NoContent","NotFound","NotImplemented","OK","Overflow","Patch","PayloadTooLarge","Put","Request","RequestError","Response","ServiceUnavailable","SizeLimitExceeded","StatusCode","Unauthorized","Underflow","Version","actions","balloon","body","body","body","boot_source","connections","cpu_configuration","drive","entropy","epoll","files","headers","headers","instance_info","kill_switch","logger","machine_configuration","metrics","mmds","net","payload_max_size","request_line","snapshot","socket","status_line","version","vsock","ActionBody","ActionType","FlushMetrics","InstanceStart","SendCtrlAltDel","action_type","as_any","as_any","as_mut_any","as_mut_any","borrow","borrow","borrow_mut","borrow_mut","deserialize","deserialize","fmt","fmt","from","from","into","into","parse_put_actions","serialize","serialize","try_from","try_from","try_into","try_into","type_id","type_id","parse_get_balloon","parse_patch_balloon","parse_put_balloon","parse_put_boot_source","parse_put_cpu_config","parse_patch_drive","parse_put_drive","parse_put_entropy","parse_get_instance_info","parse_put_logger","parse_get_machine_config","parse_patch_machine_config","parse_put_machine_config","parse_put_metrics","parse_get_mmds","parse_patch_mmds","parse_put_mmds","parse_put_mmds_config","parse_patch_net","parse_put_net","LOAD_DEPRECATION_MESSAGE","MISSING_FIELD","TOO_MANY_FIELDS","parse_patch_vm_state","parse_put_snapshot","parse_put_snapshot_create","parse_put_snapshot_load","parse_get_version","parse_put_vsock"],"q":[[0,"api_server"],[258,"api_server::parsed_request"],[331,"api_server::request"],[393,"api_server::request::actions"],[424,"api_server::request::balloon"],[427,"api_server::request::boot_source"],[428,"api_server::request::cpu_configuration"],[429,"api_server::request::drive"],[431,"api_server::request::entropy"],[432,"api_server::request::instance_info"],[433,"api_server::request::logger"],[434,"api_server::request::machine_configuration"],[437,"api_server::request::metrics"],[438,"api_server::request::mmds"],[442,"api_server::request::net"],[444,"api_server::request::snapshot"],[451,"api_server::request::version"],[452,"api_server::request::vsock"],[453,"vmm_sys_util::linux::eventfd"],[454,"core::result"],[455,"alloc::vec"],[456,"core::any"],[457,"core::option"],[458,"micro_http::common::headers"],[459,"vmm_sys_util::linux::epoll"],[460,"core::fmt"],[461,"core::fmt"],[462,"alloc::string"],[463,"core::convert"],[464,"serde::ser"],[465,"core::fmt"],[466,"vmm::rpc_interface"],[467,"std::sync::mpsc"],[468,"vmm::rpc_interface"],[469,"vmm::logger::metrics"],[470,"seccompiler"],[471,"vmm::rpc_interface"],[472,"core::any"],[473,"std::io::error"],[474,"std::io"],[475,"vmm::rpc_interface"],[476,"core::error"],[477,"core::marker"],[478,"serde_json::value"],[479,"serde::de"],[480,"serde::ser"]],"d":["Structure associated with the API server implementation.","400, Bad Request","The Body associated with an HTTP Request or Response.","No request was pending while the request body was being …","Error from one of the connections.","100, Continue","GET Method.","Header specified is either invalid or not supported by …","No request was pending while the request headers were …","HTTP/1.0","HTTP/1.1","HTTP Server implementation using Unix Domain Sockets and …","Epoll operations failed.","500, Internal Server Error","The HTTP Method is not supported or it is invalid.","The HTTP Version in the Request is not supported or it is …","The Request is invalid and cannot be served.","Request URI is invalid.","Supported HTTP Methods.","405, Method Not Allowed","204, No Content","404, Not Found","501, Not Implemented","200, OK","Overflow occurred when parsing a request.","Overflow occurred while processing messages.","PATCH Method.","413, Payload Too Large","PUT Method.","Wrapper over an HTTP Request.","Errors associated with parsing the HTTP Request from a u8 …","Wrapper over an HTTP Response.","Errors pertaining to <code>HttpServer</code>.","Server maximum capacity has been reached.","Wrapper over <code>Request</code> which adds an identification token.","Wrapper over <code>Response</code> which adds an identification token.","503, Service Unavailable","Shutdown requested.","Payload too large.","Wrapper over a response status code.","401, Unauthorized","Underflow occurred when parsing a request.","Underflow occurred while processing messages.","Supported HTTP Versions.","Adds a <code>kill_switch</code> event fd used to break out of inner …","Returns the allowed HTTP methods.","Allows a specific HTTP method.","Sender which allows passing messages to the VMM.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the Body of the response. If the response does not …","Body of the HTTP message as bytes.","The body of the request.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the Content Length of the response.","Returns the Content Type of the response.","Returns the default HTTP version = HTTP/1.1.","Returns the deprecation status of the response.","Enqueues the provided responses in the outgoing connection.","The file descriptor of the <code>epoll</code> structure can enable the …","","","","","","","","The optional files associated with the request.","This function is responsible with flushing any remaining …","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Handles an API request received through the associated …","","The headers of the request.","","Returns the HTTP <code>Version</code> of the <code>Request</code>.","Returns the HTTP Version of the response.","","","Returns a reference to the inner request.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Checks if the body is empty, ie with zero length","","An HTTP response which also includes a body.","","Returns the length of the <code>Body</code>.","Returns the HTTP <code>Method</code> of the <code>Request</code>.","Constructor for <code>HttpServer</code>.","Constructor for <code>ApiServer</code>.","Creates a new <code>Body</code> from a <code>String</code> input.","Creates a new HTTP <code>Response</code> with an empty body.","Creates a new <code>ServerRequest</code> object from an existing <code>Request</code>…","Constructor for <code>HttpServer</code>.","","","Calls the function provided on the inner request to obtain …","Returns the body as an <code>u8 slice</code>.","Returns an <code>u8 slice</code> corresponding to the Method.","HTTP Version as an <code>u8 slice</code>.","Returns the status code as bytes.","","Inner request.","The request line of the request.","This function is responsible for the data exchange with …","Adds the provided response to the outgoing buffer in the …","","Runs the Api Server.","","Sets the HTTP allowed methods.","Updates the body of the <code>Response</code>.","Updates the content type of the <code>Response</code>.","Marks the <code>Response</code> as deprecated.","Updates the encoding type of <code>Response</code>.","This function sets the limit for PUT/PATCH requests. It …","Sets the HTTP response server.","","Starts the HTTP Server.","Returns the Status Code of the Response.","","","","","","Returns an &amp;str corresponding to the Method.","","","FD on which we notify the VMM that we have sent at least …","","","","","","","","Returns a <code>Method</code> object if the parsing of <code>bytes</code> is …","Creates a new HTTP Version from an <code>u8 slice</code>.","","Parses a byte slice into a HTTP Request.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the <code>Uri</code> from the parsed <code>Request</code>.","Receiver which collects messages from the VMM.","Writes the content of the <code>Response</code> to the specified <code>buf</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Helper function for metric-logging purposes on API …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Generates a <code>GenericError</code> for each request method.","","Helper function to avoid boiler-plate code.","","","","","","","","","","","","","","","","","","","","","400, Bad Request","The Body associated with an HTTP Request or Response.","No request was pending while the request body was being …","100, Continue","GET Method.","Header specified is either invalid or not supported by …","No request was pending while the request headers were …","HTTP/1.0","HTTP/1.1","HTTP Server implementation using Unix Domain Sockets and …","500, Internal Server Error","The HTTP Method is not supported or it is invalid.","The HTTP Version in the Request is not supported or it is …","The Request is invalid and cannot be served.","Request URI is invalid.","Supported HTTP Methods.","405, Method Not Allowed","204, No Content","404, Not Found","501, Not Implemented","200, OK","Overflow occurred when parsing a request.","PATCH Method.","413, Payload Too Large","PUT Method.","Wrapper over an HTTP Request.","Errors associated with parsing the HTTP Request from a u8 …","Wrapper over an HTTP Response.","503, Service Unavailable","Payload too large.","Wrapper over a response status code.","401, Unauthorized","Underflow occurred when parsing a request.","Supported HTTP Versions.","","","Body of the HTTP message as bytes.","The body of the request.","","","","","","","","The optional files associated with the request.","The headers of the request.","","","","","","","","","","The request line of the request.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Deprecation message for the <code>mem_file_path</code> field.","None of the <code>mem_backend</code> or <code>mem_file_path</code> fields has been …","Both the <code>mem_backend</code> and <code>mem_file_path</code> fields have been …","","","","","",""],"i":[0,13,0,19,4,13,7,19,19,12,12,0,4,13,19,19,19,19,0,13,13,13,13,13,19,4,7,13,7,0,0,0,0,4,0,0,13,4,19,0,13,19,4,0,1,6,6,22,17,1,19,22,4,10,7,12,24,13,6,25,17,1,19,22,4,10,7,12,24,13,6,25,6,10,24,6,17,1,19,22,4,10,7,12,24,13,6,25,17,1,19,22,4,10,7,12,24,13,6,25,10,7,12,13,10,7,12,13,1,6,6,12,6,1,1,1,19,10,7,12,13,6,24,1,19,19,22,4,4,10,7,12,24,13,6,25,17,1,19,22,4,10,7,12,24,13,6,6,25,22,7,24,6,24,6,17,25,25,17,1,19,22,4,10,7,12,24,13,6,25,10,22,22,1,10,24,1,22,10,6,25,1,0,1,25,10,7,12,13,0,25,24,1,1,17,22,22,6,6,6,6,6,1,6,1,1,6,6,10,7,12,13,7,19,4,22,17,1,19,22,4,10,7,7,12,12,24,24,13,6,25,17,1,19,22,4,10,7,12,24,13,6,25,17,1,19,22,4,10,7,12,24,13,6,25,24,22,6,26,0,26,26,26,0,0,0,26,57,58,54,57,54,58,26,57,54,58,26,57,54,58,26,57,54,58,26,0,58,54,54,0,0,54,57,54,58,26,26,57,54,58,26,26,57,54,58,26,58,0,58,58,58,58,26,58,58,54,26,57,54,58,58,26,57,54,58,26,57,54,58,26,13,0,19,13,7,19,19,12,12,0,13,19,19,19,19,0,13,13,13,13,13,19,7,13,7,0,0,0,13,19,0,13,19,0,0,0,10,24,6,0,1,0,0,0,1,24,24,6,0,1,0,0,0,0,0,1,24,0,1,6,0,0,0,0,64,64,64,66,64,66,64,66,64,66,64,66,64,66,64,66,64,66,64,66,0,64,66,64,66,64,66,64,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":"````````````````````````````````````````````{{bd}{{j{fh}}}}{l{{A`{n}}}}{{ln}f}`{cAb{}}00000000000000000000000{l{{Af{Ad}}}}```{ce{}{}}00000000000000000000000{AdAd}{nn}{AhAh}{AjAj}{{ce}f{}{}}000`{lAl}{lAn}{{}Ah}{lB`}{{b{A`{Bb}}}{{j{fh}}}}{bBd}`{{BfBf}B`}{{AdAd}B`}{{nn}B`}{{AhAh}B`}{{AjAj}B`}{{ll}B`}`{bf}{{BfBh}{{j{fBj}}}}0{{BlBh}Bn}{{hBh}{{j{fBj}}}}0{{AdBh}{{j{fBj}}}}{{nBh}{{j{fBj}}}}{{AhBh}{{j{fBj}}}}{{C`Bh}{{j{fBj}}}}{{AjBh}{{j{fBj}}}}{{lBh}{{j{fBj}}}}{{CbBh}{{j{fBj}}}}{cc{}}0000000000{Cdl}1{{BlC`Cf}l}{{nc}fCh}``{C`Ah}{lAh}``{CbC`}{ce{}{}}00000000000{AdB`}{cCj{{Cn{Cl}}D`Db}}{{Ajc}l{{Dd{Cj}}Db}}`{AdDf}{C`n}{c{{j{bh}}}{{Cn{Dh}}}}{{{Dl{Dj}}{E`{Dn}}d}Bl}{cAd{{Dd{{A`{Eb}}}}}}{{AhAj}l}{{C`Cf}Cb}{Al{{j{bh}}}}``{{Cbc}Bb{{Ef{C`}{{Ed{l}}}}}}{Ad{{Eh{Eb}}}}{n{{Eh{Eb}}}}{Ah{{Eh{Eb}}}}{Aj{{Ej{Eb}}}}```{b{{j{{A`{Cb}}h}}}}{{bBb}{{j{fh}}}}`{{BlbElEnDf}f}{{Bl{Fb{F`}}Cf}l}{{l{A`{n}}}f}{{lAd}f}{{lAn}f}{lf}0{{bDf}f}{{lCl}f}`{b{{j{fh}}}}{lAj}`{ce{}{}}000{nCl}{cCj{}}0`{c{{j{e}}}{}{}}000000{{{Eh{Eb}}}{{j{nBf}}}}{{{Eh{Eb}}}{{j{AhBf}}}}2{{{Eh{Eb}}{Af{Df}}}{{j{C`Bf}}}}3333333333333333{cFd{}}00000000000{C`Ff}`{{lc}{{j{fFh}}}Fj}```````````{{FlCl}f}{cAb{}}0000000;;;;;;;;{Cl{{j{ClCd}}}}{{{j{FnG`}}}l}{{}Fl}`{{nCl{Af{Ad}}}Cj}{{nClAd}Cj}{{FlFl}B`}{{GbBh}Bn}{{FlBh}Bn}{{GdBh}Bn}{{CdBh}Bn}0{cc{}}000{GfCd}{ce{}{}}000{Gd{{Gh{GbFl}}}}{n{{j{GdCd}}}}{GbGd}{F`Gd}{GdFl}`{Cd{{Af{Gj}}}}{cl{GlD`Db}}{Gnl}{Fl{{Af{Cj}}}}{cCj{}}{c{{j{e}}}{}{}}0{C`{{j{Gdc}}}{}}111111{cFd{}}000````````````````````````````````````````````````````````````````````{cAb{}}000>>>>{c{{j{H`}}}Hb}{c{{j{Hd}}}Hb}{{H`Bh}Bn}{{HdBh}Bn}{cc{}}0{ce{}{}}0{Ad{{j{GdCd}}}}{{H`c}jHf}{{Hdc}jHf}<<<<::{{{Af{Cl}}}{{j{GdCd}}}}{{Ad{Af{Cl}}}{{j{GdCd}}}}444004{{}{{j{GdCd}}}}50555051511```515505","c":[],"p":[[5,"HttpServer",0],[5,"EventFd",453],[1,"unit"],[6,"ServerError",0],[6,"Result",454],[5,"Response",0],[6,"Method",0],[5,"Vec",455],[10,"Any",456],[5,"Body",0],[6,"Option",457],[6,"Version",0],[6,"StatusCode",0],[1,"i32"],[6,"MediaType",458],[1,"bool"],[5,"ServerResponse",0],[5,"Epoll",459],[6,"RequestError",0],[5,"Formatter",460],[5,"Error",460],[5,"ApiServer",0],[8,"Result",460],[5,"Request",0],[5,"ServerRequest",0],[6,"Error",258],[1,"u64"],[10,"Hasher",461],[5,"String",462],[1,"str"],[10,"AsRef",463],[10,"Serialize",464],[10,"Debug",460],[10,"Into",463],[1,"usize"],[5,"Path",465],[8,"ApiRequest",466],[5,"Sender",467],[8,"ApiResponse",466],[5,"Receiver",467],[1,"u8"],[17,"Output"],[10,"FnMut",468],[1,"slice"],[1,"array"],[5,"ProcessTimeReporter",469],[8,"BpfProgramRef",470],[6,"VmmAction",466],[5,"Box",471],[5,"TypeId",456],[5,"Uri",472],[5,"Error",473],[10,"Write",474],[5,"ParsingInfo",258],[6,"VmmData",466],[6,"VmmActionError",466],[6,"RequestAction",258],[5,"ParsedRequest",258],[5,"Error",475],[1,"tuple"],[10,"Error",476],[10,"Sized",477],[6,"Value",478],[6,"ActionType",393],[10,"Deserializer",479],[5,"ActionBody",393],[10,"Serializer",464]],"b":[[124,"impl-Display-for-RequestError"],[125,"impl-Debug-for-RequestError"],[127,"impl-Debug-for-ServerError"],[128,"impl-Display-for-ServerError"],[296,"impl-Debug-for-Error"],[297,"impl-Display-for-Error"]]}],\
["clippy_tracing",{"doc":"A tool to add, remove and check for <code>tracing::instrument</code> in …","t":"GPGPPFFFPPGGPPFPPFPPFPPPPOHNNNNNNNNNNNNNNNNNNNNNNOOHNNNNQQQOHHONNNNNNNNNNNNNNNNNOHHONNNNNNNNNNNNNHOHONNOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["Action","Apply","ApplyError","Check","Check","CheckVisitor","CommandLineArgs","Desc","Entry","Error","ExecError","Exit","File","Fix","FixVisitor","Ok","Read","SegmentedList","String","Strip","StripVisitor","Syn","Target","Utf","Write","action","apply","augment_args","augment_args_for_update","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cfg_attr","cfg_attr","check_attributes","clone","clone_into","command","command_for_update","create_check_visitor_function","create_fix_visitor_function","create_strip_visitor_function","exclude","exec","find_instrumented","first","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_arg_matches","from_arg_matches_mut","group_id","inner","inner_instrument","instrument","instrumented","into","into","into","into","into","into","into","into","into","into","into_resettable","into_resettable","into_resettable","is_instrumented","list","main","path","report","set_before","suffix","suffix","test","to_owned","to_possible_value","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches_mut","value_variants","visit_impl_item_fn","visit_impl_item_fn","visit_impl_item_fn","visit_item_fn","visit_item_fn","visit_item_fn"],"q":[[0,"clippy_tracing"],[149,"alloc::string"],[150,"core::option"],[151,"proc_macro2"],[152,"core::result"],[153,"std::io"],[154,"std::io"],[155,"core::ops::function"],[156,"clap_builder::builder::command"],[157,"syn::attr"],[158,"std::path"],[159,"core::fmt"],[160,"core::fmt"],[161,"clap_builder"],[162,"clap_builder::util::id"],[163,"syn::item"],[164,"clap_builder::builder::resettable"],[165,"std::process"],[166,"clap_builder::builder::possible_value"],[167,"core::any"],[168,"syn::item"]],"d":["The action to take.","Failed to run apply function.","Error for <code>apply</code>.","Process ran <code>check</code> action and found missing instrumentation.","Checks <code>tracing::instrument</code> is on all functions.","Visitor for the <code>check</code> action.","The command line arguments for the application.","The description of attributes on a function signature we …","Failed to read entry in file path.","Process encountered an error.","Error for <code>exec</code>.","Type to return from <code>main</code> to support returning an error …","Failed to open file.","Adds <code>tracing::instrument</code> to all functions.","Visitor for the <code>fix</code> action.","Process completed successfully.","Failed to read file.","A list of text lines split so that newlines can be …","Failed to parse file path to string.","Removes <code>tracing::instrument</code> from all functions.","Visitor for the <code>strip</code> action.","Failed to parse file to syn ast.","Failed to get write target.","Failed to parse file to utf8.","Failed to write result to target.","The action to take.","Apply the given action to the given source and outputs the …","","","","","","","","","","","","","","","","","","","","","","","A <code>cfg_attr</code> condition.","Whether to add a <code>cfg_attr</code> condition e.g. …","Returns a tuple where the 1st element is whether …","","","","","","","","Sub-paths which contain any of the strings from this list …","Wraps functionality from <code>main</code> to support returning an …","Finds the <code>#[instrument]</code> attribute on a function.","The first new line.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","The inner vector used to contain the original lines <code>.0</code> and …","Returns the instrument macro for a given function …","","Does the function have the <code>#[tracing::instrument]</code> …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Checks if a <code>syn::Attribute</code> is <code>#[instrument]</code>.","Source","","The path to look in.","","Sets the text line before <code>line</code> to <code>text</code>.","A custom path suffix.","When adding instrumentation use a custom suffix e.g. …","Does the function have the <code>#[test]</code> attribute macro?","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,20,0,29,1,0,0,0,20,29,0,0,20,1,0,29,5,0,20,1,0,5,5,5,5,24,0,24,24,31,35,37,38,29,15,24,1,20,5,31,35,37,38,29,15,24,1,20,5,38,24,0,1,1,24,24,0,0,0,24,0,0,31,20,20,5,5,31,35,37,38,29,15,24,1,20,5,24,24,24,31,0,0,15,31,35,37,38,29,15,24,1,20,5,31,35,38,0,38,0,24,29,31,38,24,15,1,1,20,5,31,35,37,38,29,15,24,1,20,5,31,35,37,38,29,15,24,1,20,5,31,35,37,38,29,15,24,1,20,5,24,24,1,35,37,38,35,37,38],"f":"``````````````````````````{{b{f{d}}{f{d}}cg}{{l{{f{h}}j}}}nA`{{Af{c}{{Ab{{l{eAd}}}}}}}}{AhAh}0{ce{}{}}0000000000000000000``{{{Al{Aj}}}An}{bb}{{ce}B`{}{}}{{}Ah}0````{{}{{l{{f{{Bf{BbBdBd}}}}Bh}}}}{{{Al{Aj}}}{{f{Aj}}}}`{{BhBj}Bl}0{{jBj}Bl}0{cc{}}000000000{Bn{{l{C`Cb}}}}0{{}{{f{Cd}}}}`{{Cf{f{d}}}d}{{Cf{f{d}}{f{d}}}d}`=========={c{{Ch{d}}}{}}00{Aj{{f{Aj}}}}`{{}Cj}`{CjCl}{{CnBdd}D`}```{ce{}{}}{b{{f{Db}}}}{cd{}}0{c{{l{e}}}{}{}}0000000000000000000{cDd{}}000000000{{C`Bn}{{l{B`Cb}}}}0{{}{{Al{b}}}}{{DfDh}B`}{{DjDh}B`}{{DlDh}B`}{{DfDn}B`}{{DjDn}B`}{{DlDn}B`}","c":[],"p":[[6,"Action",0],[5,"String",149],[6,"Option",150],[5,"Span",151],[6,"ApplyError",0],[6,"Result",152],[10,"Read",153],[10,"Write",153],[17,"Output"],[5,"Error",154],[10,"Fn",155],[5,"Command",156],[5,"Attribute",157],[1,"slice"],[5,"Desc",0],[1,"unit"],[5,"PathBuf",158],[1,"usize"],[1,"tuple"],[6,"ExecError",0],[5,"Formatter",159],[8,"Result",159],[5,"ArgMatches",160],[5,"CommandLineArgs",0],[8,"Error",161],[5,"Id",162],[5,"Signature",163],[6,"Resettable",164],[6,"Exit",0],[5,"ExitCode",165],[5,"SegmentedList",0],[1,"bool"],[5,"PossibleValue",166],[5,"TypeId",167],[5,"StripVisitor",0],[5,"ImplItemFn",163],[5,"CheckVisitor",0],[5,"FixVisitor",0],[5,"ItemFn",163]],"b":[[63,"impl-Debug-for-ExecError"],[64,"impl-Display-for-ExecError"],[65,"impl-Debug-for-ApplyError"],[66,"impl-Display-for-ApplyError"]]}],\
["cpu_template_helper",{"doc":"","t":"FGPPPPPPPGGPPPPPGPPPPSNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHNCNNNNNNNNNNNNNNNNNNNNNNNNCOOOOOOOOOOFGNNNNOPOPNNNNNNCQNCOPNNNNOPNNOPOPNNNNNNNNNNFPGPSNNNNNNNNHONNNNNNNOONNNNNNNNNPGPPPSNNNNHNNNNHNHHNNNNNCCCPGSNNNNHNNNNNNNNNNCHHHPGSNNNNNNNNEHNNNNCHPPGSNNNNNNNNNNNNEHCHPSPKKGSHNNNNHNNNNNNMNNNNCFFFFNNNNNNNNNNNNNNNNNNNNQQNNNNONNNNNNNNNNNNNNNNNNOQOONNNNNNNNNNNNNNNN","n":["Cli","Command","Compare","Dump","Dump","FileIo","Fingerprint","FingerprintCompare","FingerprintDump","FingerprintOperation","HelperError","NoCpuTemplate","Serde","Strip","Template","TemplateDump","TemplateOperation","TemplateStrip","TemplateVerify","Utils","Verify","_DERIVE_Display_FOR_HelperError","as_any","as_any","as_any","as_any","as_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","augment_args","augment_args_for_update","augment_subcommands","augment_subcommands","augment_subcommands","augment_subcommands_for_update","augment_subcommands_for_update","augment_subcommands_for_update","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","command","command","command_for_update","fingerprint","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","group_id","has_subcommand","has_subcommand","has_subcommand","into","into","into","into","into","main","run","source","template","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","utils","config","curr","filters","output","prev","config","config","output","paths","suffix","Fingerprint","FingerprintField","as_any","as_any","as_mut_any","as_mut_any","bios_revision","bios_revision","bios_version","bios_version","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","compare","declare_fingerprint_struct_and_enum","deserialize","dump","firecracker_version","firecracker_version","fmt","fmt","from","from","guest_cpu_config","guest_cpu_config","into","into","kernel_version","kernel_version","microcode_version","microcode_version","serialize","to_owned","to_possible_value","try_from","try_from","try_into","try_into","type_id","type_id","value_variants","Diff","DiffDetected","FingerprintCompareError","Serde","_DERIVE_Display_FOR_FingerprintCompareError","as_any","as_any","as_mut_any","as_mut_any","borrow","borrow","borrow_mut","borrow_mut","compare","curr","fmt","fmt","from","from","from","into","into","name","prev","serialize","source","to_string","try_from","try_from","try_into","try_into","type_id","type_id","DumpCpuConfig","FingerprintDumpError","GetKernelVersion","ReadSysfsFile","ShellCommand","_DERIVE_Display_FOR_FingerprintDumpError","as_any","as_mut_any","borrow","borrow_mut","dump","fmt","fmt","from","from","get_kernel_version","into","read_sysfs_file","run_shell_command","source","to_string","try_from","try_into","type_id","dump","strip","verify","DumpCpuConfig","DumpError","_DERIVE_Display_FOR_DumpError","as_any","as_mut_any","borrow","borrow_mut","dump","fmt","fmt","from","from","into","source","to_string","try_from","try_into","type_id","x86_64","config_to_template","cpuid_to_modifiers","msrs_to_modifier","NumberOfInputs","StripError","_DERIVE_Display_FOR_StripError","as_any","as_mut_any","borrow","borrow_mut","fmt","fmt","from","into","strip","strip_common","to_string","try_from","try_into","type_id","x86_64","strip","KeyNotFound","ValueMismatched","VerifyError","_DERIVE_Display_FOR_VerifyError","as_any","as_mut_any","borrow","borrow_mut","fmt","fmt","from","into","to_string","try_from","try_into","type_id","verify","verify_common","x86_64","verify","BuildMicroVm","CPU_TEMPLATE_HELPER_VERSION","CreateVmResources","DiffString","ModifierMapKey","UtilsError","_DERIVE_Display_FOR_UtilsError","add_suffix","as_any","as_mut_any","borrow","borrow_mut","build_microvm_from_config","fmt","fmt","from","from","into","source","to_diff_string","to_string","try_from","try_into","type_id","x86_64","CpuidModifierMap","CpuidModifierMapKey","MsrModifierMap","MsrModifierMapKey","as_any","as_any","as_any","as_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cpuid_leaf_modifier","cpuid_reg_modifier","eq","eq","eq","eq","flags","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","hash","hash","into","into","into","into","leaf","msr_modifier","register","subleaf","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":[[0,"cpu_template_helper"],[120,"cpu_template_helper::FingerprintOperation"],[125,"cpu_template_helper::TemplateOperation"],[130,"cpu_template_helper::fingerprint"],[174,"cpu_template_helper::fingerprint::compare"],[207,"cpu_template_helper::fingerprint::dump"],[231,"cpu_template_helper::template"],[234,"cpu_template_helper::template::dump"],[253,"cpu_template_helper::template::dump::x86_64"],[256,"cpu_template_helper::template::strip"],[274,"cpu_template_helper::template::strip::x86_64"],[275,"cpu_template_helper::template::verify"],[294,"cpu_template_helper::template::verify::x86_64"],[295,"cpu_template_helper::utils"],[320,"cpu_template_helper::utils::x86_64"],[389,"core::any"],[390,"clap_builder::builder::command"],[391,"core::fmt"],[392,"core::fmt"],[393,"std::io::error"],[394,"serde_json::error"],[395,"clap_builder::parser::matches::arg_matches"],[396,"clap_builder"],[397,"core::result"],[398,"clap_builder::util::id"],[399,"core::option"],[400,"core::error"],[401,"alloc::string"],[402,"core::any"],[403,"serde::ser"],[404,"clap_builder::builder::possible_value"],[405,"alloc::vec"],[406,"serde::ser"],[407,"std::sync::mutex"],[408,"alloc::sync"],[409,"vmm::cpu_config::x86_64::custom_cpu_template"],[410,"vmm"],[411,"vmm::cpu_config::x86_64::cpuid"],[412,"vmm::cpu_config::x86_64::custom_cpu_template"],[413,"vmm::cpu_config::x86_64::custom_cpu_template"],[414,"std::path"],[415,"vmm::builder"],[416,"core::hash"]],"d":["","","Compare two fingerprint files with queries.","Dump guest CPU configuration in the custom CPU template …","Dump fingerprint consisting of host-related information …","Failed to operate file: {0}","Fingerprint-related operations","{0}","{0}","","","CPU template is not specified: {0}","Failed to serialize/deserialize JSON file: {0}","Strip entries shared between multiple CPU template files.","Template-related operations","{0}","","{0}","{0}","{0}","Verify that the given CPU template file is applied as …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Path of fingerprint config file.","Path of fingerprint file that stores the current state.","List of fields to be compared.","Path of output file.","Path of fingerprint file that stores the previous state at …","Path of firecracker config file.","Path of firecracker config file specifying the target CPU …","Path of output file.","List of paths of input CPU configuration files.","Suffix of output files. To overwrite input files, specify …","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Difference detected between source and target:\\\\n{0}","","Failed to serialize/deserialize JSON: {0}","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Failed to dump CPU config: {0}","","Failed to get kernel version: {0}","Failed to read {0}: {1}","<code>{0}</code> failed: {1}","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","Failed to dump CPU config: {0}","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","Convert <code>&amp;CpuConfiguration</code> to <code>CustomCputemplate</code>.","","","The number of inputs should be two or more.","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","{0} not found in CPU configuration.","Value for {0} mismatched. {1} ","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Verify that the given CPU template is applied as intended.","","","Failed to build microVM: {0}","","Failed to create VmResources: {0}","","Trait for key of <code>HashMap</code>-based modifier.","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,9,8,9,3,7,3,3,0,0,3,3,8,7,3,0,3,3,3,8,0,3,6,7,8,9,3,6,7,8,9,6,6,7,8,9,7,8,9,3,6,7,8,9,3,6,7,8,9,6,6,6,0,3,3,6,7,8,9,3,3,3,3,3,3,3,3,3,3,6,7,8,9,6,7,8,9,6,7,8,9,6,7,8,9,3,6,7,8,9,0,0,3,0,3,3,6,7,8,9,3,6,7,8,9,3,6,7,8,9,6,7,8,9,6,7,8,9,0,65,66,66,65,66,67,68,67,69,69,0,0,31,30,31,30,31,30,31,30,31,30,31,30,30,30,0,0,31,0,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,30,31,30,31,30,31,30,30,0,12,0,12,0,12,37,12,37,12,37,12,37,0,37,12,12,12,12,37,12,37,37,37,37,12,12,12,37,12,37,12,37,11,0,11,11,11,0,11,11,11,11,0,11,11,11,11,0,11,0,0,11,11,11,11,11,0,0,0,18,0,0,18,18,18,18,0,18,18,18,18,18,18,18,18,18,18,0,0,0,0,15,0,0,15,15,15,15,15,15,15,15,0,0,15,15,15,15,0,0,16,16,0,0,16,16,16,16,16,16,16,16,16,16,16,16,0,0,0,0,17,0,17,0,0,0,0,0,17,17,17,17,0,17,17,17,17,17,17,70,17,17,17,17,0,0,0,0,0,60,62,61,63,60,62,61,63,60,62,61,63,60,62,61,63,60,61,60,61,0,0,60,62,61,63,60,60,60,62,61,61,63,60,62,62,61,63,63,60,61,60,62,61,63,60,0,60,60,60,61,60,61,60,62,61,63,60,62,61,63,60,62,61,63],"f":"``````````````````````{cb{}}000000000{dd}0000000{ce{}{}}000000000{{}d}`0`{{fh}j}0{{lh}j}{{nh}j}{{A`h}j}{{Abh}j}{Adf}{Aff}{Ahf}{Ajf}{cc{}}{Alf}{Anf}{B`f}{Bbf}{Bdf}5555{Bf{{Bj{lBh}}}}{Bf{{Bj{nBh}}}}{Bf{{Bj{A`Bh}}}}{Bf{{Bj{AbBh}}}}3210{{}{{Bn{Bl}}}}{C`Cb}00{ce{}{}}0000{{}{{Bj{Cdf}}}}{l{{Bj{Cdf}}}}{f{{Bn{Cf}}}}`{cCh{}}{c{{Bj{e}}}{}{}}000000000{cCj{}}0000{{lBf}{{Bj{CdBh}}}}{{nBf}{{Bj{CdBh}}}}{{A`Bf}{{Bj{CdBh}}}}{{AbBf}{{Bj{CdBh}}}}3210`````````````{cb{}}000````;;;;{ClCl}{{ce}Cd{}{}}``{c{{Bj{Cn}}}D`}```{{Cnh}j}{{Clh}j}{cc{}}0``{ce{}{}}0````{{Cnc}BjDb}1{Cl{{Bn{Dd}}}}????>>{{}{{Df{Cl}}}}`````::::3333{{CnCn{Dh{Cl}}}{{Bj{CdAh}}}}`{{Ahh}j}0{AlAh}7766``{{{Dj{c}}e}Bj{DlDl}Db}{Ah{{Bn{Cf}}}}{cCh{}}{c{{Bj{e}}}{}{}}000{cCj{}}0``````{cb{}}0<<{{{Eb{{E`{Dn}}}}}{{Bj{CnAf}}}}{{Afh}j}0{BdAf}{cc{}}{{}{{Bj{ChAf}}}}{ce{}{}}{C`{{Bj{ChAf}}}}0{Af{{Bn{Cf}}}};::9``````8822{{{Eb{{E`{Dn}}}}}{{Bj{EdBd}}}}{{Bdh}j}06{EfBd}5{Bd{{Bn{Cf}}}}?>>=`{EhEd}{Ej{{Dh{El}}}}{{{Fb{EnF`}}}{{Dh{Fd}}}}```??99{{Anh}j}0<:`{{{Df{{Fb{c{Ff{e}}}}}}}{{Bj{CdAn}}}{FhFj}{FlFj}}{cCh{}}{c{{Bj{e}}}{}{}}0{cCj{}}`{{{Dh{Ed}}}{{Bj{{Dh{Ed}}An}}}}````{cb{}}0{ce{}{}}0{{B`h}j}0{cc{}}27665`{{{Fb{c{Ff{e}}}}{Fb{c{Ff{e}}}}}{{Bj{CdB`}}}{FhFj}{FlFj}}`{{EdEd}{{Bj{CdB`}}}}```````{{FnC`}G`}6655{C`{{Bj{{Gd{{Eb{{E`{Dn}}}}Gb}}Bb}}}}{{Bbh}j}0{GfBb}68{Bb{{Bn{Cf}}}}{{cc}Ch{}}?>>=`````;;;;;;;;::::::::{GhGh}{GjGj}{{ce}Cd{}{}}0``{{GhGh}Cb}{{GlGl}Cb}{{GjGj}Cb}{{GnGn}Cb}`{{Ghh}j}0{{Glh}j}{{Gjh}j}0{{Gnh}j}{cc{}}{{{Dh{El}}}Gl}11{{{Dh{Fd}}}Gn}2{{Ghc}CdH`}{{Gjc}CdH`}{ce{}{}}000````00{cCh{}}0{c{{Bj{e}}}{}{}}0000000{cCj{}}000","c":[],"p":[[10,"Any",389],[5,"Command",390],[6,"HelperError",0],[5,"Formatter",391],[8,"Result",391],[5,"Cli",0],[6,"Command",0],[6,"TemplateOperation",0],[6,"FingerprintOperation",0],[6,"GetCpuTemplateError",392],[6,"FingerprintDumpError",207],[6,"FingerprintCompareError",174],[5,"Error",393],[5,"Error",394],[6,"StripError",256],[6,"VerifyError",275],[6,"UtilsError",295],[6,"DumpError",234],[5,"ArgMatches",395],[8,"Error",396],[6,"Result",397],[5,"Id",398],[6,"Option",399],[1,"str"],[1,"bool"],[1,"unit"],[10,"Error",400],[5,"String",401],[5,"TypeId",389],[6,"FingerprintField",130],[5,"Fingerprint",130],[10,"Deserializer",402],[10,"Serializer",403],[5,"PossibleValue",404],[1,"slice"],[5,"Vec",405],[5,"Diff",174],[10,"Serialize",403],[5,"Vmm",406],[5,"Mutex",407],[5,"Arc",408],[5,"CustomCpuTemplate",409],[6,"DumpCpuConfigError",406],[5,"CpuConfiguration",410],[6,"Cpuid",411],[5,"CpuidLeafModifier",409],[1,"u32"],[1,"u64"],[5,"HashMap",412],[5,"RegisterModifier",409],[5,"RegisterValueFilter",392],[10,"ModifierMapKey",295],[10,"Debug",391],[10,"Numeric",392],[5,"Path",413],[5,"PathBuf",413],[5,"VmResources",414],[1,"tuple"],[6,"StartMicrovmError",415],[5,"CpuidModifierMapKey",320],[5,"MsrModifierMapKey",320],[5,"CpuidModifierMap",320],[5,"MsrModifierMap",320],[10,"Hasher",416],[15,"Dump",120],[15,"Compare",120],[15,"Dump",125],[15,"Verify",125],[15,"Strip",125],[10,"DiffString",295]],"b":[[54,"impl-Display-for-HelperError"],[55,"impl-Debug-for-HelperError"],[60,"impl-From%3CGetCpuTemplateError%3E-for-HelperError"],[61,"impl-From%3CFingerprintDumpError%3E-for-HelperError"],[62,"impl-From%3CFingerprintCompareError%3E-for-HelperError"],[63,"impl-From%3CError%3E-for-HelperError"],[65,"impl-From%3CError%3E-for-HelperError"],[66,"impl-From%3CStripError%3E-for-HelperError"],[67,"impl-From%3CVerifyError%3E-for-HelperError"],[68,"impl-From%3CUtilsError%3E-for-HelperError"],[69,"impl-From%3CDumpError%3E-for-HelperError"],[189,"impl-Debug-for-FingerprintCompareError"],[190,"impl-Display-for-FingerprintCompareError"],[218,"impl-Display-for-FingerprintDumpError"],[219,"impl-Debug-for-FingerprintDumpError"],[242,"impl-Debug-for-DumpError"],[243,"impl-Display-for-DumpError"],[263,"impl-Display-for-StripError"],[264,"impl-Debug-for-StripError"],[283,"impl-Display-for-VerifyError"],[284,"impl-Debug-for-VerifyError"],[308,"impl-Display-for-UtilsError"],[309,"impl-Debug-for-UtilsError"],[351,"impl-Display-for-CpuidModifierMapKey"],[352,"impl-Debug-for-CpuidModifierMapKey"],[354,"impl-Display-for-MsrModifierMapKey"],[355,"impl-Debug-for-MsrModifierMapKey"]]}],\
["firecracker",{"doc":"","t":"GPPSPSPPPPSGPPPPPPGPPGPPPPPGPSSSSSCNNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNNNNNNNNNNNNHHCHHHCNNNNNNNNNNNNNNNNNNNNNHFGPPPPPSONNNNNNNNONNNNNONNNNNNHONNNNNNNFSNNNNNNNNNNNNNNNOPPSPPGPPGSPSNNNNNNNNHNNNNNNHHHNNNNNNNNN","n":["BuildFromJsonError","BuildMicroVMFromJson","Close","DEFAULT_API_SOCK_PATH","Dup2","FIRECRACKER_VERSION","FirecrackerVersion","GetRlimit","InvalidLogLevel","LoggerInitialization","MMDS_CONTENT_ARG","MainError","MetricsInitialization","OpenSnapshot","ParseArguments","ParseFromJson","PrintSnapshotDataFormat","RegisterSignalHandlers","ResizeFdTableError","ResizeFdtable","RunWithApi","RunWithoutApiError","RunWithoutApiError","SeccompFilter","SetLogger","Shutdown","SnapshotVersion","SnapshotVersionError","StartMicroVM","_DERIVE_Display_FOR_BuildFromJsonError","_DERIVE_Display_FOR_MainError","_DERIVE_Display_FOR_ResizeFdTableError","_DERIVE_Display_FOR_RunWithoutApiError","_DERIVE_Display_FOR_SnapshotVersionError","api_server_adapter","as_any","as_any","as_any","as_any","as_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_microvm_from_json","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","into","into","into","into","into","main","main_exec","metrics","print_snapshot_data_format","resize_fdtable","run_without_api","seccomp","source","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","warn_deprecated_parameters","ApiServerAdapter","ApiServerError","BuildFromJson","BuildMicroVmError","FailedToBindAndRunHttpServer","FailedToBindSocket","MicroVMStoppedWithError","_DERIVE_Display_FOR_ApiServerError","api_event_fd","as_any","as_any","as_mut_any","as_mut_any","borrow","borrow","borrow_mut","borrow_mut","controller","fmt","fmt","fmt","from","from","from_api","handle_request","init","into","into","process","run_microvm","run_with_api","to_api","to_string","try_from","try_from","try_into","try_into","type_id","type_id","PeriodicMetrics","WRITE_METRICS_PERIOD_MS","as_any","as_mut_any","borrow","borrow_mut","fmt","from","init","into","new","process","start","try_from","try_into","type_id","write_metrics","write_metrics_event_fd","Advanced","Custom","DESERIALIZATION_BYTES_LIMIT","Deserialization","FileOpen","FilterError","MissingThreadCategory","None","SeccompConfig","THREAD_CATEGORIES","ThreadCategories","_DERIVE_Display_FOR_FilterError","as_any","as_any","as_mut_any","as_mut_any","borrow","borrow","borrow_mut","borrow_mut","filter_thread_categories","fmt","fmt","fmt","from","from","from_args","get_custom_filters","get_default_filters","get_filters","into","into","to_string","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"firecracker"],[107,"firecracker::api_server_adapter"],[146,"firecracker::metrics"],[164,"firecracker::seccomp"],[203,"core::any"],[204,"seccompiler"],[205,"vmm"],[206,"alloc::string"],[207,"vmm::vmm_config::instance_info"],[208,"core::option"],[209,"vmm::resources"],[210,"vmm"],[211,"alloc::sync"],[212,"core::result"],[213,"core::fmt"],[214,"core::fmt"],[215,"std::process"],[216,"core::error"],[217,"core::any"],[218,"event_manager::events"],[219,"event_manager::events"],[220,"vmm::rpc_interface"],[221,"vmm::rpc_interface"],[222,"vmm::logger::metrics"],[223,"std::path"],[224,"core::fmt"]],"d":["","Failed to build MicroVM from Json: {0}","Failed to close dup2’d file descriptor","","Failed to call dup2 to resize fdtable","","Cannot translate snapshot data version {0} to Firecracker …","Failed to get RLIMIT_NOFILE","Invalid value for logger level: {0}.Possible values: […","Could not initialize logger: {0}","","","Could not initialize metrics: {0:?}","Unable to open snapshot state file: {0}","Arguments parsing error: {0} \\\\n\\\\nFor more information try …","Configuration for VMM from one single json failed: {0}","When printing Snapshot Data format: {0}","Failed to register signal handlers: {0}","","Failed to resize fd table: {0}","RunWithApiError error: {0}","","RunWithoutApiError error: {0}","Seccomp error: {0}","Failed to set the logger: {0}","MicroVMStopped without an error: {0:?}","Invalid data format version of snapshot file: {0}","","Could not Start MicroVM from one single json: {0}","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Attempts to resize the processes file descriptor table to …","","","","","","","","","","","","","","","","","","","","","","","","","","","Failed to build MicroVM from Json: {0}","Failed to build MicroVM: {0}.","Failed to bind and run the HTTP server: {0}","Failed to open the API socket at: {0}. Check that it is …","MicroVM stopped with an error: {0:?}","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Handle a read event (EPOLLIN).","Runs the vmm to completion, while any arising control …","","","","","","","","","","Object to drive periodic reporting of metrics.","Metrics reporting period.","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","PeriodicMetrics constructor. Can panic on <code>TimerFd</code> creation …","Handle a read event (EPOLLIN).","Start the periodic metrics engine which will flush metrics …","","","","","","Default, advanced filters.","Custom, user-provided filters.","","Filter deserialization failed: {0}","Filter file open error: {0}","Error retrieving seccomp filters.","Missing thread category: {0}","Seccomp filtering disabled.","Seccomp filter configuration.","","Invalid thread categories: {0}","","","","","","","","","","Return an error if the BpfThreadMap contains invalid …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Given the relevant command line args, return the …","Retrieve custom seccomp filters.","Retrieve the default filters containing the syscall rules …","Retrieve the appropriate filters, based on the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,22,20,0,20,0,21,20,17,17,0,0,17,21,17,15,17,17,0,17,17,0,17,17,17,22,21,0,15,0,0,0,0,0,0,17,20,21,15,22,17,20,21,15,22,17,20,21,15,22,17,20,21,15,22,0,17,17,20,20,21,21,15,15,22,22,17,17,17,20,21,15,22,17,20,21,15,22,0,0,0,0,0,0,0,17,17,20,21,15,22,17,20,21,15,22,17,20,21,15,22,17,20,21,15,22,0,0,0,28,28,28,28,28,0,29,28,29,28,29,28,29,28,29,29,28,28,29,28,29,29,29,29,28,29,29,29,0,29,28,28,29,28,29,28,29,0,0,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,43,43,0,42,42,0,42,43,0,0,42,0,42,43,42,43,42,43,42,43,0,42,42,43,42,43,43,0,0,0,42,43,42,42,43,42,43,42,43],"f":"```````````````````````````````````{cb{}}000000000{ce{}{}}000000000{{dfhjln{Ab{A`}}}{{B`{{Al{Ad{Aj{{Ah{Af}}}}}}An}}}}{{BbBd}Bf}0{{BhBd}Bf}0{{BjBd}Bf}0{{AnBd}Bf}0{{BlBd}Bf}0{BnBb}{BjBb}{cc{}}000099999{{}C`}{{}{{B`{CbBb}}}}`{A`{{B`{CbBj}}}}{{}{{B`{CbBh}}}}{{d{Ab{h}}jln{Ab{A`}}}{{B`{CbBl}}}}`{Bb{{Ab{Cd}}}}{ch{}}0000{c{{B`{e}}}{}{}}000000000{cCf{}}0000{{}Cb}`````````{cb{}}000{ce{}{}}000`{{ChBd}Bf}0{{CjBd}Bf}>>`{{CjCl}Cb}{{CjCn}Cb}44{{CjD`Cn}Cb}{{Db{Df{Dd}}{Dj{Dh}}Ad{Aj{{Ah{Af}}}}f}{{B`{CbCh}}}}{{d{Ab{h}}DljDnlnn{Ab{A`}}}{{B`{CbCh}}}}`<;;;;::``8877{{E`Bd}Bf}{cc{}}{{E`Cn}Cb}:{{}E`}{{E`D`Cn}Cb}{{E`Eb}Cb}{c{{B`{e}}}{}{}}0{cCf{}}{E`Cb}`````````````{cb{}}000{ce{}{}}000{d{{B`{dEd}}}}{{EdBd}Bf}0{{EfBd}Bf}<<{{l{Ab{c}}}{{B`{EfEd}}}{{Ej{Eh}}El}}{c{{B`{dEd}}}{EnEl}}{{}{{B`{dEd}}}}{Ef{{B`{dEd}}}}77{ch{}}<<<<;;","c":[],"p":[[10,"Any",203],[8,"BpfThreadMap",204],[8,"EventManager",205],[5,"String",206],[5,"InstanceInfo",207],[1,"bool"],[1,"usize"],[1,"str"],[6,"Option",208],[5,"VmResources",209],[5,"Vmm",205],[5,"Mutex",210],[5,"Arc",211],[1,"tuple"],[6,"BuildFromJsonError",0],[6,"Result",212],[6,"MainError",0],[5,"Formatter",213],[8,"Result",213],[6,"ResizeFdTableError",0],[6,"SnapshotVersionError",0],[6,"RunWithoutApiError",0],[6,"Error",214],[5,"ExitCode",215],[1,"unit"],[10,"Error",216],[5,"TypeId",203],[6,"ApiServerError",107],[5,"ApiServerAdapter",107],[6,"VmmAction",217],[5,"EventOps",218],[5,"Events",218],[5,"EventFd",219],[8,"ApiRequest",217],[5,"Receiver",220],[8,"ApiResponse",217],[5,"Sender",220],[5,"PathBuf",221],[5,"ProcessTimeReporter",222],[5,"PeriodicMetrics",146],[1,"u64"],[6,"FilterError",164],[6,"SeccompConfig",164],[5,"Path",221],[10,"AsRef",223],[10,"Debug",213],[10,"Read",224]],"b":[[56,"impl-Display-for-MainError"],[57,"impl-Debug-for-MainError"],[58,"impl-Display-for-ResizeFdTableError"],[59,"impl-Debug-for-ResizeFdTableError"],[60,"impl-Debug-for-SnapshotVersionError"],[61,"impl-Display-for-SnapshotVersionError"],[62,"impl-Display-for-BuildFromJsonError"],[63,"impl-Debug-for-BuildFromJsonError"],[64,"impl-Display-for-RunWithoutApiError"],[65,"impl-Debug-for-RunWithoutApiError"],[66,"impl-From%3CError%3E-for-MainError"],[67,"impl-From%3CSnapshotVersionError%3E-for-MainError"],[125,"impl-Display-for-ApiServerError"],[126,"impl-Debug-for-ApiServerError"],[185,"impl-Debug-for-FilterError"],[186,"impl-Display-for-FilterError"]]}],\
["jailer",{"doc":"","t":"PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPSGPPPPPPPPPPPPPPPPPPPPPPPPPPPPNNHCCHHHHCNNNNHHHCHHNNNNHKFFFFFSMNNONNNNNNNNNNONOONNNNNNNNNNHNNOHHNNNNNOONNNNONNNNNNNNNNNNNNNOONMNNSSSHSSSSSSSSSSSFSSPSPPSSSGNNNNONOHNOHNONONNNNNNNNNOONNONNONONONNNNOONNNNNNNONONSSSGFPPNNNNNNNNNONNNNNNNNONNNNNNNNNNNN","n":["ArgumentParsing","CStringParsing","Canonicalize","CgroupControllerUnavailable","CgroupFormat","CgroupHierarchyMissing","CgroupInheritFromParent","CgroupInvalidFile","CgroupInvalidParentPath","CgroupInvalidVersion","CgroupLineNotFound","CgroupWrite","ChangeFileOwner","ChdirNewRoot","Chmod","Clone","CloseDevNullFd","CloseNetNsFd","CloseRange","Copy","CreateDir","Daemonize","DirOpen","Dup2","Exec","ExecFileName","ExtractFileName","FileOpen","FromBytesWithNul","GetOldFdFlags","Gid","InvalidInstanceId","JAILER_VERSION","JailerError","MissingParent","MkdirOldRoot","MknodDev","MountBind","MountPropagationSlave","NotADirectory","NotAFile","OpenDevNull","OsStringParsing","PivotRoot","ReadLine","ReadToString","RegEx","ResLimitArgument","ResLimitFormat","ResLimitValue","RmOldRootDir","SetCurrentDir","SetNetNs","SetSid","Setrlimit","UTF8Parsing","Uid","UmountOldRoot","UnexpectedListenerFd","UnsetCloexec","UnshareNewNs","Write","borrow","borrow_mut","build_arg_parser","cgroup","chroot","clean_env_vars","close_fds_by_close_range","close_fds_by_reading_proc","close_inherited_fds","env","fmt","fmt","from","into","main","main_exec","readln_special","resource_limits","sanitize_process","to_cstring","to_string","try_from","try_into","type_id","writeln_special","Cgroup","CgroupBase","CgroupBuilder","CgroupMountPoint","CgroupV1","CgroupV2","PROC_MOUNTS","attach_pid","attach_pid","attach_pid","base","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cg_parent_depth","controller_available","dir","file","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","get_controller_from_filename","get_v1_hierarchy_path","get_v2_hierarchy_path","hierarchies","inherit_from_parent","inherit_from_parent_aux","into","into","into","into","into","location","mount_points","new","new","new","new_cgroup","options","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","value","version","write_all_subtree_control","write_value","write_value","write_value","CURRENT_DIR_NUL_TERMINATED","OLD_ROOT_DIR_NAME_NUL_TERMINATED","ROOT_DIR_NUL_TERMINATED","chroot","DEV_KVM_MAJOR","DEV_KVM_MINOR","DEV_KVM_WITH_NUL","DEV_NET_TUN_MAJOR","DEV_NET_TUN_MINOR","DEV_NET_TUN_WITH_NUL","DEV_UFFD_MAJOR","DEV_UFFD_PATH","DEV_URANDOM_MAJOR","DEV_URANDOM_MINOR","DEV_URANDOM_WITH_NUL","Env","FOLDER_HIERARCHY","FOLDER_PERMISSIONS","NotFound","PID_FILE_EXTENSION","ParseDevMinor","ReadProcMisc","STDERR_FILENO","STDIN_FILENO","STDOUT_FILENO","UserfaultfdParseError","borrow","borrow","borrow_mut","borrow_mut","cgroups","chroot_dir","chroot_dir","clone","copy_exec_to_chroot","daemonize","dup2","exec_command","exec_file_path","exec_into_new_pid_ns","extra_args","fmt","fmt","fmt","from","from","from","from","get_userfaultfd_minor_dev_number","gid","gid","id","into","into","jailer_cpu_time_us","join_netns","mknod_and_own_dev","netns","new","new_pid_ns","parse_resource_limits","resource_limits","run","save_exec_file_pid","setup_jailed_folder","source","start_time_cpu_us","start_time_us","to_string","try_from","try_from","try_into","try_into","type_id","type_id","uffd_dev_minor","uid","uid","validate_exec_file","FSIZE_ARG","NO_FILE","NO_FILE_ARG","Resource","ResourceLimits","RlimitFsize","RlimitNoFile","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","file_size","fmt","fmt","fmt","from","from","install","into","into","no_file","set_file_size","set_limit","set_no_file","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"jailer"],[87,"jailer::cgroup"],[161,"jailer::chroot"],[165,"jailer::env"],[240,"jailer::resource_limits"],[278,"utils::arg_parser"],[279,"core::result"],[280,"core::fmt"],[281,"core::fmt"],[282,"std::path"],[283,"core::convert"],[284,"core::fmt"],[285,"core::any"],[286,"core::fmt"],[287,"core::ffi"],[288,"libc::unix"],[289,"std::ffi::os_str"],[290,"std::io::error"],[291,"core::num::error"],[292,"utils::arg_parser"],[293,"core::option"],[294,"libc::unix::linux_like::linux::gnu::b64"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create an ArgParser object which contains info about the …","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Turns an <code>AsRef&lt;Path&gt;</code> into a <code>CString</code> (c style string). The …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","",""],"i":[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,3,3,3,3,0,0,0,0,0,0,3,3,3,3,0,0,0,0,0,0,0,0,14,15,16,15,19,20,21,15,16,19,20,21,15,16,15,16,19,21,19,20,21,15,16,19,20,21,15,16,0,20,20,20,0,0,19,20,21,15,16,21,20,20,15,16,20,19,19,20,21,15,16,19,20,21,15,16,19,20,21,15,16,21,20,16,14,15,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,31,31,0,0,0,0,26,31,26,31,26,26,26,0,26,26,0,26,26,26,26,26,31,31,26,31,31,31,26,26,26,26,26,31,26,26,26,26,26,26,26,26,26,26,26,31,26,26,31,26,31,26,31,26,31,26,26,26,26,0,0,0,0,0,42,42,42,36,42,36,42,36,42,36,36,36,42,42,36,42,36,36,42,36,36,36,36,36,42,36,42,42,36,42,36,42,36],"f":"``````````````````````````````````````````````````````````````{ce{}{}}0{{}b}``{{}d}{{}{{h{df}}}}00`{{fj}l}0{cc{}}522{c{{h{nf}}}{{Ab{A`}}Ad}}`3{c{{h{Aff}}}{{Ab{A`}}Ad}}{cn{}}{c{{h{e}}}{}{}}0{cAh{}}{{ce}{{h{df}}}{{Ab{A`}}Ad}{AjAd}}```````{Al{{h{df}}}}{An{{h{df}}}}{B`{{h{df}}}}`>>>>>>>>>>`{{Bbc}Bd{{Ab{A`}}Ad}}``{{Bfj}l}{{Bhj}l}{{Bjj}l}{{Anj}l}{{B`j}l}?????{Bb{{h{Bbf}}}}{{BhBb}{{h{Blf}}}}{Bh{{h{Blf}}}}`{{BlBbBn}{{h{df}}}}0{ce{}{}}0000``{C`{{h{Bhf}}}}{{nnBbA`A`}{{h{Anf}}}}{{nnBbA`A`}{{h{B`f}}}}{{BhnnBbA`}{{h{{Cb{Al}}f}}}}`{c{{h{e}}}{}{}}000000000{cAh{}}0000``{{cBb}{{h{df}}}{{Ab{A`}}Ad}}{Al{{h{df}}}}{An{{h{df}}}}{B`{{h{df}}}}```{A`{{h{df}}}}``````````````````````;;;;`{CdA`}`{{CfCh}{{h{Chf}}}}{Cd{{h{Cjf}}}}`{{ChCh}{{h{df}}}}{{CdBl}Cl}`{{CdBl}{{h{df}}}}`{{Cdj}l}{{Cnj}l}0{cc{}}{D`Cn}{ClCn}2{{}{{h{DbCn}}}}{CdDb}``{ce{}{}}0`{Bb{{h{df}}}}{{CdBbDbDb}{{h{df}}}}`{{DdDfDf}{{h{Cdf}}}}`{{Dh{Dj{n}}}{{h{df}}}}`{Cd{{h{df}}}}{{CdDlBl}{{h{df}}}}{{Cdc}{{h{df}}}{{Ab{A`}}}}{Cn{{E`{Dn}}}}``{cn{}}{c{{h{e}}}{}{}}000{cAh{}}0`<`{Bb{{h{{Eb{Bln}}f}}}}```````<<<<{EdEd}{DhDh}{{ce}d{}{}}0{{}Dh}`{{Edj}l}0{{Dhj}l}{cc{}}0{Dh{{h{df}}}}{ce{}{}}0`{{DhDf}d}{{EdEf}{{h{df}}}}122>====<<","c":[],"p":[[5,"ArgParser",278],[1,"unit"],[6,"JailerError",0],[6,"Result",279],[5,"Formatter",280],[8,"Result",280],[5,"String",281],[5,"Path",282],[10,"AsRef",283],[10,"Debug",280],[5,"CString",284],[5,"TypeId",285],[10,"Display",280],[10,"Cgroup",87],[5,"CgroupV1",87],[5,"CgroupV2",87],[1,"str"],[1,"bool"],[5,"CgroupMountPoint",87],[5,"CgroupBuilder",87],[5,"CgroupBase",87],[5,"PathBuf",282],[1,"u16"],[1,"u8"],[5,"Box",286],[5,"Env",165],[6,"c_void",287],[8,"c_int",288],[5,"OsString",289],[5,"Error",290],[6,"UserfaultfdParseError",165],[5,"ParseIntError",291],[1,"u32"],[5,"Arguments",278],[1,"u64"],[5,"ResourceLimits",240],[1,"slice"],[1,"i32"],[10,"Error",292],[6,"Option",293],[1,"tuple"],[6,"Resource",240],[8,"rlim_t",294]],"b":[[72,"impl-Display-for-JailerError"],[73,"impl-Debug-for-JailerError"],[203,"impl-Debug-for-UserfaultfdParseError"],[204,"impl-Display-for-UserfaultfdParseError"],[206,"impl-From%3CParseIntError%3E-for-UserfaultfdParseError"],[207,"impl-From%3CError%3E-for-UserfaultfdParseError"],[257,"impl-Debug-for-Resource"],[258,"impl-Display-for-Resource"]]}],\
["log_instrument",{"doc":"","t":"IJFNNONNOXNNHONNN","n":["InnerPath","PATH","__Instrument","borrow","borrow_mut","data","drop","from","inner","instrument","into","new","path","poison","try_from","try_into","type_id"],"q":[[0,"log_instrument"],[17,"std::thread"],[18,"alloc::vec"],[19,"std::collections::hash::map"],[20,"std::sync::mutex"],[21,"core::result"],[22,"core::any"]],"d":["","","","","","","","Returns the argument unchanged.","","Adds <code>log::trace!</code> events at the start and end of an …","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,0,1,1,10,1,1,10,0,1,1,0,10,1,1,1],"f":"```{ce{}{}}0`{bd}{cc{}}``2{fb}{{}{{n{{l{h{j{f}}}}}}}}`{c{{A`{e}}}{}{}}0{cAb{}}","c":[],"p":[[5,"__Instrument",0],[1,"unit"],[1,"str"],[5,"ThreadId",17],[5,"Vec",18],[5,"HashMap",19],[5,"Mutex",20],[6,"Result",21],[5,"TypeId",22],[8,"InnerPath",0]],"b":[]}],\
["log_instrument_macros",{"doc":"","t":"X","n":["instrument"],"q":[[0,"log_instrument_macros"]],"d":["Adds <code>log::trace!</code> events at the start and end of an …"],"i":[0],"f":"`","c":[],"p":[],"b":[]}],\
["rebase_snap",{"doc":"","t":"PSSSGPPPSPGPPPPPSSNNNNHNNNNNNHNNHHHNNNNNNNN","n":["ArgParse","BASE_FILE","DEPRECATION_MSG","DIFF_FILE","FileError","InvalidBaseFile","InvalidDiffFile","Metadata","REBASE_SNAP_VERSION","RebaseFiles","RebaseSnapError","Seek","SeekData","SeekHole","SendFile","SnapFile","_DERIVE_Display_FOR_FileError","_DERIVE_Display_FOR_RebaseSnapError","borrow","borrow","borrow_mut","borrow_mut","build_arg_parser","fmt","fmt","fmt","fmt","from","from","get_files","into","into","main","main_exec","rebase","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"rebase_snap"],[43,"utils::arg_parser"],[44,"core::fmt"],[45,"core::fmt"],[46,"core::result"],[47,"alloc::string"],[48,"core::any"]],"d":["Arguments parsing error: {0} \\\\n\\\\nFor more information try …","","","","","Invalid base file: {0:?}","Invalid diff file: {0:?}","Failed to get metadata: {0:?}","","Error merging the files: {0}","","Failed to seek: {0:?}","Failed to seek data: {0:?}","Failed to seek hole: {0:?}","Failed to send the file: {0:?}","Error parsing the cmd line args: {0}","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","",""],"i":[5,0,0,0,0,2,2,2,0,5,0,2,2,2,2,5,0,0,2,5,2,5,0,2,2,5,5,2,5,0,2,5,0,0,0,2,5,2,5,2,5,2,5],"f":"``````````````````{ce{}{}}000{{}b}{{df}h}0{{jf}h}0{cc{}}0{l{{Ab{{A`{nn}}d}}}}55{{}{{Ab{Adj}}}}0{{nn}{{Ab{Add}}}}{cAf{}}0{c{{Ab{e}}}{}{}}000{cAh{}}0","c":[],"p":[[5,"ArgParser",43],[6,"FileError",0],[5,"Formatter",44],[8,"Result",44],[6,"RebaseSnapError",0],[5,"Arguments",43],[5,"File",45],[1,"tuple"],[6,"Result",46],[1,"unit"],[5,"String",47],[5,"TypeId",48]],"b":[[23,"impl-Debug-for-FileError"],[24,"impl-Display-for-FileError"],[25,"impl-Debug-for-RebaseSnapError"],[26,"impl-Display-for-RebaseSnapError"]]}],\
["seccompiler",{"doc":"The library crate that defines common helper functions …","t":"PEIIGPGPSSHCONNNNNNCCHNONNNNNNNNNNOEFCNNNNNNNNNNNSSSPPSSSSSSSSHSSSHSSFPPHPPPGPPPPPPPPPPPPPSSSSSSSSSSSGGGFFFIGGPPHSSOPOONNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONPSIONOGFFPPFPFSONNNNNNNNNNNNNNONOONNNNNNOONNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNSFCONNNNNNONNNNNCHH","n":["Bincode","BpfProgram","BpfProgramRef","BpfThreadMap","DeserializationError","FilterTooLarge","InstallationError","Prctl","_DERIVE_Display_FOR_DeserializationError","_DERIVE_Display_FOR_InstallationError","apply_filter","backend","base","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","common","compiler","deserialize_binary","eq","filter","fmt","fmt","fmt","fmt","from","from","from","into","into","into","len","sock_filter","sock_fprog","syscall_table","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","ARG_NUMBER_MAX","AUDIT_ARCH_AARCH64","AUDIT_ARCH_X86_64","Allow","Arch","BPF_ABS","BPF_ALU","BPF_AND","BPF_JA","BPF_JEQ","BPF_JGE","BPF_JGT","BPF_JMP","BPF_JUMP","BPF_K","BPF_LD","BPF_RET","BPF_STMT","BPF_W","CONDITION_MAX_LEN","Comment","ConflictingRules","Dword","EXAMINE_SYSCALL","EmptyRulesVector","Eq","Errno","FilterError","FilterTooLarge","Ge","Gt","InvalidArgumentNumber","InvalidString","KillProcess","KillThread","Le","Log","Lt","MaskedEq","Ne","Qword","SECCOMP_DATA_ARGS_OFFSET","SECCOMP_DATA_ARG_SIZE","SECCOMP_DATA_NR_OFFSET","SECCOMP_RET_ALLOW","SECCOMP_RET_ERRNO","SECCOMP_RET_KILL_PROCESS","SECCOMP_RET_KILL_THREAD","SECCOMP_RET_LOG","SECCOMP_RET_MASK","SECCOMP_RET_TRACE","SECCOMP_RET_TRAP","SeccompAction","SeccompCmpArgLen","SeccompCmpOp","SeccompCondition","SeccompFilter","SeccompRule","SeccompRuleMap","TargetArch","TargetArchError","Trace","Trap","VALIDATE_ARCHITECTURE","_DERIVE_Display_FOR_FilterError","_DERIVE_Display_FOR_TargetArchError","_marker","aarch64","action","alloc","append_condition","append_syscall_chain","arg_len","arg_number","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","comment","conditions","default_action","deserialize","deserialize","deserialize","deserialize","deserialize","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","get_audit_value","into","into","into","into","into","into","into","into","into","into","into_bpf","into_eq_bpf","into_ge_bpf","into_gt_bpf","into_le_bpf","into_lt_bpf","into_masked_eq_bpf","into_ne_bpf","length","new","new","operator","root","rules","target_arch","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","validate","validate","value","value_segments","x86_64","BPF_MAX_LEN","BpfProgram","buf","from","len","CompilationError","Compiler","Filter","Filter","IdenticalActions","JsonFile","SyscallName","SyscallRule","_DERIVE_Display_FOR_CompilationError","arch","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","comment","compile_blob","conditions","default_action","deserialize","deserialize","deserialize","eq","eq","eq","filter","filter_action","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","into","into","into","into","into","make_basic_seccomp_filter","make_seccomp_filter","new","source","syscall","syscall_table","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","validate","validate","validate_filters","MAP_CAPACITY","SyscallTable","aarch64","arch","borrow","borrow_mut","fmt","from","get_syscall_nr","into","map","new","populate_map","try_from","try_into","type_id","x86_64","make_syscall_table","make_syscall_table"],"q":[[0,"seccompiler"],[49,"seccompiler::backend"],[271,"seccompiler::common"],[276,"seccompiler::compiler"],[356,"seccompiler::syscall_table"],[373,"seccompiler::syscall_table::aarch64"],[374,"seccompiler::syscall_table::x86_64"],[375,"core::result"],[376,"core::option"],[377,"std::io"],[378,"core::fmt"],[379,"core::fmt"],[380,"core::any"],[381,"alloc::vec"],[382,"serde::de"],[383,"alloc::collections::btree::map"],[384,"core::error"],[385,"std::collections::hash::map"]],"d":["Bincode deserialization failed: {0}","","Reference to program made up of a sequence of BPF …","Type that associates a thread category to a BPF program.","Binary filter deserialization errors.","Filter length exceeds the maximum size of {BPF_MAX_LEN:} …","Filter installation errors.","prctl` syscall failed with error code: {0}","","","Helper function for installing a BPF filter.","This module defines the data structures used for the …","","","","","","","","Module that defines common data structures used by both …","Module defining the logic for compiling the deserialized …","Deserialize a BPF file into a collection of usable BPF …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Syscall tables","","","","","","","","","","","","","","","Allows syscall.","{0:?}","","","","","","","","","Builds a <code>jump</code> BPF instruction.","","","","Builds a “statement” BPF instruction.","","","Dummy placeholder type for a JSON comment. Holds no value.","Syscall {0} has conflicting rules.","Argument value length is 4 bytes.","Builds a sequence of BPF instructions that are followed by …","The seccomp rules vector is empty.","Argument value is equal to the specified value.","Returns from syscall with specified error number.","Seccomp filter errors.","The seccomp filter contains too many BPF instructions.","Argument value is greater than or equal to the specified …","Argument value is greater than specified value.","The seccomp rule contains an invalid argument number.","Invalid target arch string: {0}","Kills calling process.","Kills calling thread.","Argument value is less than or equal to the specified …","Same as allow but logs call.","Argument value is less than specified value.","Masked bits of argument value are equal to masked bits of …","Argument value is not equal to specified value.","Argument value length is 8 bytes.","","","","","","","","","","","","Actions that <code>seccomp</code> can apply to process calling a …","Seccomp argument value length.","Comparison to perform when matching a condition.","Condition that syscall must match in order to satisfy a …","Filter containing rules assigned to syscall numbers.","Rule that <code>seccomp</code> attempts to match for a syscall.","Type that associates the syscall number to its …","Supported target architectures.","Errors related to target arch.","Notifies tracing process of the caller with respective …","Sends <code>SIGSYS</code> to the calling process.","Builds a sequence of BPF instructions that validate the …","","","","aarch64 arch","Action applied to calling process if rule gets matched.","","Appends a condition of the rule to an accumulator.","Appends a chain of rules to an accumulator, updating the …","Length of the argument value that is to be compared.","Index of the argument that is to be compared.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Optional empty value, represents a <code>comment</code> property in the …","Conditions of rule that need to match in order for the …","Default action to apply to syscall numbers that do not …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get the arch audit value.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Translates the <code>SeccompCondition</code> into BPF statements.","Translates the <code>eq</code> (equal) condition into BPF statements.","Translates the <code>ge</code> (greater than or equal) condition into …","Translates the <code>gt</code> (greater than) condition into BPF …","Translates the <code>le</code> (less than or equal) condition into BPF …","Translates the <code>lt</code> (less than) condition into BPF …","Translates the <code>masked_eq</code> (masked equal) condition into BPF …","Translates the <code>ne</code> (not equal) condition into BPF …","","Creates a new rule. Rules with 0 conditions always match.","Creates a new filter with a set of rules and a default …","Comparison to perform.","","Map of syscall numbers and corresponding rule chains.","Target architecture of the generated BPF filter.","","","","","","","","","","Get the string representation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Validates the SeccompCondition data","Performs semantic checks on the SeccompFilter.","The value that will be compared with the argument value.","Splits the <code>SeccompCondition</code> into 32 bit chunks and offsets.","x86_64 arch","The maximum seccomp-BPF program length allowed by the …","Program made up of a sequence of BPF instructions.","","Translates a rule into BPF statements.","","Errors compiling Filters into BPF.","Object responsible for compiling <code>Filter</code>s into <code>BpfProgram</code>s. …","Deserializable seccomp filter. Refers to one thread …","{0}","<code>filter_action</code> and <code>default_action</code> are equal.","Deserializable object that represents the Json filter file.","Invalid syscall name: {0} for given arch: {1:?}.","Deserializable object representing a syscall rule.","","Target architecture. Can be different from the current …","","","","","","","","","","","","","","","Optional empty value, represents a <code>comment</code> property in the …","Main compilation function.","Rule conditions.","Default action if no rules match. e.g. <code>Kill</code> for an …","","","","","","","The collection of <code>SyscallRule</code>s.","Default action if a rule matches. e.g. <code>Allow</code> for an …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Transforms the deserialized <code>Filter</code> into a basic …","Transforms the deserialized <code>Filter</code> into a <code>SeccompFilter</code> …","Create a new <code>Compiler</code> instance, for the given target …","","Name of the syscall.","Target-specific syscall table.","","","","","","","","","","","","","","","","","","","Perform semantic checks after deserialization.","Perform semantic checks after deserialization.","Perform semantic checks after deserialization.","Number of syscalls for x86_64 (rough upper bound).","Creates and owns a mapping from the arch-specific syscall …","","","","","","Returns the argument unchanged.","Returns the arch-specific syscall number based on the …","Calls <code>U::from(self)</code>.","","Create new syscall table","Populates the arch-specific syscall map.","","","","","",""],"i":[8,0,0,0,0,3,0,3,0,0,0,0,7,46,8,3,46,8,3,0,0,0,3,46,8,8,3,3,46,8,3,46,8,3,46,0,0,0,8,3,46,8,3,46,8,3,46,8,3,0,0,0,29,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,28,0,25,27,29,0,25,27,27,25,32,29,29,27,29,27,27,27,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,29,0,0,0,33,20,24,33,24,30,21,21,26,25,20,32,27,28,21,29,24,30,26,25,20,32,27,28,21,29,24,30,26,20,27,28,21,29,24,30,26,20,27,28,21,29,24,30,21,24,30,26,27,28,21,29,26,25,20,32,27,28,21,29,24,30,26,25,25,20,32,32,27,28,21,29,24,30,26,25,20,32,27,28,21,29,24,30,20,26,25,20,32,27,28,21,29,24,30,21,21,21,21,21,21,21,21,33,24,30,21,33,30,30,26,20,27,28,21,29,24,30,25,20,32,26,25,20,32,27,28,21,29,24,30,26,25,20,32,27,28,21,29,24,30,26,25,20,32,27,28,21,29,24,30,21,30,21,21,20,0,0,36,36,36,0,0,0,41,41,0,41,0,0,39,41,42,37,38,39,41,42,37,38,39,37,38,37,38,37,39,37,38,42,37,38,41,37,38,38,38,41,41,42,37,38,39,41,41,42,37,38,39,41,42,37,38,39,39,39,39,41,37,39,37,38,41,41,42,37,38,39,41,42,37,38,39,41,42,37,38,39,37,38,39,0,0,0,44,44,44,44,44,44,44,44,44,44,44,44,44,0,0,0],"f":"``````````{b{{h{df}}}}``{ce{}{}}00000``{{c{l{j}}}{{h{nA`}}}{AbAd}}{{ff}Af}`{{A`Ah}Aj}0{{fAh}Aj}0{cc{}}00555````{cAl{}}0{c{{h{e}}}{}{}}00000{cAn{}}00```````````````````````{{}{{Bf{`}}}}```````````````````````````````````````{Bh{{Bf{`}}}}``````{{Bj{Bf{{Bf{`}}}}BlBd}d}{{Bn{Bf{C`}}Bb{Bf{{Bf{`}}}}Bl}{{h{dCb}}}}``<<<<<<<<<<<<<<<<<<<<{CdCd}{BhBh}{CfCf}{ChCh}{BjBj}{CjCj}{C`C`}{ClCl}{{ce}d{}{}}0000000```{c{{h{Cd}}}Cn}{c{{h{Cf}}}Cn}{c{{h{Ch}}}Cn}{c{{h{Bj}}}Cn}{c{{h{Cj}}}Cn}{{CdCd}Af}{{CbCb}Af}{{BhBh}Af}{{D`D`}Af}{{CfCf}Af}{{ChCh}Af}{{BjBj}Af}{{CjCj}Af}{{C`C`}Af}{{ClCl}Af}{{CdAh}Aj}{{CbAh}Aj}0{{BhAh}Aj}{{D`Ah}Aj}0{{CfAh}Aj}{{ChAh}Aj}{{BjAh}Aj}{{CjAh}Aj}{{C`Ah}Aj}{{ClAh}Aj}{cc{}}000000000{BhBb}{ce{}{}}000000000{{BjBd}{{Bf{`}}}}00000{{BjBdj}{{Bf{`}}}}1`{{{Bf{Bj}}Cj}C`}{{DbCjDd}{{h{ClCb}}}}````44444444{cAl{}}{BhDd}1{c{{h{e}}}{}{}}0000000000000000000{cAn{}}000000000{Bj{{h{dCb}}}}{Cl{{h{dCb}}}}`{Bj{{Df{BbBbBdBd}}}}````{C`Dh}```````````<<<<<<<<<<{DjDj}{DlDl}{{ce}d{}{}}0`{{Dn{E`{AlDl}}Af}{{h{{E`{AlDh}}Eb}}}}``{c{{h{Ed}}}Cn}{c{{h{Dj}}}Cn}{c{{h{Dl}}}Cn}{{EbEb}Af}{{DjDj}Af}{{DlDl}Af}``{{EbAh}Aj}0{{EdAh}Aj}{{DjAh}Aj}{{DlAh}Aj}{{DnAh}Aj}{CbEb}{cc{}}0000{ce{}{}}0000{{DnDl}{{h{ClEb}}}}0{BhDn}{Eb{{l{Ef}}}}``33{cAl{}}{c{{h{e}}}{}{}}000000000{cAn{}}0000{Dj{{h{dEb}}}}{Dl{{h{dEb}}}}{{Dn{E`{AlDl}}}{{h{dEb}}}}````99{{EhAh}Aj};{{EhDd}{{l{Bn}}}};`{BhEh}{Ehd}887`{{{Ej{AlBn}}}d}0","c":[],"p":[[8,"BpfProgramRef",0],[1,"unit"],[6,"InstallationError",0],[6,"Result",375],[1,"u64"],[6,"Option",376],[8,"BpfThreadMap",0],[6,"DeserializationError",0],[10,"Read",377],[10,"Debug",378],[1,"bool"],[5,"Formatter",378],[8,"Result",378],[5,"String",379],[5,"TypeId",380],[1,"u16"],[1,"u32"],[1,"u8"],[5,"Vec",381],[6,"TargetArch",49],[5,"SeccompCondition",49],[1,"usize"],[1,"i64"],[5,"SeccompRule",49],[6,"FilterError",49],[5,"Comment",49],[6,"SeccompCmpOp",49],[6,"SeccompCmpArgLen",49],[6,"SeccompAction",49],[5,"SeccompFilter",49],[10,"Deserializer",382],[6,"TargetArchError",49],[8,"SeccompRuleMap",49],[1,"str"],[1,"tuple"],[8,"BpfProgram",271],[5,"SyscallRule",276],[5,"Filter",276],[5,"Compiler",276],[5,"BTreeMap",383],[6,"CompilationError",276],[5,"JsonFile",276],[10,"Error",384],[5,"SyscallTable",356],[5,"HashMap",385],[5,"sock_fprog",0]],"b":[[24,"impl-Display-for-DeserializationError"],[25,"impl-Debug-for-DeserializationError"],[26,"impl-Display-for-InstallationError"],[27,"impl-Debug-for-InstallationError"],[178,"impl-Display-for-FilterError"],[179,"impl-Debug-for-FilterError"],[181,"impl-Display-for-TargetArchError"],[182,"impl-Debug-for-TargetArchError"],[312,"impl-Debug-for-CompilationError"],[313,"impl-Display-for-CompilationError"]]}],\
["seccompiler_bin",{"doc":"seccompiler-bin is a program that compiles multi-threaded …","t":"PPFPPSPPPPPPSGGSCNNNNNNHCHCNNNNNNNNNNHONNNOHHONCONNNNNNNNNNNSSSPPSSSSSSSSHSSSHSSFPPHPPPGPPPPPPPPPPPPPSSSSSSSSSSSGGGFFFIGGPPHSSOPOONNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONPSIOOGFFPPFPFSONNNNNNNNNNNNNNONOONNNNNNOONNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNSFCONNNNNNONNNNNCHH","n":["Arch","ArgParsing","Arguments","Bincode","Compilation","DEFAULT_OUTPUT_FILENAME","Error","FileOpen","InvalidArgumentValue","Json","MissingInputFile","MissingTargetArch","SECCOMPILER_VERSION","SeccompError","SeccompilerError","_DERIVE_Display_FOR_SeccompilerError","backend","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build_arg_parser","common","compile","compiler","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","get_argument_values","input_file","into","into","into","is_basic","main","main_exec","output_file","source","syscall_table","target_arch","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","ARG_NUMBER_MAX","AUDIT_ARCH_AARCH64","AUDIT_ARCH_X86_64","Allow","Arch","BPF_ABS","BPF_ALU","BPF_AND","BPF_JA","BPF_JEQ","BPF_JGE","BPF_JGT","BPF_JMP","BPF_JUMP","BPF_K","BPF_LD","BPF_RET","BPF_STMT","BPF_W","CONDITION_MAX_LEN","Comment","ConflictingRules","Dword","EXAMINE_SYSCALL","EmptyRulesVector","Eq","Errno","FilterError","FilterTooLarge","Ge","Gt","InvalidArgumentNumber","InvalidString","KillProcess","KillThread","Le","Log","Lt","MaskedEq","Ne","Qword","SECCOMP_DATA_ARGS_OFFSET","SECCOMP_DATA_ARG_SIZE","SECCOMP_DATA_NR_OFFSET","SECCOMP_RET_ALLOW","SECCOMP_RET_ERRNO","SECCOMP_RET_KILL_PROCESS","SECCOMP_RET_KILL_THREAD","SECCOMP_RET_LOG","SECCOMP_RET_MASK","SECCOMP_RET_TRACE","SECCOMP_RET_TRAP","SeccompAction","SeccompCmpArgLen","SeccompCmpOp","SeccompCondition","SeccompFilter","SeccompRule","SeccompRuleMap","TargetArch","TargetArchError","Trace","Trap","VALIDATE_ARCHITECTURE","_DERIVE_Display_FOR_FilterError","_DERIVE_Display_FOR_TargetArchError","_marker","aarch64","action","alloc","append_condition","append_syscall_chain","arg_len","arg_number","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","comment","conditions","default_action","deserialize","deserialize","deserialize","deserialize","deserialize","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","get_audit_value","into","into","into","into","into","into","into","into","into","into","into_bpf","into_eq_bpf","into_ge_bpf","into_gt_bpf","into_le_bpf","into_lt_bpf","into_masked_eq_bpf","into_ne_bpf","length","new","new","operator","root","rules","target_arch","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","validate","validate","value","value_segments","x86_64","BPF_MAX_LEN","BpfProgram","buf","len","CompilationError","Compiler","Filter","Filter","IdenticalActions","JsonFile","SyscallName","SyscallRule","_DERIVE_Display_FOR_CompilationError","arch","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","comment","compile_blob","conditions","default_action","deserialize","deserialize","deserialize","eq","eq","eq","filter","filter_action","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","into","into","into","into","into","make_basic_seccomp_filter","make_seccomp_filter","new","source","syscall","syscall_table","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","validate","validate","validate_filters","MAP_CAPACITY","SyscallTable","aarch64","arch","borrow","borrow_mut","fmt","from","get_syscall_nr","into","map","new","populate_map","try_from","try_into","type_id","x86_64","make_syscall_table","make_syscall_table"],"q":[[0,"seccompiler_bin"],[60,"seccompiler_bin::backend"],[282,"seccompiler_bin::common"],[286,"seccompiler_bin::compiler"],[366,"seccompiler_bin::syscall_table"],[383,"seccompiler_bin::syscall_table::aarch64"],[384,"seccompiler_bin::syscall_table::x86_64"],[385,"utils::arg_parser"],[386,"core::result"],[387,"core::fmt"],[388,"core::fmt"],[389,"core::option"],[390,"alloc::string"],[391,"core::any"],[392,"alloc::vec"],[393,"serde::de"],[394,"alloc::collections::btree::map"],[395,"std::collections::hash::map"]],"d":["","Argument Parsing Error: {0}","","","","","{0}","","{0} \\\\n\\\\nFor more information try –help.","","","","","","","","This module defines the data structures used for the …","","","","","","","","Module that defines common data structures used by both …","","Module defining the logic for compiling the deserialized …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Allows syscall.","{0:?}","","","","","","","","","Builds a <code>jump</code> BPF instruction.","","","","Builds a “statement” BPF instruction.","","","Dummy placeholder type for a JSON comment. Holds no value.","Syscall {0} has conflicting rules.","Argument value length is 4 bytes.","Builds a sequence of BPF instructions that are followed by …","The seccomp rules vector is empty.","Argument value is equal to the specified value.","Returns from syscall with specified error number.","Seccomp filter errors.","The seccomp filter contains too many BPF instructions.","Argument value is greater than or equal to the specified …","Argument value is greater than specified value.","The seccomp rule contains an invalid argument number.","Invalid target arch string: {0}","Kills calling process.","Kills calling thread.","Argument value is less than or equal to the specified …","Same as allow but logs call.","Argument value is less than specified value.","Masked bits of argument value are equal to masked bits of …","Argument value is not equal to specified value.","Argument value length is 8 bytes.","","","","","","","","","","","","Actions that <code>seccomp</code> can apply to process calling a …","Seccomp argument value length.","Comparison to perform when matching a condition.","Condition that syscall must match in order to satisfy a …","Filter containing rules assigned to syscall numbers.","Rule that <code>seccomp</code> attempts to match for a syscall.","Type that associates the syscall number to its …","Supported target architectures.","Errors related to target arch.","Notifies tracing process of the caller with respective …","Sends <code>SIGSYS</code> to the calling process.","Builds a sequence of BPF instructions that validate the …","","","","aarch64 arch","Action applied to calling process if rule gets matched.","","Appends a condition of the rule to an accumulator.","Appends a chain of rules to an accumulator, updating the …","Length of the argument value that is to be compared.","Index of the argument that is to be compared.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Optional empty value, represents a <code>comment</code> property in the …","Conditions of rule that need to match in order for the …","Default action to apply to syscall numbers that do not …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get the arch audit value.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Translates the <code>SeccompCondition</code> into BPF statements.","Translates the <code>eq</code> (equal) condition into BPF statements.","Translates the <code>ge</code> (greater than or equal) condition into …","Translates the <code>gt</code> (greater than) condition into BPF …","Translates the <code>le</code> (less than or equal) condition into BPF …","Translates the <code>lt</code> (less than) condition into BPF …","Translates the <code>masked_eq</code> (masked equal) condition into BPF …","Translates the <code>ne</code> (not equal) condition into BPF …","","Creates a new rule. Rules with 0 conditions always match.","Creates a new filter with a set of rules and a default …","Comparison to perform.","","Map of syscall numbers and corresponding rule chains.","Target architecture of the generated BPF filter.","","","","","","","","","","Get the string representation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Validates the SeccompCondition data","Performs semantic checks on the SeccompFilter.","The value that will be compared with the argument value.","Splits the <code>SeccompCondition</code> into 32 bit chunks and offsets.","x86_64 arch","The maximum seccomp-BPF program length allowed by the …","Program made up of a sequence of BPF instructions.","","","Errors compiling Filters into BPF.","Object responsible for compiling <code>Filter</code>s into <code>BpfProgram</code>s. …","Deserializable seccomp filter. Refers to one thread …","{0}","<code>filter_action</code> and <code>default_action</code> are equal.","Deserializable object that represents the Json filter file.","Invalid syscall name: {0} for given arch: {1:?}.","Deserializable object representing a syscall rule.","","Target architecture. Can be different from the current …","","","","","","","","","","","","","","","Optional empty value, represents a <code>comment</code> property in the …","Main compilation function.","Rule conditions.","Default action if no rules match. e.g. <code>Kill</code> for an …","","","","","","","The collection of <code>SyscallRule</code>s.","Default action if a rule matches. e.g. <code>Allow</code> for an …","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Transforms the deserialized <code>Filter</code> into a basic …","Transforms the deserialized <code>Filter</code> into a <code>SeccompFilter</code> …","Create a new <code>Compiler</code> instance, for the given target …","","Name of the syscall.","Target-specific syscall table.","","","","","","","","","","","","","","","","","","","Perform semantic checks after deserialization.","Perform semantic checks after deserialization.","Perform semantic checks after deserialization.","Number of syscalls for x86_64 (rough upper bound).","Creates and owns a mapping from the arch-specific syscall …","","","","","","Returns the argument unchanged.","Returns the arch-specific syscall number based on the …","Calls <code>U::from(self)</code>.","","Create new syscall table","Populates the arch-specific syscall map.","","","","","",""],"i":[4,9,0,4,4,0,9,4,9,4,4,4,0,0,0,0,0,4,2,9,4,2,9,0,0,0,0,2,4,4,2,9,9,4,4,2,9,0,2,4,2,9,2,0,0,2,4,0,2,4,9,4,2,9,4,2,9,4,2,9,0,0,0,29,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,28,0,25,27,29,0,25,27,27,25,10,29,29,27,29,27,27,27,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,29,0,0,0,43,20,24,43,24,30,21,21,26,25,20,10,27,28,21,29,24,30,26,25,20,10,27,28,21,29,24,30,26,20,27,28,21,29,24,30,26,20,27,28,21,29,24,30,21,24,30,26,27,28,21,29,26,25,20,10,27,28,21,29,24,30,26,25,25,20,10,10,27,28,21,29,24,30,26,25,20,10,27,28,21,29,24,30,20,26,25,20,10,27,28,21,29,24,30,21,21,21,21,21,21,21,21,43,24,30,21,43,30,30,26,20,27,28,21,29,24,30,25,20,10,26,25,20,10,27,28,21,29,24,30,26,25,20,10,27,28,21,29,24,30,26,25,20,10,27,28,21,29,24,30,21,30,21,21,20,0,0,44,44,0,0,0,39,39,0,39,0,0,38,39,40,36,37,38,39,40,36,37,38,36,37,36,37,36,38,36,37,40,36,37,39,36,37,37,37,39,39,40,36,37,38,39,39,40,36,37,38,39,40,36,37,38,38,38,38,39,36,38,36,37,39,39,40,36,37,38,39,40,36,37,38,39,40,36,37,38,36,37,38,0,0,0,41,41,41,41,41,41,41,41,41,41,41,41,41,0,0,0],"f":"`````````````````{ce{}{}}00000{{}b}`{d{{j{fh}}}}`{{dd}l}{{hn}A`}0{{dn}A`}{{Abn}A`}0{Adh}{cc{}}00{Af{{j{dh}}}}`999`{{}{{j{fAb}}}}0`{h{{Aj{Ah}}}}``{cAl{}}0{c{{j{e}}}{}{}}00000{cAn{}}00```````````````````````{{}{{Bf{`}}}}```````````````````````````````````````{Bh{{Bf{`}}}}``````{{Bj{Bf{{Bf{`}}}}BlBd}f}{{Bn{Bf{C`}}Bb{Bf{{Bf{`}}}}Bl}{{j{fCb}}}}``{ce{}{}}0000000000000000000{CdCd}{BhBh}{CfCf}{ChCh}{BjBj}{CjCj}{C`C`}{ClCl}{{ce}f{}{}}0000000```{c{{j{Cd}}}Cn}{c{{j{Cf}}}Cn}{c{{j{Ch}}}Cn}{c{{j{Bj}}}Cn}{c{{j{Cj}}}Cn}{{CdCd}l}{{CbCb}l}{{BhBh}l}{{AdAd}l}{{CfCf}l}{{ChCh}l}{{BjBj}l}{{CjCj}l}{{C`C`}l}{{ClCl}l}{{Cdn}A`}{{Cbn}A`}0{{Bhn}A`}{{Adn}A`}0{{Cfn}A`}{{Chn}A`}{{Bjn}A`}{{Cjn}A`}{{C`n}A`}{{Cln}A`}{cc{}}000000000{BhBb}{ce{}{}}000000000{{BjBd}{{Bf{`}}}}00000{{BjBdD`}{{Bf{`}}}}1`{{{Bf{Bj}}Cj}C`}{{{Db{Bn{Bf{C`}}}}CjDd}{{j{ClCb}}}}````44444444{cAl{}}{BhDd}1{c{{j{e}}}{}{}}0000000000000000000{cAn{}}000000000{Bj{{j{fCb}}}}{Cl{{j{fCb}}}}`{Bj{{Df{BbBbBdBd}}}}```````````````;;;;;;;;;;{DhDh}{DjDj}{{ce}f{}{}}0`{{Dl{Db{AlDj}}l}{{j{{Db{Al{Bf{`}}}}Dn}}}}``{c{{j{E`}}}Cn}{c{{j{Dh}}}Cn}{c{{j{Dj}}}Cn}{{DnDn}l}{{DhDh}l}{{DjDj}l}``{{Dnn}A`}0{{E`n}A`}{{Dhn}A`}{{Djn}A`}{{Dln}A`}{cc{}}{CbDn}1111{ce{}{}}0000{{DlDj}{{j{ClDn}}}}0{BhDl}{Dn{{Aj{Ah}}}}``33{cAl{}}{c{{j{e}}}{}{}}000000000{cAn{}}0000{Dh{{j{fDn}}}}{Dj{{j{fDn}}}}{{Dl{Db{AlDj}}}{{j{fDn}}}}````99{{Ebn}A`}<{{EbDd}{{Aj{Bn}}}};`{BhEb}{Ebf}887`{{{Ed{AlBn}}}f}0","c":[],"p":[[5,"ArgParser",385],[5,"Arguments",0],[1,"unit"],[6,"SeccompError",0],[6,"Result",386],[1,"bool"],[5,"Formatter",387],[8,"Result",387],[6,"SeccompilerError",0],[6,"TargetArchError",60],[5,"Arguments",385],[10,"Error",388],[6,"Option",389],[5,"String",390],[5,"TypeId",391],[1,"u16"],[1,"u32"],[1,"u8"],[5,"Vec",392],[6,"TargetArch",60],[5,"SeccompCondition",60],[1,"usize"],[1,"i64"],[5,"SeccompRule",60],[6,"FilterError",60],[5,"Comment",60],[6,"SeccompCmpOp",60],[6,"SeccompCmpArgLen",60],[6,"SeccompAction",60],[5,"SeccompFilter",60],[10,"Deserializer",393],[1,"u64"],[5,"BTreeMap",394],[1,"str"],[1,"tuple"],[5,"SyscallRule",286],[5,"Filter",286],[5,"Compiler",286],[6,"CompilationError",286],[5,"JsonFile",286],[5,"SyscallTable",366],[5,"HashMap",395],[8,"SeccompRuleMap",60],[8,"BpfProgram",282]],"b":[[28,"impl-Debug-for-SeccompError"],[29,"impl-Display-for-SeccompError"],[31,"impl-Debug-for-SeccompilerError"],[32,"impl-Display-for-SeccompilerError"],[189,"impl-Display-for-FilterError"],[190,"impl-Debug-for-FilterError"],[192,"impl-Debug-for-TargetArchError"],[193,"impl-Display-for-TargetArchError"],[322,"impl-Display-for-CompilationError"],[323,"impl-Debug-for-CompilationError"]]}],\
["snapshot",{"doc":"Provides version tolerant serialization and …","t":"SSRPGRPPPPPKFFRPSNNNNNNHONNNNNNNNNNNNHONNNNNCMMNNNONNNNNNNNNNNNORRKRMM","n":["BASE_MAGIC_ID","BASE_MAGIC_ID_MASK","ConstructorArgs","Crc64","Error","Error","InvalidDataVersion","InvalidFormatVersion","InvalidMagic","InvalidSnapshotSize","Io","Persist","Snapshot","SnapshotHdr","State","Versionize","_DERIVE_Display_FOR_Error","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build_magic_id","data_version","default","deserialize","eq","fmt","fmt","fmt","fmt","format_version_map","from","from","from","get_data_version","get_format_version","hdr","into","into","into","load","new","persist","restore","save","save","save_without_crc","serialize","target_version","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unchecked_load","version","version_map","ConstructorArgs","Error","Persist","State","restore","save"],"q":[[0,"snapshot"],[64,"snapshot::persist"],[70,"versionize::version_map"],[71,"versionize"],[72,"std::io"],[73,"core::fmt"],[74,"core::fmt"],[75,"core::fmt"],[76,"core::any"]],"d":["","","The type of the object holding the constructor arguments.","CRC64 validation failed: {0}","Error definitions for the Snapshot API.","The type of the error that can occur while constructing …","Invalid data version: {0}","Invalid format version: {0}","Magic value does not match arch: {0}","Snapshot file is smaller than CRC length.","An IO error occurred: {0}","An abstract interface for saving/restoring a component …","The <code>Snapshot</code> API manages serialization and deserialization …","","The type of the object representing the state of the …","A versioned serialization/deserialization error occurred: …","","","","","","","","","Snapshot data version (firecracker version).","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Fetches snapshot data version.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Attempts to load an existing snapshot and validate CRC.","Creates a new instance which can only be used to save a …","Defines an abstract interface for saving/restoring a …","Constructs a component from a specified state.","Returns the current state of the component.","Saves a snapshot and include a CRC64 checksum.","Save a snapshot with no CRC64 checksum included.","","","","","","","","","","","","","Attempts to load an existing snapshot without CRC …","","","The type of the object holding the constructor arguments.","The type of the error that can occur while constructing …","An abstract interface for saving/restoring a component …","The type of the object representing the state of the …","Constructs a component from a specified state.","Returns the current state of the component."],"i":[0,0,20,7,0,20,7,7,7,7,7,0,0,0,20,7,0,7,3,11,7,3,11,0,3,3,3,7,7,7,3,11,11,7,3,11,11,0,11,7,3,11,11,11,0,20,20,11,11,3,11,7,7,3,11,7,3,11,7,3,11,11,3,11,20,20,0,20,20,20],"f":"`````````````````{ce{}{}}00000{bd}`{{}f}{{chb}{{j{f}}}l}{{nn}A`}{{nAb}Ad}0{{fAb}Ad}{{AfAb}Ad}{{}h}{cc{}}00{{ch}{{Ah{bn}}}{lAj}}{d{{Ah{bn}}}}`;;;{{cAlh}{{Ah{{An{eb}}n}}}{lAj}{B`Aj}}{{hb}Af}`{{ce}{{Ah{{Bh{}{{Bb{e}}{Bd{c}}{Bf{g}}}}g}}}{}{}{}}{{{Bh{}{{Bb{c}}{Bd{e}}{Bf{g}}}}}c{}{}{}}{{Afce}{{Ah{Bjn}}}{BlAj}{B`Aj}}{{Afce}{{Ah{Bjn}}}Bl{B`Aj}}{{fchb}{{j{Bj}}}Bl}`{cBn{}}{c{{Ah{e}}}{}{}}00000{cC`{}}00{{ch}{{Ah{{An{eb}}n}}}{lAj}{B`Aj}}{{}b}`````98","c":[],"p":[[1,"u16"],[1,"u64"],[5,"SnapshotHdr",0],[5,"VersionMap",70],[8,"VersionizeResult",71],[10,"Read",72],[6,"Error",0],[1,"bool"],[5,"Formatter",73],[8,"Result",73],[5,"Snapshot",0],[6,"Result",74],[10,"Debug",73],[1,"usize"],[1,"tuple"],[10,"Versionize",71],[17,"State"],[17,"ConstructorArgs"],[17,"Error"],[10,"Persist",64],[1,"unit"],[10,"Write",72],[5,"String",75],[5,"TypeId",76]],"b":[[28,"impl-Debug-for-Error"],[29,"impl-Display-for-Error"]]}],\
["snapshot_editor",{"doc":"","t":"FGPPPPGSNNNNNNNNNNNNNNNNNONCNNNNNNNNNNNNNNNCNNNHHNNNNNNNNNNNNNNNCGGPPPPPPPPSNNNNNNNNNNHNNNNNNNNNNHNNNNNNNNNOOGGPPPPPSNNNNNNNNNNNNNNNNNNNHHHHHNNNNNNNNNNNNOOOPGPPPPSNNNNNNNNHHNNNN","n":["Cli","Command","EditMemory","EditMemory","InfoVmState","InfoVmstate","SnapEditorError","_DERIVE_Display_FOR_SnapEditorError","as_any","as_any","as_any","as_mut_any","as_mut_any","as_mut_any","augment_args","augment_args_for_update","augment_subcommands","augment_subcommands_for_update","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","command","command","command_for_update","edit_memory","fmt","fmt","fmt","fmt","from","from","from","from","from","from_arg_matches","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","group_id","has_subcommand","info","into","into","into","main","main_exec","source","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut","utils","EditMemoryError","EditMemorySubCommand","MetadataDiff","OpenDiffFile","OpenMemoryFile","Rebase","SeekDataDiff","SeekHoleDiff","SeekMemory","SendFile","_DERIVE_Display_FOR_EditMemoryError","as_any","as_any","as_mut_any","as_mut_any","augment_subcommands","augment_subcommands_for_update","borrow","borrow","borrow_mut","borrow_mut","edit_memory_command","fmt","fmt","fmt","from","from","from_arg_matches","from_arg_matches_mut","has_subcommand","into","into","rebase","to_string","try_from","try_from","try_into","try_into","type_id","type_id","update_from_arg_matches","update_from_arg_matches_mut","diff_path","memory_path","InfoVmStateError","InfoVmStateSubCommand","InvalidVersion","Utils","VcpuStates","Version","VmState","_DERIVE_Display_FOR_InfoVmStateError","as_any","as_any","as_mut_any","as_mut_any","augment_subcommands","augment_subcommands_for_update","borrow","borrow","borrow_mut","borrow_mut","fmt","fmt","fmt","from","from","from","from_arg_matches","from_arg_matches_mut","has_subcommand","info","info_vcpu_states","info_version","info_vmstate","info_vmstate_command","into","into","source","to_string","try_from","try_from","try_into","try_into","type_id","type_id","update_from_arg_matches","update_from_arg_matches_mut","vmstate_path","vmstate_path","vmstate_path","OutputFileOpen","UtilsError","VmStateFileMeta","VmStateFileOpen","VmStateLoad","VmStateSave","_DERIVE_Display_FOR_UtilsError","as_any","as_mut_any","borrow","borrow_mut","fmt","fmt","from","into","open_vmstate","save_vmstate","to_string","try_from","try_into","type_id"],"q":[[0,"snapshot_editor"],[65,"snapshot_editor::edit_memory"],[107,"snapshot_editor::edit_memory::EditMemorySubCommand"],[109,"snapshot_editor::info"],[153,"snapshot_editor::info::InfoVmStateSubCommand"],[156,"snapshot_editor::utils"],[177,"core::any"],[178,"clap_builder::builder::command"],[179,"core::fmt"],[180,"core::fmt"],[181,"clap_builder"],[182,"core::result"],[183,"clap_builder::util::id"],[184,"core::option"],[185,"core::error"],[186,"alloc::string"],[187,"core::any"],[188,"vmm::persist"],[189,"core::ops::function"]],"d":["","","Error during editing memory file: {0}","","Error during getting info from a vmstate file: {0}","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Failed to get metadata for diff file: {0}","Could not open diff file: {0}","Could not open memory file: {0}","Remove registers from vcpu states.","Failed to seek data in diff file: {0}","Failed to seek hole in diff file: {0}","Failed to seek in memory file: {0}","Failed to send the file: {0:?}","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Path to the diff file.","Path to the memory file.","","","Cannot translate snapshot data version {0} to Firecracker …","{0}","Print info about vcpu states.","Print snapshot version.","Print readable MicroVM state.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Path to the vmstate file.","Path to the vmstate file.","Path to the vmstate file.","Can not open output file: {0}","","Can not retrieve metadata for snapshot file: {0}","Can not open snapshot file: {0}","Can not load snapshot: {0}","Can not save snapshot: {0}","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,3,7,3,7,0,0,3,6,7,3,6,7,6,6,7,7,3,6,7,3,6,7,6,6,6,0,3,3,6,7,3,3,3,6,7,6,7,6,7,6,7,0,3,6,7,0,0,3,3,3,6,7,3,6,7,3,6,7,6,7,6,7,0,0,0,9,9,9,21,9,9,9,9,0,9,21,9,21,21,21,9,21,9,21,0,9,9,21,9,21,21,21,21,9,21,0,9,9,21,9,21,9,21,21,21,30,30,0,0,8,8,23,23,23,0,8,23,8,23,23,23,8,23,8,23,8,8,23,8,8,23,23,23,23,0,0,0,0,0,8,23,8,8,8,23,8,23,8,23,23,23,31,32,33,24,0,24,24,24,24,0,24,24,24,24,24,24,24,24,0,0,24,24,24,24],"f":"````````{cb{}}00000{dd}000{ce{}{}}00000{{}d}`0`{{fh}j}0{{lh}j}{{nh}j}{A`f}{cc{}}{Abf}11{Ad{{Ah{lAf}}}}{Ad{{Ah{nAf}}}}10{{}{{Al{Aj}}}}{AnB`}`;;;{{}{{Ah{Bbf}}}}0{f{{Al{Bd}}}}{cBf{}}{c{{Ah{e}}}{}{}}00000{cBh{}}00{{lAd}{{Ah{BbAf}}}}{{nAd}{{Ah{BbAf}}}}10````````````{cb{}}000{dd}0{ce{}{}}000{Bj{{Ah{BbAb}}}}{{Abh}j}0{{Bjh}j}{cc{}}0{Ad{{Ah{BjAf}}}}0?55{{BlBl}{{Ah{BbAb}}}}=<<<<;;{{BjAd}{{Ah{BbAf}}}}0``````````9999887777{{A`h}j}0{{Bnh}j}{C`A`}66{Ad{{Ah{BnAf}}}}0{AnB`}{{Blc}{{Ah{BbA`}}}{{Ch{CbCd}{{Cf{{Ah{BbA`}}}}}}}}{{CbCd}{{Ah{BbA`}}}}00{Bn{{Ah{BbA`}}}}??{A`{{Al{Bd}}}}{cBf{}}{c{{Ah{e}}}{}{}}000{cBh{}}0{{BnAd}{{Ah{BbAf}}}}0``````````{cb{}}0{ce{}{}}0{{C`h}j}0{cc{}}2{Bl{{Ah{{Cj{CbCd}}C`}}}}{{CbBlCd}{{Ah{BbC`}}}}9887","c":[],"p":[[10,"Any",177],[5,"Command",178],[6,"SnapEditorError",0],[5,"Formatter",179],[8,"Result",179],[5,"Cli",0],[6,"Command",0],[6,"InfoVmStateError",109],[6,"EditMemoryError",65],[5,"ArgMatches",180],[8,"Error",181],[6,"Result",182],[5,"Id",183],[6,"Option",184],[1,"str"],[1,"bool"],[1,"unit"],[10,"Error",185],[5,"String",186],[5,"TypeId",177],[6,"EditMemorySubCommand",65],[5,"PathBuf",187],[6,"InfoVmStateSubCommand",109],[6,"UtilsError",156],[5,"MicrovmState",188],[1,"u16"],[17,"Output"],[10,"Fn",189],[1,"tuple"],[15,"Rebase",107],[15,"Version",153],[15,"VcpuStates",153],[15,"VmState",153]],"b":[[28,"impl-Display-for-SnapEditorError"],[29,"impl-Debug-for-SnapEditorError"],[32,"impl-From%3CInfoVmStateError%3E-for-SnapEditorError"],[34,"impl-From%3CEditMemoryError%3E-for-SnapEditorError"],[87,"impl-Display-for-EditMemoryError"],[88,"impl-Debug-for-EditMemoryError"],[127,"impl-Debug-for-InfoVmStateError"],[128,"impl-Display-for-InfoVmStateError"],[167,"impl-Display-for-UtilsError"],[168,"impl-Debug-for-UtilsError"]]}],\
["utils",{"doc":"","t":"CCCCCCQHCHQQCCCCCQQCCCCCCCHCHSSFFFPPGPPSPPPPIPPSGSNONONONNNNNNNNNNNNNNNNNNNNNNNNONNNNONNNNNNNNNONNNNNNNNNNONNNNNNNONNNNNNNONONNNONNNNNNNNNNNNNNNNNNNNNONNNQQHHHHHHHHHHHHHHPGPTTTFFFTTPTTTTTNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPFPINNNNNNHNNNNNNNNNNNNSSSFNNNONNNNNNNNNNNRGKFPNNNNMNMNNNNNNNNNNNNNNNNNNNNNNNMMONNNNMNNNNNNNNNNSSSSSSSSSSSSSSSSSSSSHHHHHHHGPPPFPSNNNNNNNNNNNNNNNNNOHONNNONNNNNNNNNCCHSFNNONNNNNNNNNNNNNNNNNNNNNNHHHHKMMPPPPPPPGKPPHHPIIPHHHNNHHNNNNHNNMHHHNNNNHHIFNNNNNONNNNNNNKKMNNNNMMFNNNNNNNNNNFNNNNNNNNNNONNNNFNNNNNONNNNNNNONNNNKNNNNMGFPSSPPPFNNNNNNNNONNNNNNNNHHHONNNOOONOOHOHNNNNNNNNNNNOGPPSSSNNNNNNNNNNNH","n":["arg_parser","byte_order","epoll","errno","eventfd","fam","generate_fam_struct_impl","get_page_size","ioctl","ioctl_expr","ioctl_ioc_nr","ioctl_iow_nr","kernel_version","net","rand","seek_hole","signal","skip_if_io_uring_supported","skip_if_io_uring_unsupported","sm","sock_ctrl_msg","syscall","tempdir","tempfile","terminal","time","u64_to_usize","validators","wrap_usize_to_u32","ARG_PREFIX","ARG_SEPARATOR","ArgParser","Argument","Arguments","DuplicateArgument","Err","Error","Flag","ForbiddenArgument","HELP_ARG","MissingArgument","MissingValue","Multiple","Ok","Result","Single","UnexpectedArgument","VERSION_ARG","Value","_DERIVE_Display_FOR_Error","allow_multiple","allow_multiple","arg","args","arguments","arguments","as_flag","as_multiple","as_single_value","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","default_value","default_value","eq","eq","eq","extra_args","extra_args","flag_present","fmt","fmt","fmt","fmt","fmt","fmt","fmt","forbids","forbids","format_arguments","format_help","format_name","formatted_help","from","from","from","from","from","help","help","insert_arg","into","into","into","into","into","multiple_values","name","new","new","parse","parse_from_cmdline","parse_from_cmdline","populate_args","required","required","requires","requires","single_value","split_args","takes_value","takes_value","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","user_value","validate_arg","validate_requirements","value_of","generate_read_fn","generate_write_fn","read_be_u16","read_be_u32","read_le_i32","read_le_u16","read_le_u32","read_le_u32_from_i8","read_le_u64","write_be_u16","write_be_u32","write_le_i32","write_le_u16","write_le_u32","write_le_u32_to_i8","write_le_u64","Add","ControlOperation","Delete","EDGE_TRIGGERED","ERROR","EXCLUSIVE","Epoll","EpollEvent","EventSet","HANG_UP","IN","Modify","ONE_SHOT","OUT","PRIORITY","READ_HANG_UP","WAKE_UP","all","as_raw_fd","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","complement","contains","ctl","data","default","deref","difference","drop","empty","epoll_fd","eq","event_set","events","extend","fd","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_bits","from_bits_truncate","from_bits_unchecked","from_iter","hash","insert","intersection","intersects","into","into","into","into","is_all","is_empty","new","new","not","partial_cmp","remove","set","sub","sub_assign","symmetric_difference","to_owned","to_owned","toggle","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","union","wait","Err","Error","Ok","Result","borrow","borrow_mut","clone","clone_into","eq","errno","errno_result","fmt","fmt","from","from","into","last","new","to_owned","to_string","try_from","try_into","type_id","EFD_CLOEXEC","EFD_NONBLOCK","EFD_SEMAPHORE","EventFd","as_raw_fd","borrow","borrow_mut","eventfd","fmt","from","from_raw_fd","into","new","read","try_clone","try_from","try_into","type_id","write","Entry","Error","FamStruct","FamStructWrapper","SizeLimitExceeded","as_fam_struct_ptr","as_fam_struct_ref","as_mut_fam_struct","as_mut_fam_struct_ptr","as_mut_slice","as_mut_slice","as_slice","as_slice","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deserialize","eq","eq","fmt","fmt","fmt","from","from","from","from_entries","from_raw","into","into","into_raw","len","max_len","mem_allocator","new","push","retain","serialize","set_len","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","version","IOCSIZE_MASK","IOCSIZE_SHIFT","IOC_IN","IOC_INOUT","IOC_OUT","_IOC_DIRBITS","_IOC_DIRMASK","_IOC_DIRSHIFT","_IOC_NONE","_IOC_NRBITS","_IOC_NRMASK","_IOC_NRSHIFT","_IOC_READ","_IOC_SIZEBITS","_IOC_SIZEMASK","_IOC_SIZESHIFT","_IOC_TYPEBITS","_IOC_TYPEMASK","_IOC_TYPESHIFT","_IOC_WRITE","ioctl","ioctl_expr","ioctl_with_mut_ptr","ioctl_with_mut_ref","ioctl_with_ptr","ioctl_with_ref","ioctl_with_val","Error","InvalidFormat","InvalidInt","InvalidUtf8","KernelVersion","Uname","_DERIVE_Display_FOR_Error","borrow","borrow","borrow_mut","borrow_mut","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","get","into","into","major","min_kernel_version_for_io_uring","minor","new","parse","partial_cmp","patch","source","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","ipv4addr","mac","is_link_local_valid","MAC_ADDR_LEN","MacAddr","borrow","borrow_mut","bytes","clone","clone_into","default","deserialize","deserialize","eq","fmt","fmt","from","from","from_bytes_unchecked","from_str","get_bytes","into","serialize","serialize","to_owned","to_string","try_from","try_into","type_id","version","rand_alphanumerics","rand_bytes","timestamp_cycles","xor_pseudo_rng_u32","SeekHole","seek_data","seek_hole","BlockSignal","ClearCheckPending","ClearGetPending","ClearWaitPending","CompareBlockedSignals","CreateSigset","Err","Error","Killable","Ok","RetrieveSignalMask","SIGRTMAX","SIGRTMIN","SignalAlreadyBlocked","SignalHandler","SignalResult","UnblockSignal","__libc_current_sigrtmax","__libc_current_sigrtmin","block_signal","borrow","borrow_mut","clear_signal","create_sigset","eq","fmt","fmt","from","get_blocked_signals","into","kill","pthread_handle","register_signal_handler","sigrtmax","sigrtmin","to_string","try_from","try_into","type_id","unblock_signal","validate_signal_num","StateFn","StateMachine","borrow","borrow_mut","finish","fmt","from","function","into","new","next","run","try_from","try_into","type_id","IntoIovec","ScmSocket","as_ptr","recv_with_fd","recv_with_fds","send_with_fd","send_with_fds","size","socket_fd","SyscallReturnCode","borrow","borrow_mut","fmt","from","into","into_empty_result","into_result","try_from","try_into","type_id","TempDir","as_path","borrow","borrow_mut","drop","fmt","from","into","new","new_in","new_with_prefix","path","remove","try_from","try_into","type_id","TempFile","as_file","as_path","borrow","borrow_mut","drop","file","fmt","from","into","into_file","new","new_in","new_with_prefix","path","remove","try_from","try_into","type_id","Terminal","read_raw","set_canon_mode","set_non_block","set_raw_mode","tty_fd","ClockType","LocalTime","Monotonic","NANOS_PER_MILLISECOND","NANOS_PER_SECOND","ProcessCpu","Real","ThreadCpu","TimestampUs","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","cputime_us","default","fmt","fmt","fmt","fmt","from","from","from","get_time_ms","get_time_ns","get_time_us","hour","into","into","into","mday","min","mon","now","nsec","sec","seconds_to_nanoseconds","time_us","timestamp_cycles","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","year","Error","InvalidChar","InvalidLen","MAX_INSTANCE_ID_LEN","MIN_INSTANCE_ID_LEN","_DERIVE_Display_FOR_Error","borrow","borrow_mut","eq","fmt","fmt","from","into","to_string","try_from","try_into","type_id","validate_instance_id"],"q":[[0,"utils"],[29,"utils::arg_parser"],[154,"utils::byte_order"],[170,"utils::epoll"],[277,"utils::errno"],[300,"utils::eventfd"],[319,"utils::fam"],[372,"utils::ioctl"],[399,"utils::kernel_version"],[439,"utils::net"],[441,"utils::net::ipv4addr"],[442,"utils::net::mac"],[469,"utils::rand"],[473,"utils::seek_hole"],[476,"utils::signal"],[517,"utils::sm"],[532,"utils::sock_ctrl_msg"],[541,"utils::syscall"],[552,"utils::tempdir"],[568,"utils::tempfile"],[587,"utils::terminal"],[593,"utils::time"],[647,"utils::validators"],[665,"core::result"],[666,"core::num::wrapping"],[667,"alloc::string"],[668,"core::option"],[669,"alloc::vec"],[670,"core::fmt"],[671,"core::fmt"],[672,"core::cmp"],[673,"std::io::error"],[674,"core::iter::traits::collect"],[675,"core::fmt"],[676,"core::default"],[677,"core::cmp"],[678,"versionize::version_map"],[679,"versionize"],[680,"std::io"],[681,"versionize"],[682,"std::io"],[683,"core::num::error"],[684,"alloc::string"],[685,"core::net::ip_addr"],[686,"serde::de"],[687,"versionize"],[688,"std::ffi::os_str"],[689,"libc::unix::linux_like::linux::gnu::b64"],[690,"libc::unix"],[691,"core::ffi"],[692,"std::fs"],[693,"libc::unix"],[694,"core::cmp"],[695,"std::ffi::os_str"]],"d":["","","Safe wrappers over the <code>epoll</code> API.","Structures, helpers, and type definitions for working with …","Structure and wrapper functions for working with <code>eventfd</code>.","Trait and wrapper for working with C defined FAM …","Generate <code>FamStruct</code> implementation for structs with …","Return the default page size of the platform, in bytes.","Macros and functions for working with <code>ioctl</code>.","Function to calculate icotl number. Mimic of _IOC","Declare a function that returns an ioctl number.","Declare an ioctl that writes data.","","Network-related utilities","Miscellaneous functions related to getting (pseudo) random …","Traits and implementations over lseek64.","","","","","Wrapper for sending and receiving messages with file …","Wrapper for interpreting syscall exit codes.","Structure for handling temporary directories.","Struct for handling temporary files as well as any cleanup …","Trait for working with <code>termios</code>.","","Safely converts a u64 value to a usize value. This …","","Converts a usize into a wrapping u32.","","","Keep information about the argument parser.","Stores the characteristics of the <code>name</code> command line …","Stores the arguments of the parser.","The argument ‘{0}’ was provided more than once.","Contains the error value","Errors associated with parsing and validating arguments.","","Argument ‘{1}’ cannot be used together with argument …","","Argument ‘{0}’ required, but not found.","The argument ‘{0}’ requires a value, but none was …","","Contains the success value","","","Found argument ‘{0}’ which wasn’t expected, or isn’…","","Represents the type of argument, and the values it takes.","","If <code>allow_multiple</code> is true, then the user can provide …","","Add an argument with its associated <code>Argument</code> in <code>arguments</code>.","","Return a reference to <code>arguments</code> field.","","","","","","","","","","","","","","","","","","","","","","","","","Keep a default value which will be used if the user didn’…","","","","","Get the extra arguments (all arguments after <code>--</code>).","","Return whether an <code>arg_name</code> argument of type flag exists.","","","","","","","","Add <code>other_arg</code> as a forbidden parameter when <code>self</code> is …","","","","","Concatenate the <code>help</code> information of every possible argument","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Set the information that will be displayed for the …","","Add an argument with its associated <code>Argument</code> in <code>args</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return the value of an argument if the argument exists and …","","Create a new ArgParser instance.","Create a new <code>Argument</code> that keeps the necessary information …","Clear split between the actual arguments of the process, …","Parse the command line arguments.","Collect the command line arguments and the values provided …","Validate the arguments provided by user and their values. …","Set if the argument <em>must</em> be provided by user.","","Add <code>other_arg</code> as a required parameter when <code>self</code> is …","","Return the value of an argument if the argument exists and …","","If <code>takes_value</code> is true, then the user <em>must</em> provide a value …","","","","","","","","","","","","","","","","","","","","","","","","","","Get the value for the argument specified by <code>arg_name</code>.","","","","","","","","","","","","","","","","","Add a file descriptor to the interest list.","Wrapper over <code>EPOLL_CTL_*</code> operations that can be performed …","Remove a file descriptor from the interest list.","Sets the Edge Triggered behavior for the associated file …","Error condition happened on the associated file descriptor.","Sets an exclusive wake up mode for the epoll file …","Wrapper over epoll functionality.","Wrapper over ‘libc::epoll_event’.","The type of events we can monitor a file descriptor for.","Hang up happened on the associated file descriptor. Note …","The associated file descriptor is available for read …","Change the settings associated with a file descriptor that …","Sets the one-shot behavior for the associated file …","The associated file descriptor is available for write …","There is an exceptional condition on that file descriptor. …","This can be used to detect peer shutdown when using Edge …","The event is considered as being “processed” from the …","Returns the set containing all flags.","","Returns the intersection between the two sets of flags.","Disables all flags disabled in the set.","Returns the union of the two sets of flags.","Adds the set of flags.","Returns the raw value of the flags currently stored.","","Returns the left flags, but with all the right flags …","Toggles the set of flags.","","","","","","","","","","","","","","Returns the complement of this set of flags.","Returns <code>true</code> if all of the flags in <code>other</code> are contained …","Wrapper for <code>libc::epoll_ctl</code>.","Returns the <code>data</code> from the <code>libc::epoll_event</code>.","","","Returns the difference between the flags in <code>self</code> and <code>other</code>.","","Returns an empty set of flags.","","","Returns the <code>EventSet</code> corresponding to <code>epoll_event.events</code>.","Returns the <code>events</code> from ‘libc::epoll_event’.","","Converts the <code>libc::epoll_event</code> data to a RawFd.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from underlying bit representation, unless that …","Convert from underlying bit representation, dropping any …","Convert from underlying bit representation, preserving all …","","","Inserts the specified flags in-place.","Returns the intersection between the flags in <code>self</code> and …","Returns <code>true</code> if there are flags common to both <code>self</code> and …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> if all flags are currently set.","Returns <code>true</code> if no flags are currently stored.","Create a new epoll_event instance.","Create a new epoll file descriptor.","Returns the complement of this set of flags.","","Removes the specified flags in-place.","Inserts or removes the specified flags depending on the …","Returns the set difference of the two sets of flags.","Disables all flags enabled in the set.","Returns the symmetric difference between the flags in <code>self</code> …","","","Toggles the specified flags in-place.","","","","","","","","","","","","","Returns the union of between the flags in <code>self</code> and <code>other</code>.","Wrapper for <code>libc::epoll_wait</code>. Returns the number of file …","Contains the error value","Wrapper over <code>errno</code>.","Contains the success value","A specialized Result type for operations that can return …","","","","","","Returns the raw integer value (<code>errno</code>) corresponding to …","Returns the last <code>errno</code> as a <code>Result</code> that is always an error.","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Returns the last occurred <code>errno</code> wrapped in an <code>Error</code>.","Creates a new error from the given error number.","","","","","","","","","A safe wrapper around Linux <code>eventfd</code>.","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Create a new EventFd with an initial value.","Read a value from the eventfd.","Clone this EventFd.","","","","Add a value to the eventfd’s counter.","The type of the FAM entries","Errors associated with the <code>FamStructWrapper</code> struct.","Trait for accessing properties of C defined FAM structures.","A wrapper for <code>FamStruct</code>.","The max size has been exceeded","Get a pointer to the <code>FamStruct</code> instance.","Get a reference to the actual <code>FamStruct</code> instance.","Get a mut reference to the actual <code>FamStruct</code> instance.","Get a mutable pointer to the <code>FamStruct</code> instance.","Get the FAM entries as mut slice","Get the mutable elements slice.","Get the FAM entries as slice","Get the elements slice.","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Create a new FamStructWrapper from a slice of elements.","Create a new FamStructWrapper from the raw content …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consume the FamStructWrapper and return the raw content as …","Get the FAM length","Get max allowed FAM length","","Create a new FamStructWrapper with <code>num_elements</code> elements.","Append an element.","Retain only the elements specified by the predicate.","","Set the FAM length","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Run an <code>ioctl</code> with no arguments.","Function to calculate icotl number. Mimic of _IOC","Run an <code>ioctl</code> with a mutable raw pointer.","Run an <code>ioctl</code> with a mutable reference.","Run an <code>ioctl</code> with a raw pointer.","Run an <code>ioctl</code> with an immutable reference.","Run an <code>ioctl</code> with a single value argument.","","Invalid kernel version format","Invalid integer: {0}","Invalid utf-8: {0}","","Error calling uname: {0}","","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Provides IPv4 address utility methods.","Contains support for parsing and constructing MAC addresses","Checks if an IPv4 address is RFC 3927 compliant.","The number of tuples (the ones separated by “:”) …","Represents a MAC address Representation of a MAC address.","","","","","","","","","","","","Returns the argument unchanged.","","Create a <code>MacAddr</code> from a slice. Does not check whether …","Try to turn a <code>&amp;str</code> into a <code>MacAddr</code> object. The method will …","Return the underlying content of this <code>MacAddr</code> in bytes.","Calls <code>U::from(self)</code>.","","","","","","","","","Gets a pseudo random OsString of length <code>len</code> with …","Get a pseudo random vector of <code>len</code> bytes.","Gets an ever increasing u64 (at least for this process).","Generate pseudo random u32 numbers based on the current …","A trait for seeking to the next hole or non-hole position …","Seek to the first data in a file.","Seek to the first hole in a file.","The signal could not be blocked.","Failed to check if given signal is in the set of pending …","Failed to get pending signals.","Failed to wait for given signal.","Failed to check if the requested signal is in the blocked …","Couldn’t create a sigset.","Contains the error value","The error cases enumeration for signal handling.","Trait for threads that can be signalled via <code>pthread_kill</code>.","Contains the success value","The signal mask could not be retrieved.","Return the maximum (inclusive) real-time signal number.","Return the minimum (inclusive) real-time signal number.","The wrapped signal has already been blocked.","Public alias for a signal handler. <code>sigaction</code>.","A simplified Result type for operations that can return …","The signal could not be unblocked.","","","Mask a given signal.","","","Clear a pending signal.","Create a <code>sigset</code> with given signals.","","","","Returns the argument unchanged.","Retrieve the signal mask that is blocked of the current …","Calls <code>U::from(self)</code>.","Send a signal to this killable thread.","Cast this killable thread as <code>pthread_t</code>.","Register the signal handler of <code>signum</code>.","","","","","","","Unmask a given signal.","Verify that a signal number is valid.","Type representing a state handler of a <code>StateMachine&lt;T&gt;</code> …","Simple abstraction of a state machine.","","","Creates a new state wrapper that has no further …","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Creates a new state wrapper.","Creates a new state wrapper that has further possible …","Runs a state machine for <code>T</code> starting from the provided …","","","","Trait for types that can be converted into an <code>iovec</code> that …","Trait for file descriptors can send and receive socket …","Gets the base pointer of this <code>iovec</code>.","Receives data and potentially a file descriptor from the …","Receives data and file descriptors from the socket.","Sends the given data and file descriptor over the socket.","Sends the given data and file descriptors over the socket.","Gets the size in bytes of this <code>iovec</code>.","Gets the file descriptor of this socket.","Wrapper to interpret syscall exit codes and provide a …","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Returns the last OS error if value is -1 or Ok(()) …","Returns the last OS error if value is -1 or Ok(value) …","","","","Wrapper over a temporary directory.","Returns the path to the tempdir.","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Creates a new temporary directory with inside <code>$TMPDIR</code> if …","Creates a new temporary directory with inside <code>path</code>.","Creates a new temporary directory with <code>prefix</code>.","","Removes the temporary directory.","","","","Wrapper for working with temporary files.","Returns a reference to the File.","Returns the path to the file if the <code>TempFile</code> object that …","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Consumes the TempFile, returning the wrapped file.","Creates the TempFile.","Creates the TempFile inside a specific location.","Creates the TempFile using a prefix.","","Removes the temporary file.","","","","Trait for file descriptors that are TTYs, according to …","Read from a <code>Terminal</code>.","Set this terminal to canonical mode (<code>ICANON | ECHO | ISIG</code>).","Set this terminal to non-blocking mode.","Set this terminal to raw mode.","Get the file descriptor of the TTY.","Wrapper over <code>libc::clockid_t</code> to specify Linux Kernel clock …","Structure representing the date in local time with …","Equivalent to <code>libc::CLOCK_MONOTONIC</code>.","Constant to convert milliseconds to nanoseconds.","Constant to convert seconds to nanoseconds.","Equivalent to <code>libc::CLOCK_PROCESS_CPUTIME_ID</code>.","Equivalent to <code>libc::CLOCK_REALTIME</code>.","Equivalent to <code>libc::CLOCK_THREAD_CPUTIME_ID</code>.","Holds a micro-second resolution timestamp with both the …","","","","","","","","","Cpu time in microseconds.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a timestamp in milliseconds based on the provided …","Returns a timestamp in nanoseconds based on the provided …","Returns a timestamp in microseconds based on the provided …","Hours in current day, 24H format.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Days in current month.","Minutes in current hour.","Months in current year.","Returns the LocalTime structure for the calling moment.","Nanoseconds in current second.","Seconds in current minute.","Converts a timestamp in seconds to an equivalent one in …","Real time in microseconds.","Returns a timestamp in nanoseconds from a monotonic clock.","","","","","","","","","","","","Years passed since 1900 BC.","","Invalid char ({0}) at position {1}","Invalid len ({0});  the length must be between {1} and {2}","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Checks that the instance id only contains alphanumeric …"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,21,0,11,17,0,17,17,11,21,0,11,17,0,0,0,7,7,9,10,9,9,11,11,11,17,9,7,11,10,17,9,7,11,10,9,7,11,10,9,7,11,10,9,10,7,7,17,7,11,10,10,10,17,17,9,7,11,11,10,7,7,9,7,7,9,17,9,7,11,10,7,7,10,17,9,7,11,10,10,7,9,7,10,9,10,10,7,7,7,7,10,10,7,7,9,7,11,10,17,11,17,9,7,11,10,17,9,7,11,10,17,9,7,11,10,7,10,10,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,32,28,28,28,0,0,0,28,28,32,28,28,28,28,28,28,29,28,28,28,28,28,28,28,28,32,28,30,29,32,28,30,29,28,30,28,30,28,28,28,29,30,30,30,28,29,28,29,28,30,30,28,30,32,28,28,28,28,28,30,29,32,28,30,29,28,28,28,28,28,28,28,28,32,28,30,29,28,28,30,29,28,28,28,28,28,28,28,28,30,28,32,28,30,29,32,28,30,29,32,28,30,29,28,29,92,0,92,0,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,41,0,0,0,45,39,39,39,39,41,39,41,39,45,39,45,39,45,39,45,39,39,45,39,45,45,39,45,39,39,39,39,45,39,39,41,41,39,39,39,39,39,41,45,39,45,45,39,45,39,45,39,39,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,56,56,0,56,0,56,55,56,55,55,56,56,55,55,56,56,56,56,55,55,56,55,55,0,55,55,55,55,55,56,56,55,56,55,56,55,56,55,0,0,0,0,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,0,0,0,0,0,67,67,68,68,68,68,68,68,93,0,0,93,68,0,0,68,0,0,68,0,0,0,68,68,0,0,68,68,68,68,0,68,70,70,0,0,0,68,68,68,68,0,0,0,0,72,72,72,72,72,72,72,72,72,72,72,72,72,0,0,73,75,75,75,75,73,75,0,78,78,78,78,78,78,78,78,78,78,0,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,0,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,0,86,86,86,86,86,0,0,88,0,0,88,88,88,0,88,89,87,88,89,87,87,87,87,87,88,89,89,87,88,89,87,0,0,0,89,88,89,87,89,89,89,89,89,89,0,87,0,87,89,88,89,87,88,89,87,88,89,87,89,0,91,91,0,0,0,91,91,91,91,91,91,91,91,91,91,91,0],"f":"```````{{}{{f{bd}}}}`{{hhhh}j}````````````````{jb}`{b{{l{h}}}}`````````````````````{{nA`}n}`{{Abn}Ab}`{AbAd}`{AfA`}{Af{{Al{{Aj{Ah}}}}}}{Af{{Al{Ah}}}}{ce{}{}}000000000{AbAb}{nn}{AfAf}{AdAd}{{ce}An{}{}}000{{}Ab}{{}Ad}{{nB`}n}`{{BbBb}A`}{{nn}A`}{{AfAf}A`}{Ad{{Bd{Ah}}}}`{{AdB`}A`}{{BbBf}Bh}0{{AbBf}Bh}{{nBf}Bh}{{AfBf}Bh}0{{AdBf}Bh}{{n{Bd{B`}}}n}`{{AbA`}Ah}{{nb}Ah}{nAh}{AbAh}{cc{}}0000{{nB`}n}`{{Adn}An}{ce{}{}}0000{{AdB`}{{Al{{Aj{Ah}}}}}}`{{}Ab}{B`n}{{Ad{Aj{Ah}}}{{Bj{An}}}}{Ab{{Bj{An}}}}{Ad{{Bj{An}}}}2{{nA`}n}`9`{{AdB`}{{Al{Ah}}}}{{{Aj{Ah}}}{{Bl{{Aj{Ah}}{Aj{Ah}}}}}}2`9999{cAh{}}0{c{{f{e}}}{}{}}000000000{cBn{}}0000`{{AdB`}{{Bj{An}}}}9{{AdB`}{{Al{Af}}}}``{{{Aj{C`}}}Cb}{{{Aj{C`}}}h}{{{Aj{Cd}}}Cf}21{{{Aj{Cd}}}h}{{{Aj{C`}}}j}{{{Aj{C`}}Cb}An}{{{Aj{C`}}h}An}{{{Aj{Cd}}Cf}An}21{{{Aj{Cd}}h}An}{{{Aj{C`}}j}An}`````````````````{{}Ch}{CjCf}{{ChCh}Ch}{{ChCh}An}10{Chh}`21{ce{}{}}0000000{ChCh}{ClCl}{{ce}An{}{}}0{{ChCh}Cn}3{{ChCh}A`}{{CjD`CfCl}{{f{AnDb}}}}{Clj}{{}Cl}{Cl}<{CjAn}?`5{ClCh}{Clh}{{Chc}An{{Df{}{{Dd{Ch}}}}}}{ClCf}{{D`Bf}{{f{AnDh}}}}{{ChBf}{{f{AnDh}}}}0000{{ClBf}{{f{AnDh}}}}{{CjBf}{{f{AnDh}}}}{cc{}}000{h{{Al{Ch}}}}{hCh}0{cCh{{Df{}{{Dd{Ch}}}}}}{{Chc}AnDj}{{ChCh}An}{{ChCh}Ch}{{ChCh}A`}{ce{}{}}000{ChA`}0{{Chj}Cl}{{}{{f{CjDb}}}}{ChCh}{{ChCh}{{Al{Cn}}}}8{{ChChA`}An}898669{c{{f{e}}}{}{}}0000000{cBn{}}000:{{CjCf{Aj{Cl}}}{{f{bDb}}}}````99{dd}{{ce}An{}{}}{{dd}A`}{dCf}{{}{{f{cd}}}{}}{{dBf}{{f{AnDh}}}}0{Dbd}{cc{}}{ce{}{}}{{}d}{Cfd}2{cAh{}}>>=````{DlCf}44`{{DlBf}{{f{AnDh}}}}6{CfDl}6{Cf{{f{DlDb}}}}{Dl{{f{jDb}}}}{Dl{{f{DlDb}}}}{c{{f{e}}}{}{}}0{cBn{}}{{Dlj}{{f{AnDb}}}}`````{{{Dn{c}}}{}{E`Eb}}{{{Dn{c}}}c{E`Eb}}01{{{Eb{}{{Ed{c}}}}}{{Aj{c}}}{EfEh}}{{{Dn{c}}}Aj{E`Eb}}10{ce{}{}}000{EjEj}{{{Dn{c}}}{{Dn{c}}}{E`Eb}}{{ce}An{}{}}0{{cElCb}{{f{{Dn{e}}En}}}F`{E`EbFbFd}}{{EjEj}A`}{{{Dn{c}}{Dn{c}}}A`{E`EbEf}}{{EjBf}{{f{AnDh}}}}0{{{Dn{c}}Bf}{{f{AnDh}}}{FdE`Eb}}{cc{}}{{{Bd{c}}}{{Dn{c}}}{E`Eb}}1{Aj{{f{{Dn{c}}Ej}}}{E`Eb}}1;;{{{Dn{c}}}{{Bd{c}}}{E`Eb}}{{{Eb{}{{Ed{c}}}}}b{EfEh}}{{}b}`{b{{f{{Dn{c}}Ej}}}{E`Eb}}{{{Dn{c}}}{{f{AnEj}}}{E`Eb}}{{{Dn{c}}e}An{E`Eb}{{Fh{}{{Ff{A`}}}}}}{{{Dn{c}}eElCb}{{f{AnEn}}}{E`EbFbFd}Fj}{{{Eb{}{{Ed{c}}}}b}An{EfEh}}{ce{}{}}0{cAh{}}{c{{f{e}}}{}{}}000{cBn{}}0{{}Cb}````````````````````{{cj}CfFl}{{hhhh}j}1{{cje}CfFl{}}20{{cjj}CfFl}```````8888{{FnFn}A`}{{G`Bf}Bh}0{{FnBf}Bh}0{cc{}}{GbG`}{GdG`}{DbG`}3{{}{{f{FnG`}}}}{ce{}{}}0`{{}Fn}`{{CbCbCb}Fn}{Ah{{f{FnG`}}}}{{FnFn}{{Al{Cn}}}}`{G`{{Al{Gf}}}}{cAh{}}0{c{{f{e}}}{}{}}000{cBn{}}0``{GhA`}``99`{GjGj}{{ce}An{}{}}{{}Gj}{c{{f{Gj}}}Gl}{{cElCb}{{Gn{Gj}}}F`}{{GjGj}A`}{{GjBf}Bh}0{cc{}}{{{H`{C`}}}Gj}{{{Aj{C`}}}Gj}{B`{{f{Gjc}}}{}}{Gj{{Aj{C`}}}}{ce{}{}}{{Gjc}fHb}{{GjcElCb}{{Gn{An}}}Fj}2{cAh{}}{c{{f{e}}}{}{}}0{cBn{}}{{}Cb}{bHd}{b{{Bd{C`}}}}{{}j}{{}h}`{{Hfj}{{f{{Al{j}}Db}}}}0```````````{{}Cf}0``````{Cf{{f{AnHh}}}}==0{{{Aj{Cf}}}{{f{Hjd}}}}{{HhHh}A`}{{HhBf}{{f{AnDh}}}}0{cc{}}{{}{{f{{Bd{Cf}}Hh}}}}{ce{}{}}{{HlCf}{{f{And}}}}{Hlj}{Cf{{f{And}}}}{{}Hn}0{cAh{}}{c{{f{e}}}{}{}}0{cBn{}}=4``77{{}{{I`{c}}}Fd}{{{I`{c}}Bf}Bh{}};`9{Al{{I`{c}}}Fd}2{cAnFd}554``{IbId}{{If{Aj{C`}}}{{f{{Bl{b{Al{Ih}}}}d}}}}{{If{Aj{Ij}}{Aj{Cf}}}{{f{{Bl{bb}}d}}}}{{IfcCf}{{f{bd}}}Ib}{{If{Aj{c}}{Aj{Cf}}}{{f{bd}}}Ib}{Ibb}{IfCf}`{ce{}{}}0{{{Il{c}}Bf}{{f{AnDh}}}{Fd{In{Cd}}J`}}{cc{}}2{{{Il{c}}}{{f{AnDb}}}{{In{Cd}}J`}}{{{Il{c}}}{{f{cDb}}}{{In{Cd}}J`}}{c{{f{e}}}{}{}}0{cBn{}}`{JbJd}77{JbAn}{{JbBf}{{f{AnDh}}}}79{{}{{f{Jbd}}}}{Jd{{f{Jbd}}}}{c{{f{Jbd}}}{{Jh{Jf}}}}`{Jb{{f{And}}}}887`{JjIh}{JjJd}??{JjAn}`{{JjBf}{{f{AnDh}}}}?{ce{}{}}4{{}{{f{Jjd}}}}{Jd{{f{Jjd}}}}{c{{f{Jjd}}}{{Jh{Jf}}}}`{Jj{{f{And}}}}{c{{f{e}}}{}{}}0{cBn{}}`{{Jl{Aj{C`}}}{{f{bd}}}}{Jl{{f{And}}}}{{JlA`}{{f{And}}}}1{JlCf}`````````::::::{JnJn}{{ce}An{}{}}`{{}Jn}{{K`Bf}Bh}{{KbBf}Bh}0{{JnBf}Bh}{cc{}}00{K`j}00`{ce{}{}}00```{{}Kb}``{Kd{{Al{Kd}}}}`{{}j}3{cAh{}}{c{{f{e}}}{}{}}00000{cBn{}}00```````66{{KfKf}A`}{{KfBf}Bh}0:84332{B`{{f{AnKf}}}}","c":[],"p":[[1,"usize"],[5,"Error",277],[6,"Result",665],[1,"u32"],[1,"u64"],[5,"Wrapping",666],[5,"Argument",29],[1,"bool"],[5,"ArgParser",29],[5,"Arguments",29],[6,"Value",29],[5,"String",667],[1,"slice"],[6,"Option",668],[1,"unit"],[1,"str"],[6,"Error",29],[5,"Vec",669],[5,"Formatter",670],[8,"Result",670],[8,"Result",29],[1,"tuple"],[5,"TypeId",671],[1,"u8"],[1,"u16"],[1,"i8"],[1,"i32"],[5,"EventSet",170],[5,"Epoll",170],[5,"EpollEvent",170],[6,"Ordering",672],[6,"ControlOperation",170],[5,"Error",673],[17,"Item"],[10,"IntoIterator",674],[5,"Error",670],[10,"Hasher",675],[5,"EventFd",300],[5,"FamStructWrapper",319],[10,"Default",676],[10,"FamStruct",319],[17,"Entry"],[10,"PartialEq",672],[10,"Copy",677],[6,"Error",319],[5,"VersionMap",678],[6,"VersionizeError",679],[10,"Read",680],[10,"Versionize",679],[10,"Debug",670],[17,"Output"],[10,"FnMut",681],[10,"Write",680],[10,"AsRawFd",682],[5,"KernelVersion",399],[6,"Error",399],[5,"ParseIntError",683],[5,"FromUtf8Error",667],[10,"Error",684],[5,"Ipv4Addr",685],[5,"MacAddr",442],[10,"Deserializer",686],[8,"VersionizeResult",679],[1,"array"],[10,"Serializer",687],[5,"OsString",688],[10,"SeekHole",473],[6,"Error",476],[5,"sigset_t",689],[10,"Killable",476],[8,"c_int",690],[5,"StateMachine",517],[10,"IntoIovec",532],[6,"c_void",691],[10,"ScmSocket",532],[5,"File",692],[5,"iovec",690],[5,"SyscallReturnCode",541],[10,"From",693],[10,"Eq",672],[5,"TempDir",552],[5,"Path",694],[5,"OsStr",688],[10,"AsRef",693],[5,"TempFile",568],[10,"Terminal",587],[5,"TimestampUs",593],[6,"ClockType",593],[5,"LocalTime",593],[1,"i64"],[6,"Error",647],[8,"Result",277],[8,"SignalResult",476]],"b":[[87,"impl-Debug-for-Error"],[88,"impl-Display-for-Error"],[91,"impl-Debug-for-Value"],[92,"impl-Display-for-Value"],[226,"impl-Binary-for-EventSet"],[227,"impl-Debug-for-EventSet"],[228,"impl-LowerHex-for-EventSet"],[229,"impl-Octal-for-EventSet"],[230,"impl-UpperHex-for-EventSet"],[288,"impl-Debug-for-Error"],[289,"impl-Display-for-Error"],[343,"impl-Debug-for-Error"],[344,"impl-Display-for-Error"],[411,"impl-Display-for-Error"],[412,"impl-Debug-for-Error"],[413,"impl-Display-for-KernelVersion"],[414,"impl-Debug-for-KernelVersion"],[416,"impl-From%3CParseIntError%3E-for-Error"],[417,"impl-From%3CFromUtf8Error%3E-for-Error"],[418,"impl-From%3CError%3E-for-Error"],[450,"impl-Deserialize%3C\'de%3E-for-MacAddr"],[451,"impl-Versionize-for-MacAddr"],[453,"impl-Display-for-MacAddr"],[454,"impl-Debug-for-MacAddr"],[461,"impl-Serialize-for-MacAddr"],[462,"impl-Versionize-for-MacAddr"],[501,"impl-Debug-for-Error"],[502,"impl-Display-for-Error"],[613,"impl-Display-for-LocalTime"],[614,"impl-Debug-for-LocalTime"],[656,"impl-Display-for-Error"],[657,"impl-Debug-for-Error"]]}],\
["vmm",{"doc":"Virtual Machine Monitor that leverages the Linux …","t":"PPPPIPPGFPIGPSPPPPPPSPPPPPPPPPPPGPPPEEPPEPPEPPPPEPPPEPFGPPPSSSSCCNNNNNNNNNNNNNONNNNNNNNNNNNCQNNCCCNCNNONONNNNNNNNNNNNNNNNNNNNNNNNONNONNNNNNCNCHCONCONCCNCNNCNNNOCNNNNNONNNNNNNNNNNNNNNNNNNNNNNONNNNNNCOONCOCCPEEGEEFEESPOENNNNNNNNNNENNNNNNNENENNNONNNNNNNNNCGPSSSSSPSSSPPSHHNNNNHCNNNNNCHHCNCCCCNNNNNFNNNNNNOOONNNNNNONONNNHHHHHHHHHHHHSSSSPGPSNNNNNNNNHNHHHNNNNSSSSSSSSSSPSSSSPSSSSSSSGPSPPPPPPPPPSNNNNQHHNNNNNHHNNNNSSFTTTTTTPPTTPTTSSSSSSSSSSQGFTTTTTTJTTPPTTJJSNNNNNNNONNNNNNNNNNNNNNNNNHNNNNNNNNNNNNNNNNNNNNNNNHHNNNNNNNNNNNHHHONNNHNNNNNNNNNNNNNNNNSSSPSSPPSSSGPPPPFPFGPPPPPSSSSSNNNNNNNNNNNNNNNNHNNNNNNNNNNNNNNNNNNNNNNHHHHNNNNNNNNNNNNNNNNHHCCCCCCSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOONNNNNNNNNNNNNNNNOONNNNNNNNOOOONNNNNNNNOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOISSSISSSSOFFFFFFFFOOOOOOOOOOOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNOOOOONNNNNNNNSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSPGPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPGPPPPSSNNNNHHHHHHHNNNNHHHHHHNNNNNNNNNNNNNNNNNNNNNNHHHHHHNNNNNNNNNNCCCPTEGPPEKGPEPPGKFPPESNNNNNNNNNMNNNNNNNNNNNNNNCNNNNNNNNONNNNNNNNNMNQNNNNMNNNENNNNNNNNNNNNNNNNONMEEEEEQHHHFGPPPPSNNNNNNNNNNNCOCNNNNNNNNNOCCNNNNNNNNPPESPPGFFFKGTPPPGPGPPPEFFPPGPTTTPPPSSSSPSCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCHHNNNNNNNOOOONNNNNNNONNNNNNNNNNNNNNNNNMNMNNHNNCNNNNNNNNNNOCNNNONNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFPPPTPPGPGPGPPPPPPGPPPPPPNNNNNNNNNNNNNCNNNNNNNNNNNNNPPPPPPGPGPGPPPPPPPGPPPPPGPSSSSSNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNGPPSNNNNNNNNHHNHNNNNPPGPFPPPPPPPGNNNNNNNNNNNNNCNNNNNNNNNNPSSGPGPPPPPPPPPPGPSSSNNNNNNNNNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPFPPPGPGPGPGPPPPPPPPPGPPPPPGSSSSSSNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHNNNNNNNHHHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFGFFPPPPFONNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNONNNNNNNNHHNNNNNONNNNNNNNNNNNNNNNNNNNOOOONONNNNNHONNNNNNNNNNNNNNNNNNNNNNNPPGPPPPNNNNCNNNNNNNNNNNNNNNCCCCNNNNNNHHHHHSSHCCCPTTPTTTGFTTSNNNNNNNNOONNNNNNNONNOONNONNNNNNNPPPPPPPFFSGPPSNOONNNNNNNNNNNNNONNNNNNNNNNNNNNNONNNOONONNNNNNNNNNNNNNNNNNNNNPPFFFFFFPGFPPFPGPPPGPPPPPPPPPSNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOONONNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNOOONNNNNNNNNNNNNNNNNNOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOEEEGPPPPPPPSNNNNCNNNNCCHNNNNCPFGGFPPPPSNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFGEEPPPEEENNONNOOOONHNNNCNONOOCONNNNNSSSSSSSSFFGPSSSPPJSSSSSSNNNNNNONNNNNNOONNNOOONNNNNNNNNNNOOONNONNOOONONNNNNNNNNNNNNOSSJGKPIFFGFPPSNNNNNNNNNNNNNNNNNNNNNONNNNONONNNNNNNNNNNNNNOONNNNNHOONNNMONOONNNNNNNNNNNNNNNNNNNNOFCOFSNNNNNNNNNNONNNGKPPSSSSSPSMNMNCCNNCCNNNCNCCCCCCNNNNCCCCCPPSSSSEEGESPPPPSPSSSPPPPPPPPPGSPPPPSSSSSSSSSSSSSSSNNNNNNNNCCNNNNNNNNCCHNNNNNNNNCFFFFFSSNONOOOOONNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNONNNNNOONONNNNNNNNONNNNNOONNNNNNNNNONNOOHONNOHONNNNNNNNNNNONONNNNNONNNNNNNONNOOOOOOOONNNNONNNNNNNNNNNNNNNNNNNNONFJONNNNOOHNNONNNOONNNFFFFONNNNNNNNONNNNNNNNNNNNNNONNNNONNNNONNNNNOONNNNOOOOONNNOOOONNNONNNNNNNNNNNNNNNOHHGPPNNNNNNNNNNNNNNNNNNNNPPGPFGKPNMMNNNNNNMNNNNNNNMNNNNNNNNMMNNNOOMNNNMMMMNMNNNNNNNNNNMSSSSSSCCCCSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSIIINNNNNNOONNONNOOONONNNNFSSSSSSSSSPFFGIPPSNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNOONNNNNNNNNNNNNOONNSSFSSSONNNNNNNNONOOONNONONONONNNNNNNNNNPPPPSSSEGGPSPPPSFGPPPPPSNNNNNNNNCCNNNNNCONNCCCONNNNNNNPFPPSGPFPSNONONNNNNNNONNNNNNNNONNONNNNNNNHHHNNNNOONNONNHNNNNNONONONNNNNNNNNNNNNNONONNNNNNNNNNNOOONONNNONNNNNNNNONONNNHNNNNNCCCSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSIIINNNNNNNNNNNNONNNNONNNNNNOOOOFFNNNNNNNNSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSIINNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOFOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNOOOONNNNNNNNNNNNNNNNNNOFFFOONNNNNNNNNNNNNNNNFUOOFUOOFOOFUUOOOOOOOOOOOOOOOONNNNNNNNNNNNNNNNOOOOOOOOOOISSSSSSSSSSSSSSSSSSSOOOFOOIOOFOFOOOFONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSJFFONNNNNNNNNNONOHNNNNNNOOOOOOOOOOOOONOONNNNOOOOOOOOOONNPPFFGFPPSNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNOOONNNNOOOONNNONNNNNNNNNNNONNNNNNOSFPPPPPHHHSFGSNNNNNNNNNNNNNNNHNNNNNNNNNNNNNONNNNNNNNNONNNNNNNNNNNNNPFFGFFSOOONNNNNNNNNNOONNNNNNNNNNNNNNNNNONNONNNOOONNNONNNNNNNNNNNNOONNNNNOOOOOOOOONNNONNNNNNNNNNNNNNNNNNNONNNPFFFSFGPSSSNNOONNNNNNNNNNNONNNNNNNNNNNNNNNNOONNNOONNNNNNNNNNNNNONNNNNNNNNNNNNOOOONNOOONOONNNOONNNONNNNNNNNNNNNNNNONNNNNNNOOEESSCCCCSFGPPPSNONNONNNNNONNNNONNNNNNNNNNNNNNNNONNNNNNNNNNONONNNNONNNNNNNNNNNNNNNNNNNNFJONNNNOOOOHNNONNONNNNPFGFPPSNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNOPPPPGPPIKFPPPPPPPPPPPSNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNOOPPPSPSPPGSNNNNCCNNNNCNNNNSSIFFNOONOONNNNNOONNNNOOONOONOONONNNNNOONNNNNOONOOONOOONNNNNOONOONNOONNNOONNONNNNNNNOOOONFFNNNNNNNNONNONNNNNONNOOONONNNNNNNNOOJFFOONNNNNNNNNOONHNNNONNONNNNNNNSSSPEPPPPPPPSPPPPPSSPPEGSNNNNCCNNNNCCCCNNNNPFGPFFNONONNNNNNNNNNONNNNNNNNNNOONNNONNNONONONNNONOONNNNNNNNNNOONNNNNNNONOOONONNONOOONNNNNNNNNNONONOONONNNONNNNNNNNNNNNNNNNNNQNNNNNPPEEGPGGPPPPEEPFFSNNNNNNNNNNCNNNNNNNNNNONNNNNONNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNOONFGPPPPPPFSONNNNNNNNNNNNNONNNONNNNNNNNNNNNNNNNONNNNONNNNNNNNNNNOPPPFGPSNNNNNNNNONNNNNNNNNNNNNNNNNNNFFJONNNNNNNNNNONOOOHNNNNNNOOOOOOOOONNNNNNNOOOOPGPFFNNNNNNNNNNNNONNNNNNNNONONNNNNNNONNNOOOONNNNNNNNNNNNNNNOPPFPPPPGPPPPFGFFGGPPPPEEEEEEEEONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOONOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNOOOOONNNNNNNNNNNNNNNNNNNOONNNNNNNNNOOOOOOPPPPPPPPPPPPSPPPPPPPSPFKKKGPFGSOONNOONNOOOCCCOOCNNNNMMOONOOOOOCMCCOOMOMNNNNCGPPPPPPPGFPPPPPPPEEGSNNNNNNNNNNNNNNNNNNNNCNOCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNFKNNNNNNNNONNONNNNNNOOONNNNNOOONOONONNNNOONNONNSSSSTFNNNNONNNONNNNNONNNNSSSSCSSSSSSSSSSSSSSSSSSSFNONONNNONONNNOONNNNNNNNNNNNONNNNNNNONONNNNNNNNNNNNNNJFONNNNOOOOOOHNNNOONOOOOONNNOOOOOONPPSFGFNNNNNNNNNNNNNONONNNNNONONONNNNNNNNNONONNNNONONNNNNNNNNNNNNONONNNNNNNNONNNNPGFFFFFNNNNNNNNNNNNOONNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNONNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOPPPIPPPPPEGSNNNNCONNNONOOOCCCOOOOOOOONNNONSSSFPPGPPGPFNNNNNNNNNNNNNNNNNNNNNNNONNNNONONNNNNNNNNNNNNNNONONNNNNOOOOONNONNNNNONNNNNNNNNNNNNNNNNOOOOFFTNNNNNNNNNNNNNNNNNNNNOONNNOONNNNNNNFTNNNNNNNNNNNNNNNNOONNNKEEEEEEEEEEEMCMCGFPPCNNNNNNNNCNNHNCNNNNNNNONNNCNCNNNNNNNCNNNNSSSSGFSPSSPSSSSPSPSPSPSNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNNFKKNNNNONNNNNNNNNNOMNNNNSSSSGFSSPSNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNPSSSGSSPSSFPSSSSSPPSSSPSNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNTSSTPSSTPGTSFPSSPPSSSSSTTSSTPFTSSSNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNSPSPGSSSPSSFSNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPSSGPGPPNNNNNNNNNNCCNNNNNNCNNNNHHNNNNNNNPTFFPPTTPTTTTTTTPPPPGPPITTTGFTTTPPTGSSSONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNONNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNHNNNNNONONNHNONNONNNNNNNOONOOOONNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNSSSFSNNNNHNOONNONNNONNNHOONOOONNNNFPPPPPPPPPPPPPGGGFPPPPGGSSONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONONONONNNONOONONNNNNNNNNNNNNNNNNNNNNNNNNNNNPGPPPPSPFGPPPPSPPPPPGPPPPPPSNNNNCNNNNNNONNONNNNNNNNNNOCNNCNCNNNOCONNNNNNNNNSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSFOOOOOOOIOIIIIIIIIIIOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOONNNNNNNNNNNNNNNNNONNNNNNOOOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNOOONNNNNNNNNNNNNNNNNFFFFFFFFUFUUUUFUOONONONOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOONOOOOOOOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOFIPGFPPONNNNNNNNNNCNOONNNNNNNNOOONOCNNNNNNNNOONFNNNNNNNNNNONNNNNOFNNNNNNNNNNNNSIOCCCGFPPSNNNNNNNNNOOONNNNNNNNONNNNONONNNNNNNOPGPSNNNNNNNNHNNNNPPGFPPSNNNNNNNNONNNNNNNNNONNONNNNOONONONONNNNNNOPPGNNNNNNNNNNPSSSPPPPIJKPPJGGFFIFJGPPFPFFKPPPPPMNNNNNNNNMQNNNQMMNNNNNQONNOHQOCNCOONNNOOOOMNNNQNNNHQSSPPJPJGFFFFFFIFPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNONNNNNNNNNNNNNNNNNNONOOONNOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNPFFFFFFFKFFFFJFGFFPFFFFFPFFFFKFFFFPSOOMNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOMNOOQNNNNNNNNNNNNNNNNNNNNNNNNOOONOOOOOONOOOOOOOOOOMNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOONNNNNNNNNNNNNNNNNNNNOOOOOOOONNNOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOMNOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOONGPPPPPPSNNNNHHCNNNNHCCHHHHHHNCCNNNPGPPFGPPGPPPPSNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNONNNNNNNNNNNNNPSSSSSPPPFPPGPGSSNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONOONNONONNNNNONNNNNNNNNNNNNNFNNNNNNNNNNOOOONONNNNNSPGPSPPSSSSSSSPSSFFPSONNNNNNNNNNNNNNNNONNNNNNONNNNNNNNNNNNNNNONNOONNNONNNNNNNNNNSFTTNNNNNNNNNNNNNNNNONOPPPGPSPPPPGGFPPPPPPPPPPFPGPPPPPPPGGPPPPPPPGPPGPPPPFSSSSSSSSNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNOHNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHNNNNNNNNNNNOOOHNNNNOOHHHHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHONNOOGGPPGPSPPPSFPPSFGPSNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNHNONNNNNNNONNNNONOCOONONNNNNOOONNNNNNNNNNNNNNNNNNNNNNFFNNNNONNNNONNNNNNONNNNNNOOONNONNNNNNNNNNPPPPPPPPPPPGPFFPSNNNNNNOOOOOONNONNNNNNNNNONNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOONONOOONNNNNNNNNNNNNNNNNNNNNNNNOOOIIPPPPGPPPPPPPPPPPPPPPPPPPPPPPPGPPPPPPPPPKPPPPPPPFPPPPPPPFPPPPPPPPPPPPGGGPPSSSNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNONNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNMNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOHSSHHQHHHHHHHHHHCCCFNNNNNNNNNNNNNNSSFFFSNNNNNNNNNNNNNNNNNNNNNQNNNHNNNNNNNNNNNNNNNNNNHHHHHSSSSSSSSSSSFFOONNNNNNNNNNNNNNNNNNNNFFFNNNNNNCOOCNNNNNNNNNNNNNNCCNNNNNNNNNNNHCNNNNCCCCOHOOONNOCNNNNNNNNNNNNCEFGFEFFPPPPIPPPSOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNONNNNNNOONNNNNOONNNNNNNNNNNNNNNNNNNFFFGSPPPSNNNNNNNNONNNNNNNNONNOONNNNNNNNNNNNNNNOONNNNOONNNNNNNNNNNNNNNNNNFFGFPPPPGEPPPPSNNNNNNNNNNNNNNNNNNNNNNONNNNNNOOONNONNNNNNNNNNNNNNNNNNNNNOONOOOOONONNNNNNNNNNNNNNNNPPFFGSNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNFPPPGONNNNNNNNNNNNNNNNNNNNNONNNNONNNNNNNNNOSPPPPSFFFGSNNNNNNNNNNNNNNNNNNNNNNOOONNNNHHNNNNNNNNNNNNNNNNNNNNNNOOONNNOOONNNNNOOONNNNNNNNNNNNNOOOPFGSNNNNNNNNNNNNNNNNNHNNONNNNNNNNNPPPFGPSNNNNNNNNNNNNNNNNNNNNONONNNNNNNNNNOPPPPFFGFPSNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOONNNNNNONOONNNNNNNNNNNNOONNNNFPPPFFFGPPGPFFGNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOONNNOOOONNNNOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPIFFGFSONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNOONNNNNNNNNNNNNNNNOOOOCCCKFRIKKKKPPRPFFKKIKFFIIIRPPGFFFPPRPPSOOCNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNMNOOONNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNMNNMNNNNNNNNNNNNHNNNNMNNNMNNMNMNNNNNNNONNOOOMNOOONNNNNNNNNNNNNNNNNNNNNMNMNNMNNNNNNNOOOONNNNNNNNNNNNNMNNMNNMONOMMNNNMNNNNNNNMOMNNMNNNOOONNNOOOOMNNMMNMNMNOONNNNNNOOOOOMNNOMMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNMNNNNMNNNNNNNNNMNMMNNMMNKKRMNMMNMNMMMMNNMNPPPPPPPPEPPPPPPPPFPTPSFIFPGGGFGPFPPPSNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNOOONONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNOOONNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOCPPPPPFFGGPPPPPPFPPPPSSPPPPPPPPPPPPPPPPPPPPPPPPPFPSSNNNNNNNNNNNNNNNNNNNNNNNNNNNONONNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNOOOOONOONNNONNNNNNONNNNNNNNNNNNNNNNNONNNNNNONOOPPTPPPGPPPPPPFGPPPPPPPPPFSSNNNNNNNNNNNNNNNNNONNNNNNNONNNNNNNNNNNNNNNOOOONNONOOONNNNNNNONNNNNNNNNNNNNNN","n":["ArgParsing","BadConfiguration","BadSyscall","DeviceManager","DirtyBitmap","DirtyBitmap","DumpCpuConfig","DumpCpuConfigError","EmulateSerialInitError","EventFd","EventManager","FcExitCode","GenericError","HTTP_MAX_PAYLOAD_SIZE","I8042Error","KernelFile","LegacyIOBus","Metrics","NotAllowed","Ok","RECV_TIMEOUT_SEC","RegisterMMIODevice","SIGBUS","SIGHUP","SIGILL","SIGPIPE","SIGSEGV","SIGXCPU","SIGXFSZ","SeccompFilters","SendEvent","Serial","StartVcpusError","TimerFd","UnexpectedError","UnexpectedResponse","Vcpu","VcpuConfig","VcpuConfigure","VcpuCreate","VcpuEvent","VcpuEvent","VcpuExit","VcpuHandle","VcpuHandle","VcpuHandle","VcpuMessage","VcpuPause","VcpuResponse","VcpuResume","VcpuSpawn","VcpuStart","Vm","Vm","Vmm","VmmError","VmmObserverInit","VmmObserverInit","VmmObserverTeardown","_DERIVE_Display_FOR_DumpCpuConfigError","_DERIVE_Display_FOR_EmulateSerialInitError","_DERIVE_Display_FOR_StartVcpusError","_DERIVE_Display_FOR_VmmError","arch","arch_gen","as_any","as_any","as_any","as_any","as_any","as_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","balloon_config","base","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","builder","check_metric_after_block","clone","clone_into","cpu_config","device_manager","devices","drop","dumbo","dump_cpu_config","emulate_serial_init","epoll_context","eq","events_observer","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","get_bus_device","get_dirty_bitmap","guest_memory","guest_memory","init","instance_info","instance_info","into","into","into","into","into","into","io_uring","latest_balloon_stats","logger","mem_size_mib","mmds","mmio_device_manager","pause_vm","persist","pio_device_manager","process","rate_limiter","resources","resume_vm","rpc_interface","save_state","save_vcpu_states","seccomp_filters","send_ctrl_alt_del","set_dirty_page_tracking","shutdown_exit_code","shutdown_exit_code","signal_handler","source","source","source","start_vcpus","stop","subscribers","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","uffd","update_balloon_config","update_balloon_stats_config","update_block_device_path","update_block_rate_limiter","update_net_rate_limiters","update_vhost_user_block_config","utilities","vcpus_exit_evt","vcpus_handles","version","version_map","vm","vmm_config","vstate","BootTimer","CMDLINE_MAX_SIZE","ConfigurationError","DeviceType","IRQ_BASE","IRQ_MAX","InitrdConfig","MMIO_MEM_SIZE","MMIO_MEM_START","PAGE_SIZE","Virtio","address","arch_memory_regions","as_any","as_any","as_mut_any","as_mut_any","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","configure_system","deserialize","eq","fmt","fmt","fmt","from","from","get_kernel_start","hash","initrd_load_addr","into","into","serialize","size","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","version","x86_64","ConfigurationError","E820Configuration","E820_RAM","E820_RESERVED","EBDA_SIZE","EBDA_START","FIRST_ADDR_PAST_32BITS","InitrdAddress","MEM_32BIT_GAP_SIZE","MMIO_MEM_SIZE","MMIO_MEM_START","MpTableSetup","ZeroPageSetup","_DERIVE_Display_FOR_ConfigurationError","add_e820_entry","arch_memory_regions","as_any","as_mut_any","borrow","borrow_mut","configure_system","cpu_model","eq","fmt","fmt","from","from","gdt","get_kernel_start","initrd_load_addr","interrupts","into","layout","mptable","msr","regs","source","to_string","try_from","try_into","type_id","CpuModel","as_any","as_mut_any","borrow","borrow_mut","cmp","eq","extended_family","extended_model","family","fmt","from","from","get_cpu_model","into","is_at_least_cascade_lake","model","partial_cmp","stepping","try_from","try_into","type_id","gdt_entry","get_avl","get_base","get_db","get_dpl","get_g","get_l","get_limit","get_p","get_s","get_type","kvm_segment_from_gdt","APIC_LVT0","APIC_LVT1","APIC_MODE_EXTINT","APIC_MODE_NMI","GetLapic","InterruptError","SetLapic","_DERIVE_Display_FOR_InterruptError","as_any","as_mut_any","borrow","borrow_mut","eq","fmt","fmt","from","get_klapic_reg","into","set_apic_delivery_mode","set_klapic_reg","set_lint","to_string","try_from","try_into","type_id","BOOT_STACK_POINTER","CMDLINE_MAX_SIZE","CMDLINE_START","HIMEM_START","IRQ_BASE","IRQ_MAX","KVM_TSS_ADDRESS","ZERO_PAGE_START","APIC_DEFAULT_PHYS_BASE","APIC_VERSION","AddressOverflow","BUS_TYPE_ISA","CPU_FEATURE_APIC","CPU_FEATURE_FPU","CPU_STEPPING","Clear","IO_APIC_DEFAULT_PHYS_BASE","MAX_SUPPORTED_CPUS","MPC_OEM","MPC_PRODUCT_ID","MPC_SIGNATURE","MPC_SPEC","MPTABLE_START","MptableError","NotEnoughMemory","SMP_MAGIC_IDENT","TooManyCpus","TooManyIrqs","WriteMpcBus","WriteMpcCpu","WriteMpcIntsrc","WriteMpcIoapic","WriteMpcLintsrc","WriteMpcTable","WriteMpfIntel","_DERIVE_Display_FOR_MptableError","as_any","as_mut_any","borrow","borrow_mut","char_array","compute_checksum","compute_mp_size","eq","fmt","fmt","from","into","mpf_intel_compute_checksum","setup_mptable","to_string","try_from","try_into","type_id","APIC_BASE_MSR","APIC_MSR_INDEXES","ArchCapaMSRFlags","BHI_NO","DOITM","ENERGY_FILTERING_CTL","FBSDP_NO","FB_CLEAR","FB_CLEAR_CTRL","Fam","GetMsrIndexList","IBRS_ALL","IF_PSCHANGE_MC_NO","InvalidVendor","MDS_NO","MISC_PACKAGE_CTRLS","MSR_IA32_ARCH_CAPABILITIES","MSR_IA32_PRED_CMD","MSR_IA32_SPEC_CTRL","MSR_KVM_ASYNC_PF_EN","MSR_KVM_ASYNC_PF_INT","MSR_KVM_POLL_CONTROL","MSR_KVM_PV_EOI_EN","MSR_KVM_STEAL_TIME","MSR_KVM_SYSTEM_TIME_NEW","MSR_KVM_WALL_CLOCK_NEW","MSR_RANGE","MsrError","MsrRange","OVERCLOCKING_STATUS","PSDP_NO","RDCL_NO","RRSBA","RSBA","SBDR_SSDP_NO","SERIALIZABLE_MSR_RANGES","SKIP_L1DFL_VMENTRY","SSB_NO","SetMsrs","SetMsrsIncomplete","TAA_NO","TSX_CTRL","UNDUMPABLE_MSR_RANGES","UNDUMPABLE_MSR_RANGES_AMD","_DERIVE_Display_FOR_MsrError","all","as_any","as_any","as_any","as_mut_any","as_mut_any","as_mut_any","base","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","complement","contains","contains","create_boot_msr_entries","default","difference","empty","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_bits","from_bits_retain","from_bits_retain","from_bits_truncate","from_iter","from_name","get_msrs_to_dump","get_msrs_to_save","insert","intersection","intersects","into","into","into","into_iter","is_all","is_empty","iter","iter_names","msr_should_dump","msr_should_dump_amd","msr_should_serialize","nmsrs","not","remove","set","set_msrs","source","sub","sub_assign","symmetric_difference","to_string","toggle","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","union","BOOT_GDT_MAX","BOOT_GDT_OFFSET","BOOT_IDT_OFFSET","ConfigureSegmentsAndSpecialRegisters","EFER_LMA","EFER_LME","GetSpecialRegisters","GetStatusRegisters","PDE_START","PDPTE_START","PML4_START","RegsError","SetBaseRegisters","SetFPURegisters","SetSpecialRegisters","SetStatusRegisters","SetupFpuError","SetupPageTables","SetupRegistersError","SetupSpecialRegistersError","WriteGDT","WriteIDT","WritePDEAddress","WritePDPTEAddress","WritePML4Address","X86_CR0_PE","X86_CR0_PG","X86_CR4_PAE","_DERIVE_Display_FOR_RegsError","_DERIVE_Display_FOR_SetupSpecialRegistersError","as_any","as_any","as_any","as_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","configure_segments_and_sregs","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","into","into","into","into","setup_fpu","setup_page_tables","setup_regs","setup_sregs","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","write_gdt_table","write_idt_value","x86","hyperv","hyperv_tlfs","mpspec","msr_index","perf_event","HV_X64_MSR_SYNDBG_CONTROL","HV_X64_MSR_SYNDBG_OPTIONS","HV_X64_MSR_SYNDBG_PENDING_BUFFER","HV_X64_MSR_SYNDBG_RECV_BUFFER","HV_X64_MSR_SYNDBG_SEND_BUFFER","HV_X64_MSR_SYNDBG_STATUS","HV_X64_MSR_APIC_FREQUENCY","HV_X64_MSR_CRASH_CTL","HV_X64_MSR_CRASH_P0","HV_X64_MSR_CRASH_P1","HV_X64_MSR_CRASH_P2","HV_X64_MSR_CRASH_P3","HV_X64_MSR_CRASH_P4","HV_X64_MSR_CRASH_PARAMS","HV_X64_MSR_EOI","HV_X64_MSR_EOM","HV_X64_MSR_GUEST_IDLE","HV_X64_MSR_GUEST_OS_ID","HV_X64_MSR_HYPERCALL","HV_X64_MSR_HYPERCALL_ENABLE","HV_X64_MSR_HYPERCALL_PAGE_ADDRESS_MASK","HV_X64_MSR_HYPERCALL_PAGE_ADDRESS_SHIFT","HV_X64_MSR_ICR","HV_X64_MSR_REENLIGHTENMENT_CONTROL","HV_X64_MSR_REFERENCE_TSC","HV_X64_MSR_RESET","HV_X64_MSR_SCONTROL","HV_X64_MSR_SIEFP","HV_X64_MSR_SIMP","HV_X64_MSR_SINT0","HV_X64_MSR_SINT1","HV_X64_MSR_SINT10","HV_X64_MSR_SINT11","HV_X64_MSR_SINT12","HV_X64_MSR_SINT13","HV_X64_MSR_SINT14","HV_X64_MSR_SINT15","HV_X64_MSR_SINT2","HV_X64_MSR_SINT3","HV_X64_MSR_SINT4","HV_X64_MSR_SINT5","HV_X64_MSR_SINT6","HV_X64_MSR_SINT7","HV_X64_MSR_SINT8","HV_X64_MSR_SINT9","HV_X64_MSR_STIMER0_CONFIG","HV_X64_MSR_STIMER0_COUNT","HV_X64_MSR_STIMER1_CONFIG","HV_X64_MSR_STIMER1_COUNT","HV_X64_MSR_STIMER2_CONFIG","HV_X64_MSR_STIMER2_COUNT","HV_X64_MSR_STIMER3_CONFIG","HV_X64_MSR_STIMER3_COUNT","HV_X64_MSR_SVERSION","HV_X64_MSR_TIME_REF_COUNT","HV_X64_MSR_TPR","HV_X64_MSR_TSC_EMULATION_CONTROL","HV_X64_MSR_TSC_EMULATION_STATUS","HV_X64_MSR_TSC_FREQUENCY","HV_X64_MSR_TSC_INVARIANT_CONTROL","HV_X64_MSR_TSC_REFERENCE_ADDRESS_SHIFT","HV_X64_MSR_TSC_REFERENCE_ENABLE","HV_X64_MSR_VP_ASSIST_PAGE","HV_X64_MSR_VP_ASSIST_PAGE_ADDRESS_MASK","HV_X64_MSR_VP_ASSIST_PAGE_ADDRESS_SHIFT","HV_X64_MSR_VP_ASSIST_PAGE_ENABLE","HV_X64_MSR_VP_INDEX","HV_X64_MSR_VP_RUNTIME","BUSTYPE_CBUS","BUSTYPE_CBUSII","BUSTYPE_EISA","BUSTYPE_FUTURE","BUSTYPE_INTERN","BUSTYPE_ISA","BUSTYPE_MBI","BUSTYPE_MBII","BUSTYPE_MCA","BUSTYPE_MPI","BUSTYPE_MPSA","BUSTYPE_NUBUS","BUSTYPE_PCI","BUSTYPE_PCMCIA","BUSTYPE_TC","BUSTYPE_VL","BUSTYPE_VME","BUSTYPE_XPRESS","CPU_BOOTPROCESSOR","CPU_ENABLED","CPU_FAMILY_MASK","CPU_MODEL_MASK","CPU_STEPPING_MASK","MPC_APIC_USABLE","MPC_OEM_SIGNATURE","MPC_SIGNATURE","MP_APIC_ALL","MP_BUS","MP_INTSRC","MP_IOAPIC","MP_IRQPOL_ACTIVE_HIGH","MP_IRQPOL_ACTIVE_LOW","MP_IRQPOL_DEFAULT","MP_IRQPOL_MASK","MP_IRQPOL_RESERVED","MP_IRQTRIG_DEFAULT","MP_IRQTRIG_EDGE","MP_IRQTRIG_LEVEL","MP_IRQTRIG_MASK","MP_IRQTRIG_RESERVED","MP_LINTSRC","MP_PROCESSOR","MP_TRANSLATION","apicaddr","apicid","apicid","apicver","apicver","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","busid","bustype","checksum","checksum","checksum","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cpufeature","cpuflag","default","default","default","default","default","default","default","default","destapic","destapiclint","dstapic","dstirq","eq","eq","eq","eq","eq","eq","eq","eq","feature1","feature2","feature3","feature4","feature5","featureflag","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","irqflag","irqflag","irqtype","irqtype","lapic","length","length","length","mp_bustype","mp_bustype_MP_BUS_EISA","mp_bustype_MP_BUS_ISA","mp_bustype_MP_BUS_PCI","mp_irq_source_types","mp_irq_source_types_mp_ExtINT","mp_irq_source_types_mp_INT","mp_irq_source_types_mp_NMI","mp_irq_source_types_mp_SMI","mpc","mpc_bus","mpc_cpu","mpc_intsrc","mpc_ioapic","mpc_lintsrc","mpc_oemtable","mpc_table","mpf_intel","oem","oemcount","oemptr","oemsize","physptr","productid","reserved","reserved","rev","signature","signature","signature","spec","specification","srcbus","srcbusid","srcbusirq","srcbusirq","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_","type_","type_","type_","type_","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","MSR_AMD64_BU_CFG2","MSR_AMD64_CPUID_FN_1","MSR_AMD64_DC_CFG","MSR_AMD64_DE_CFG","MSR_AMD64_DE_CFG_LFENCE_SERIALIZE_BIT","MSR_AMD64_IBSBRTARGET","MSR_AMD64_IBSCTL","MSR_AMD64_IBSDCLINAD","MSR_AMD64_IBSDCPHYSAD","MSR_AMD64_IBSFETCHCTL","MSR_AMD64_IBSFETCHLINAD","MSR_AMD64_IBSFETCHPHYSAD","MSR_AMD64_IBSFETCH_REG_COUNT","MSR_AMD64_IBSFETCH_REG_MASK","MSR_AMD64_IBSOPCTL","MSR_AMD64_IBSOPDATA","MSR_AMD64_IBSOPDATA2","MSR_AMD64_IBSOPDATA3","MSR_AMD64_IBSOPDATA4","MSR_AMD64_IBSOPRIP","MSR_AMD64_IBSOP_REG_COUNT","MSR_AMD64_IBSOP_REG_MASK","MSR_AMD64_IBS_REG_COUNT_MAX","MSR_AMD64_ICIBSEXTDCTL","MSR_AMD64_LS_CFG","MSR_AMD64_MC0_MASK","MSR_AMD64_NB_CFG","MSR_AMD64_OSVW_ID_LENGTH","MSR_AMD64_OSVW_STATUS","MSR_AMD64_PATCH_LEVEL","MSR_AMD64_PATCH_LOADER","MSR_AMD64_SEV","MSR_AMD64_SEV_ENABLED_BIT","MSR_AMD64_SEV_ES_ENABLED_BIT","MSR_AMD64_SEV_ES_GHCB","MSR_AMD64_TSC_RATIO","MSR_AMD64_VIRT_SPEC_CTRL","MSR_AMD_PERF_CTL","MSR_AMD_PERF_STATUS","MSR_AMD_PKG_ENERGY_STATUS","MSR_AMD_PPIN","MSR_AMD_PPIN_CTL","MSR_AMD_PSTATE_DEF_BASE","MSR_AMD_RAPL_POWER_UNIT","MSR_ARCH_LBR_CTL","MSR_ARCH_LBR_DEPTH","MSR_ARCH_LBR_FROM_0","MSR_ARCH_LBR_INFO_0","MSR_ARCH_LBR_TO_0","MSR_ATOM_CORE_RATIOS","MSR_ATOM_CORE_TURBO_RATIOS","MSR_ATOM_CORE_TURBO_VIDS","MSR_ATOM_CORE_VIDS","MSR_ATOM_PKG_C6_RESIDENCY","MSR_CC6_DEMOTION_POLICY_CONFIG","MSR_CONFIG_TDP_CONTROL","MSR_CONFIG_TDP_LEVEL_1","MSR_CONFIG_TDP_LEVEL_2","MSR_CONFIG_TDP_NOMINAL","MSR_CORE_C1_RES","MSR_CORE_C3_RESIDENCY","MSR_CORE_C6_RESIDENCY","MSR_CORE_C7_RESIDENCY","MSR_CORE_PERF_FIXED_CTR0","MSR_CORE_PERF_FIXED_CTR1","MSR_CORE_PERF_FIXED_CTR2","MSR_CORE_PERF_FIXED_CTR3","MSR_CORE_PERF_FIXED_CTR_CTRL","MSR_CORE_PERF_GLOBAL_CTRL","MSR_CORE_PERF_GLOBAL_OVF_CTRL","MSR_CORE_PERF_GLOBAL_OVF_CTRL_COND_CHGD","MSR_CORE_PERF_GLOBAL_OVF_CTRL_COND_CHGD_BIT","MSR_CORE_PERF_GLOBAL_OVF_CTRL_OVF_BUF","MSR_CORE_PERF_GLOBAL_OVF_CTRL_OVF_BUF_BIT","MSR_CORE_PERF_GLOBAL_OVF_CTRL_TRACE_TOPA_PMI","MSR_CORE_PERF_GLOBAL_OVF_CTRL_TRACE_TOPA_PMI_BIT","MSR_CORE_PERF_GLOBAL_STATUS","MSR_CORE_PERF_LIMIT_REASONS","MSR_CSTAR","MSR_DRAM_ENERGY_STATUS","MSR_DRAM_PERF_STATUS","MSR_DRAM_POWER_INFO","MSR_DRAM_POWER_LIMIT","MSR_EBC_FREQUENCY_ID","MSR_EFER","MSR_F15H_CU_MAX_PWR_ACCUMULATOR","MSR_F15H_CU_PWR_ACCUMULATOR","MSR_F15H_EX_CFG","MSR_F15H_IC_CFG","MSR_F15H_NB_PERF_CTL","MSR_F15H_NB_PERF_CTR","MSR_F15H_PERF_CTL","MSR_F15H_PERF_CTL0","MSR_F15H_PERF_CTL1","MSR_F15H_PERF_CTL2","MSR_F15H_PERF_CTL3","MSR_F15H_PERF_CTL4","MSR_F15H_PERF_CTL5","MSR_F15H_PERF_CTR","MSR_F15H_PERF_CTR0","MSR_F15H_PERF_CTR1","MSR_F15H_PERF_CTR2","MSR_F15H_PERF_CTR3","MSR_F15H_PERF_CTR4","MSR_F15H_PERF_CTR5","MSR_F15H_PTSC","MSR_F16H_DR0_ADDR_MASK","MSR_F16H_DR1_ADDR_MASK","MSR_F16H_DR2_ADDR_MASK","MSR_F16H_DR3_ADDR_MASK","MSR_F16H_L2I_PERF_CTL","MSR_F16H_L2I_PERF_CTR","MSR_F17H_IRPERF","MSR_FAM10H_MMIO_CONF_BASE","MSR_FAM10H_NODE_ID","MSR_FSB_FREQ","MSR_FS_BASE","MSR_GEODE_BUSCONT_CONF0","MSR_GFX_PERF_LIMIT_REASONS","MSR_GS_BASE","MSR_HWP_CAPABILITIES","MSR_HWP_INTERRUPT","MSR_HWP_REQUEST","MSR_HWP_REQUEST_PKG","MSR_HWP_STATUS","MSR_IA32_APERF","MSR_IA32_APICBASE","MSR_IA32_APICBASE_BASE","MSR_IA32_APICBASE_BSP","MSR_IA32_APICBASE_ENABLE","MSR_IA32_ARCH_CAPABILITIES","MSR_IA32_BBL_CR_CTL","MSR_IA32_BBL_CR_CTL3","MSR_IA32_BNDCFGS","MSR_IA32_BNDCFGS_RSVD","MSR_IA32_CORE_CAPS","MSR_IA32_CORE_CAPS_SPLIT_LOCK_DETECT_BIT","MSR_IA32_CR_PAT","MSR_IA32_DEBUGCTLMSR","MSR_IA32_DS_AREA","MSR_IA32_EBL_CR_POWERON","MSR_IA32_ENERGY_PERF_BIAS","MSR_IA32_FEAT_CTL","MSR_IA32_FLUSH_CMD","MSR_IA32_LASTBRANCHFROMIP","MSR_IA32_LASTBRANCHTOIP","MSR_IA32_LASTINTFROMIP","MSR_IA32_LASTINTTOIP","MSR_IA32_MC0_ADDR","MSR_IA32_MC0_CTL","MSR_IA32_MC0_CTL2","MSR_IA32_MC0_MISC","MSR_IA32_MC0_STATUS","MSR_IA32_MCG_CAP","MSR_IA32_MCG_CTL","MSR_IA32_MCG_EAX","MSR_IA32_MCG_EBP","MSR_IA32_MCG_EBX","MSR_IA32_MCG_ECX","MSR_IA32_MCG_EDI","MSR_IA32_MCG_EDX","MSR_IA32_MCG_EFLAGS","MSR_IA32_MCG_EIP","MSR_IA32_MCG_ESI","MSR_IA32_MCG_ESP","MSR_IA32_MCG_EXT_CTL","MSR_IA32_MCG_RESERVED","MSR_IA32_MCG_STATUS","MSR_IA32_MCU_OPT_CTRL","MSR_IA32_MISC_ENABLE","MSR_IA32_MISC_ENABLE_ADJ_PREF_DISABLE","MSR_IA32_MISC_ENABLE_ADJ_PREF_DISABLE_BIT","MSR_IA32_MISC_ENABLE_BTS_UNAVAIL","MSR_IA32_MISC_ENABLE_BTS_UNAVAIL_BIT","MSR_IA32_MISC_ENABLE_DCU_PREF_DISABLE","MSR_IA32_MISC_ENABLE_DCU_PREF_DISABLE_BIT","MSR_IA32_MISC_ENABLE_EMON","MSR_IA32_MISC_ENABLE_EMON_BIT","MSR_IA32_MISC_ENABLE_ENHANCED_SPEEDSTEP","MSR_IA32_MISC_ENABLE_ENHANCED_SPEEDSTEP_BIT","MSR_IA32_MISC_ENABLE_FAST_STRING","MSR_IA32_MISC_ENABLE_FAST_STRING_BIT","MSR_IA32_MISC_ENABLE_FERR","MSR_IA32_MISC_ENABLE_FERR_BIT","MSR_IA32_MISC_ENABLE_FERR_MULTIPLEX","MSR_IA32_MISC_ENABLE_FERR_MULTIPLEX_BIT","MSR_IA32_MISC_ENABLE_IP_PREF_DISABLE","MSR_IA32_MISC_ENABLE_IP_PREF_DISABLE_BIT","MSR_IA32_MISC_ENABLE_L1D_CONTEXT","MSR_IA32_MISC_ENABLE_L1D_CONTEXT_BIT","MSR_IA32_MISC_ENABLE_L3CACHE_DISABLE","MSR_IA32_MISC_ENABLE_L3CACHE_DISABLE_BIT","MSR_IA32_MISC_ENABLE_LIMIT_CPUID","MSR_IA32_MISC_ENABLE_LIMIT_CPUID_BIT","MSR_IA32_MISC_ENABLE_MWAIT","MSR_IA32_MISC_ENABLE_MWAIT_BIT","MSR_IA32_MISC_ENABLE_PEBS_UNAVAIL","MSR_IA32_MISC_ENABLE_PEBS_UNAVAIL_BIT","MSR_IA32_MISC_ENABLE_PREFETCH_DISABLE","MSR_IA32_MISC_ENABLE_PREFETCH_DISABLE_BIT","MSR_IA32_MISC_ENABLE_SPEEDSTEP_LOCK","MSR_IA32_MISC_ENABLE_SPEEDSTEP_LOCK_BIT","MSR_IA32_MISC_ENABLE_SPLIT_LOCK_DISABLE","MSR_IA32_MISC_ENABLE_SPLIT_LOCK_DISABLE_BIT","MSR_IA32_MISC_ENABLE_SUPPRESS_LOCK","MSR_IA32_MISC_ENABLE_SUPPRESS_LOCK_BIT","MSR_IA32_MISC_ENABLE_TCC","MSR_IA32_MISC_ENABLE_TCC_BIT","MSR_IA32_MISC_ENABLE_TM1","MSR_IA32_MISC_ENABLE_TM1_BIT","MSR_IA32_MISC_ENABLE_TM2","MSR_IA32_MISC_ENABLE_TM2_BIT","MSR_IA32_MISC_ENABLE_TURBO_DISABLE","MSR_IA32_MISC_ENABLE_TURBO_DISABLE_BIT","MSR_IA32_MISC_ENABLE_X87_COMPAT","MSR_IA32_MISC_ENABLE_X87_COMPAT_BIT","MSR_IA32_MISC_ENABLE_XD_DISABLE","MSR_IA32_MISC_ENABLE_XD_DISABLE_BIT","MSR_IA32_MISC_ENABLE_XTPR_DISABLE","MSR_IA32_MISC_ENABLE_XTPR_DISABLE_BIT","MSR_IA32_MPERF","MSR_IA32_P5_MC_ADDR","MSR_IA32_P5_MC_TYPE","MSR_IA32_PACKAGE_THERM_INTERRUPT","MSR_IA32_PACKAGE_THERM_STATUS","MSR_IA32_PASID","MSR_IA32_PEBS_ENABLE","MSR_IA32_PERFCTR0","MSR_IA32_PERFCTR1","MSR_IA32_PERF_CAPABILITIES","MSR_IA32_PERF_CTL","MSR_IA32_PERF_STATUS","MSR_IA32_PLATFORM_ID","MSR_IA32_PMC0","MSR_IA32_POWER_CTL","MSR_IA32_POWER_CTL_BIT_EE","MSR_IA32_PRED_CMD","MSR_IA32_RTIT_ADDR0_A","MSR_IA32_RTIT_ADDR0_B","MSR_IA32_RTIT_ADDR1_A","MSR_IA32_RTIT_ADDR1_B","MSR_IA32_RTIT_ADDR2_A","MSR_IA32_RTIT_ADDR2_B","MSR_IA32_RTIT_ADDR3_A","MSR_IA32_RTIT_ADDR3_B","MSR_IA32_RTIT_CR3_MATCH","MSR_IA32_RTIT_CTL","MSR_IA32_RTIT_OUTPUT_BASE","MSR_IA32_RTIT_OUTPUT_MASK","MSR_IA32_RTIT_STATUS","MSR_IA32_SMBASE","MSR_IA32_SMM_MONITOR_CTL","MSR_IA32_SPEC_CTRL","MSR_IA32_SYSENTER_CS","MSR_IA32_SYSENTER_EIP","MSR_IA32_SYSENTER_ESP","MSR_IA32_TEMPERATURE_TARGET","MSR_IA32_THERM_CONTROL","MSR_IA32_THERM_INTERRUPT","MSR_IA32_THERM_STATUS","MSR_IA32_TSC","MSR_IA32_TSCDEADLINE","MSR_IA32_TSC_ADJUST","MSR_IA32_TSC_DEADLINE","MSR_IA32_TSX_CTRL","MSR_IA32_UCODE_REV","MSR_IA32_UCODE_WRITE","MSR_IA32_UMWAIT_CONTROL","MSR_IA32_UMWAIT_CONTROL_TIME_MASK","MSR_IA32_VMX_BASIC","MSR_IA32_VMX_CR0_FIXED0","MSR_IA32_VMX_CR0_FIXED1","MSR_IA32_VMX_CR4_FIXED0","MSR_IA32_VMX_CR4_FIXED1","MSR_IA32_VMX_ENTRY_CTLS","MSR_IA32_VMX_EPT_VPID_CAP","MSR_IA32_VMX_EXIT_CTLS","MSR_IA32_VMX_MISC","MSR_IA32_VMX_MISC_INTEL_PT","MSR_IA32_VMX_MISC_PREEMPTION_TIMER_SCALE","MSR_IA32_VMX_MISC_VMWRITE_SHADOW_RO_FIELDS","MSR_IA32_VMX_PINBASED_CTLS","MSR_IA32_VMX_PROCBASED_CTLS","MSR_IA32_VMX_PROCBASED_CTLS2","MSR_IA32_VMX_TRUE_ENTRY_CTLS","MSR_IA32_VMX_TRUE_EXIT_CTLS","MSR_IA32_VMX_TRUE_PINBASED_CTLS","MSR_IA32_VMX_TRUE_PROCBASED_CTLS","MSR_IA32_VMX_VMCS_ENUM","MSR_IA32_VMX_VMFUNC","MSR_IA32_XSS","MSR_IDT_FCR1","MSR_IDT_FCR2","MSR_IDT_FCR3","MSR_IDT_FCR4","MSR_IDT_MCR0","MSR_IDT_MCR1","MSR_IDT_MCR2","MSR_IDT_MCR3","MSR_IDT_MCR4","MSR_IDT_MCR5","MSR_IDT_MCR6","MSR_IDT_MCR7","MSR_IDT_MCR_CTRL","MSR_K6_EPMR","MSR_K6_PFIR","MSR_K6_PSOR","MSR_K6_UWCCR","MSR_K6_WHCR","MSR_K7_CLK_CTL","MSR_K7_EVNTSEL0","MSR_K7_EVNTSEL1","MSR_K7_EVNTSEL2","MSR_K7_EVNTSEL3","MSR_K7_FID_VID_CTL","MSR_K7_FID_VID_STATUS","MSR_K7_HWCR","MSR_K7_HWCR_IRPERF_EN_BIT","MSR_K7_HWCR_SMMLOCK_BIT","MSR_K7_PERFCTR0","MSR_K7_PERFCTR1","MSR_K7_PERFCTR2","MSR_K7_PERFCTR3","MSR_K8_INT_PENDING_MSG","MSR_K8_SYSCFG","MSR_K8_SYSCFG_MEM_ENCRYPT_BIT","MSR_K8_TOP_MEM1","MSR_K8_TOP_MEM2","MSR_K8_TSEG_ADDR","MSR_K8_TSEG_MASK","MSR_KERNEL_GS_BASE","MSR_KNC_EVNTSEL0","MSR_KNC_EVNTSEL1","MSR_KNC_PERFCTR0","MSR_KNC_PERFCTR1","MSR_KNL_CORE_C6_RESIDENCY","MSR_LBR_CORE_FROM","MSR_LBR_CORE_TO","MSR_LBR_INFO_0","MSR_LBR_NHM_FROM","MSR_LBR_NHM_TO","MSR_LBR_SELECT","MSR_LBR_TOS","MSR_LSTAR","MSR_MC6_DEMOTION_POLICY_CONFIG","MSR_MISC_FEATURES_ENABLES","MSR_MISC_FEATURES_ENABLES_CPUID_FAULT_BIT","MSR_MISC_FEATURES_ENABLES_RING3MWAIT_BIT","MSR_MISC_FEATURE_CONTROL","MSR_MISC_PWR_MGMT","MSR_MODULE_C6_RES_MS","MSR_MTRRcap","MSR_MTRRdefType","MSR_MTRRfix16K_80000","MSR_MTRRfix16K_A0000","MSR_MTRRfix4K_C0000","MSR_MTRRfix4K_C8000","MSR_MTRRfix4K_D0000","MSR_MTRRfix4K_D8000","MSR_MTRRfix4K_E0000","MSR_MTRRfix4K_E8000","MSR_MTRRfix4K_F0000","MSR_MTRRfix4K_F8000","MSR_MTRRfix64K_00000","MSR_OFFCORE_RSP_0","MSR_OFFCORE_RSP_1","MSR_P4_ALF_ESCR0","MSR_P4_ALF_ESCR1","MSR_P4_BPU_CCCR0","MSR_P4_BPU_CCCR1","MSR_P4_BPU_CCCR2","MSR_P4_BPU_CCCR3","MSR_P4_BPU_ESCR0","MSR_P4_BPU_ESCR1","MSR_P4_BPU_PERFCTR0","MSR_P4_BPU_PERFCTR1","MSR_P4_BPU_PERFCTR2","MSR_P4_BPU_PERFCTR3","MSR_P4_BSU_ESCR0","MSR_P4_BSU_ESCR1","MSR_P4_CRU_ESCR0","MSR_P4_CRU_ESCR1","MSR_P4_CRU_ESCR2","MSR_P4_CRU_ESCR3","MSR_P4_CRU_ESCR4","MSR_P4_CRU_ESCR5","MSR_P4_DAC_ESCR0","MSR_P4_DAC_ESCR1","MSR_P4_FIRM_ESCR0","MSR_P4_FIRM_ESCR1","MSR_P4_FLAME_CCCR0","MSR_P4_FLAME_CCCR1","MSR_P4_FLAME_CCCR2","MSR_P4_FLAME_CCCR3","MSR_P4_FLAME_ESCR0","MSR_P4_FLAME_ESCR1","MSR_P4_FLAME_PERFCTR0","MSR_P4_FLAME_PERFCTR1","MSR_P4_FLAME_PERFCTR2","MSR_P4_FLAME_PERFCTR3","MSR_P4_FSB_ESCR0","MSR_P4_FSB_ESCR1","MSR_P4_IQ_CCCR0","MSR_P4_IQ_CCCR1","MSR_P4_IQ_CCCR2","MSR_P4_IQ_CCCR3","MSR_P4_IQ_CCCR4","MSR_P4_IQ_CCCR5","MSR_P4_IQ_ESCR0","MSR_P4_IQ_ESCR1","MSR_P4_IQ_PERFCTR0","MSR_P4_IQ_PERFCTR1","MSR_P4_IQ_PERFCTR2","MSR_P4_IQ_PERFCTR3","MSR_P4_IQ_PERFCTR4","MSR_P4_IQ_PERFCTR5","MSR_P4_IS_ESCR0","MSR_P4_IS_ESCR1","MSR_P4_ITLB_ESCR0","MSR_P4_ITLB_ESCR1","MSR_P4_IX_ESCR0","MSR_P4_IX_ESCR1","MSR_P4_MOB_ESCR0","MSR_P4_MOB_ESCR1","MSR_P4_MS_CCCR0","MSR_P4_MS_CCCR1","MSR_P4_MS_CCCR2","MSR_P4_MS_CCCR3","MSR_P4_MS_ESCR0","MSR_P4_MS_ESCR1","MSR_P4_MS_PERFCTR0","MSR_P4_MS_PERFCTR1","MSR_P4_MS_PERFCTR2","MSR_P4_MS_PERFCTR3","MSR_P4_PEBS_MATRIX_VERT","MSR_P4_PMH_ESCR0","MSR_P4_PMH_ESCR1","MSR_P4_RAT_ESCR0","MSR_P4_RAT_ESCR1","MSR_P4_SAAT_ESCR0","MSR_P4_SAAT_ESCR1","MSR_P4_SSU_ESCR0","MSR_P4_SSU_ESCR1","MSR_P4_TBPU_ESCR0","MSR_P4_TBPU_ESCR1","MSR_P4_TC_ESCR0","MSR_P4_TC_ESCR1","MSR_P4_U2L_ESCR0","MSR_P4_U2L_ESCR1","MSR_P6_EVNTSEL0","MSR_P6_EVNTSEL1","MSR_P6_PERFCTR0","MSR_P6_PERFCTR1","MSR_PEBS_DATA_CFG","MSR_PEBS_FRONTEND","MSR_PEBS_LD_LAT_THRESHOLD","MSR_PERF_LIMIT_REASONS","MSR_PERF_METRICS","MSR_PKGC10_IRTL","MSR_PKGC3_IRTL","MSR_PKGC6_IRTL","MSR_PKGC7_IRTL","MSR_PKGC8_IRTL","MSR_PKGC9_IRTL","MSR_PKG_ANY_CORE_C0_RES","MSR_PKG_ANY_GFXE_C0_RES","MSR_PKG_BOTH_CORE_GFXE_C0_RES","MSR_PKG_C10_RESIDENCY","MSR_PKG_C2_RESIDENCY","MSR_PKG_C3_RESIDENCY","MSR_PKG_C6_RESIDENCY","MSR_PKG_C7_RESIDENCY","MSR_PKG_C8_RESIDENCY","MSR_PKG_C9_RESIDENCY","MSR_PKG_CST_CONFIG_CONTROL","MSR_PKG_ENERGY_STATUS","MSR_PKG_PERF_STATUS","MSR_PKG_POWER_INFO","MSR_PKG_POWER_LIMIT","MSR_PKG_WEIGHTED_CORE_C0_RES","MSR_PLATFORM_ENERGY_STATUS","MSR_PLATFORM_INFO","MSR_PLATFORM_INFO_CPUID_FAULT_BIT","MSR_PM_ENABLE","MSR_PP0_ENERGY_STATUS","MSR_PP0_PERF_STATUS","MSR_PP0_POLICY","MSR_PP0_POWER_LIMIT","MSR_PP1_ENERGY_STATUS","MSR_PP1_POLICY","MSR_PP1_POWER_LIMIT","MSR_PPERF","MSR_PPIN","MSR_PPIN_CTL","MSR_RAPL_POWER_UNIT","MSR_RELOAD_FIXED_CTR0","MSR_RELOAD_PMC0","MSR_RING_PERF_LIMIT_REASONS","MSR_SMI_COUNT","MSR_STAR","MSR_SYSCALL_MASK","MSR_TEST_CTRL","MSR_TEST_CTRL_SPLIT_LOCK_DETECT_BIT","MSR_TFA_RTM_FORCE_ABORT_BIT","MSR_THERM2_CTL","MSR_THERM2_CTL_TM_SELECT","MSR_TMTA_LONGRUN_CTRL","MSR_TMTA_LONGRUN_FLAGS","MSR_TMTA_LRTI_READOUT","MSR_TMTA_LRTI_VOLT_MHZ","MSR_TSC_AUX","MSR_TSX_FORCE_ABORT","MSR_TURBO_ACTIVATION_RATIO","MSR_TURBO_RATIO_LIMIT","MSR_TURBO_RATIO_LIMIT1","MSR_TURBO_RATIO_LIMIT2","MSR_VIA_BCR2","MSR_VIA_FCR","MSR_VIA_LONGHAUL","MSR_VIA_RNG","MSR_VM_CR","MSR_VM_HSAVE_PA","MSR_VM_IGNNE","MSR_ZEN2_SPECTRAL_CHICKEN","MSR_ARCH_PERFMON_EVENTSEL0","MSR_ARCH_PERFMON_EVENTSEL1","MSR_ARCH_PERFMON_FIXED_CTR0","MSR_ARCH_PERFMON_FIXED_CTR1","MSR_ARCH_PERFMON_FIXED_CTR2","MSR_ARCH_PERFMON_FIXED_CTR3","MSR_ARCH_PERFMON_FIXED_CTR_CTRL","MSR_ARCH_PERFMON_PERFCTR0","MSR_ARCH_PERFMON_PERFCTR1","AttachBlockDevice","BuildMicrovmFromSnapshotError","ConfigureSystem","CreateEntropyDevice","CreateGuestConfig","CreateLegacyDevice","CreateMicrovmAndVcpus","CreateNetDevice","CreateRateLimiter","EmulateSerialInit","GetCpuTemplate","GetTsc","GuestMemory","InitrdLoad","InitrdRead","Internal","KernelCmdline","KernelLoader","KvmAccess","LoadCommandline","MissingKernelConfig","MissingMemSizeConfig","MissingSeccompFilters","MissingVcpuSeccompFilters","MissingVmmSeccompFilters","NetDeviceNotConfigured","OpenBlockDevice","RegisterMmioDevice","RestoreMicrovmState","RestoreMmioDevice","RestoreState","RestoreVcpus","SeccompFiltersInternal","SetTsc","SetVmResources","StartMicrovmError","StartVcpus","TooManyVCPUs","TscFrequencyNotPresent","VmUpdateConfig","_DERIVE_Display_FOR_BuildMicrovmFromSnapshotError","_DERIVE_Display_FOR_StartMicrovmError","as_any","as_any","as_mut_any","as_mut_any","attach_balloon_device","attach_block_devices","attach_boot_timer_device","attach_entropy_device","attach_net_devices","attach_unixsock_vsock_device","attach_virtio_device","borrow","borrow","borrow_mut","borrow_mut","build_and_boot_microvm","build_microvm_for_boot","build_microvm_from_snapshot","configure_system_for_boot","create_vcpus","create_vmm_and_vcpus","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","load_initrd","load_initrd_from_config","load_kernel","set_stdout_nonblocking","setup_interrupt_controller","setup_serial_device","source","source","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","templates","templates_serde","x86_64","Add","BITS","CpuConfiguration","CpuTemplateType","CpuVendorMismatched","Custom","CustomCpuTemplate","GetCpuTemplate","GetCpuTemplateError","GetCpuVendor","GuestConfigError","InvalidCpuModel","InvalidStaticCpuTemplate","KvmCapability","Numeric","RegisterValueFilter","Remove","Static","StaticCpuTemplate","_DERIVE_Display_FOR_GetCpuTemplateError","apply","as_any","as_any","as_any","as_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","bit","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","common_types","default","deserialize","deserialize","deserialize","eq","eq","eq","eq","filter","fmt","fmt","fmt","fmt","fmt","from","from","from","from","get_cpu_template","hash","impl_numeric","into","into","into","into","one","serialize","serialize","serialize","test_utils","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","value","version","zero","CpuConfiguration","CustomCpuTemplate","GuestConfigError","StaticCpuTemplate","test_utils","deserialize_from_str","deserialize_from_str_u32","deserialize_from_str_u64","serialize_to_hex_str","CpuConfiguration","CpuConfigurationError","CpuidFeatureNotSupported","CpuidFromKvmCpuid","MsrNotSupported","VcpuIoctl","_DERIVE_Display_FOR_CpuConfigurationError","apply_template","as_any","as_any","as_mut_any","as_mut_any","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","cpuid","cpuid","custom_cpu_template","eq","eq","fmt","fmt","fmt","from","from","into","into","msrs","static_cpu_templates","test_utils","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","Amd","Amd","AmdCpuid","BRAND_STRING_LENGTH","Clflush","CpuBits","Cpuid","CpuidEntry","CpuidKey","CpuidRegisters","CpuidTrait","CpuidTryFromKvmCpuid","EMPTY","ExtendedCacheFeatures","ExtendedTopology","FeatureInformation","FeatureInformationError","GetMaxCpusPerPackage","GetMaxCpusPerPackageError","InitialApicId","Intel","Intel","IntelCpuid","KvmCpuidFlags","MissingBrandStringLeaves","MissingLeaf0","MissingLeaf1","NormalizeCpuidError","Overflow","SIGNIFICANT_INDEX","STATEFUL_FUNC","STATE_READ_NEXT","SetMaxCpusPerPackage","Underflow","UnsupportedVendor","VENDOR_ID_AMD","VENDOR_ID_AMD_STR","VENDOR_ID_INTEL","VENDOR_ID_INTEL_STR","VendorId","_DERIVE_Display_FOR_CpuidTryFromKvmCpuid","amd","amd","amd_mut","apply_brand_string","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","common","cpuid","cpuid_count","default","default","default","default","deserialize","deserialize","deserialize","eax","ebx","ecx","edx","eq","eq","eq","eq","eq","eq","eq","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","get","get","get_mut","get_mut","hash","host_brand_string","inner","inner_mut","intel","intel","intel_mut","into","into","into","into","into","into","into","leaf","leaf","normalize","normalize","partial_cmp","partial_cmp","result","serialize","serialize","serialize","subleaf","subleaf","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update_extended_cache_features","update_extended_topology_entry","update_feature_info_entry","update_vendor_id","vendor_id","AmdCpuid","BrandString","ComputeUnitId","CpuBits","DEFAULT_BRAND_STRING","ExtendedApicId","ExtendedApicId","ExtendedApicIdError","ExtendedCacheTopology","ExtendedCacheTopologyError","FeatureEntry","FeatureEntryError","MissingLeaf0x7Subleaf0","MissingLeaf0x80000000","MissingLeaf0x80000001","MissingLeaf0x80000008","MissingLeaf0x8000001d","MissingLeaf0x8000001e","NormalizeCpuidError","NumSharingCache","NumSharingCacheOverflow","NumberOfPhysicalThreads","NumberOfPhysicalThreadsOverflow","PassthroughCacheTopology","ThreadPerComputeUnit","as_any","as_mut_any","borrow","borrow_mut","clone","clone_into","eq","fmt","from","from","get","get_mut","into","normalize","normalize","passthrough_cache_topology","to_owned","try_from","try_into","type_id","update_amd_feature_entry","update_brand_string_entry","update_extended_apic_id_entry","update_extended_cache_topology_entry","update_extended_feature_fn_entry","update_largest_extended_fn_entry","update_structured_extended_entry","BadVendorId","BrandString","ComputeUnitId","CpuBits","ExtendedApicId","ExtendedApicId","ExtendedApicIdError","ExtendedCacheTopology","ExtendedCacheTopologyError","FeatureEntry","FeatureEntryError","MissingLeaf0x7Subleaf0","MissingLeaf0x80000000","MissingLeaf0x80000001","MissingLeaf0x80000008","MissingLeaf0x8000001d","MissingLeaf0x8000001e","NoVendorId","NormalizeCpuidError","NumSharingCache","NumSharingCacheOverflow","NumberOfPhysicalThreads","NumberOfPhysicalThreadsOverflow","PassthroughCacheTopology","PassthroughCacheTopologyError","ThreadPerComputeUnit","_DERIVE_Display_FOR_ExtendedApicIdError","_DERIVE_Display_FOR_ExtendedCacheTopologyError","_DERIVE_Display_FOR_FeatureEntryError","_DERIVE_Display_FOR_NormalizeCpuidError","_DERIVE_Display_FOR_PassthroughCacheTopologyError","as_any","as_any","as_any","as_any","as_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","into","into","into","into","into","source","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","GetCpuidError","InvalidSubleaf","UnsupportedLeaf","_DERIVE_Display_FOR_GetCpuidError","as_any","as_mut_any","borrow","borrow_mut","eq","fmt","fmt","from","get_cpuid","get_vendor_id_from_host","into","msrs_to_save_by_cpuid","to_string","try_from","try_into","type_id","ApplyBrandString","DeterministicCache","DeterministicCacheError","GetBrandString","IntelCpuid","MaxCorePerPackage","MaxCorePerPackageUnderflow","MaxCpusPerCore","MaxCpusPerCoreUnderflow","MissingLeaf6","MissingLeaf7","MissingLeafA","NormalizeCpuidError","as_any","as_mut_any","borrow","borrow_mut","clone","clone_into","eq","fmt","from","from","get","get_mut","into","normalize","normalize","to_owned","try_from","try_into","type_id","update_brand_string_entry","update_deterministic_cache_entry","update_extended_feature_flags_entry","update_performance_monitoring_entry","update_power_management_entry","ApplyBrandString","DEFAULT_BRAND_STRING","DEFAULT_BRAND_STRING_BASE","DefaultBrandStringError","DeterministicCache","DeterministicCacheError","GetBrandString","MaxCorePerPackage","MaxCorePerPackageUnderflow","MaxCpusPerCore","MaxCpusPerCoreUnderflow","MissingFrequency","MissingLeaf6","MissingLeaf7","MissingLeafA","MissingSpace","NormalizeCpuidError","Overflow","_DERIVE_Display_FOR_DefaultBrandStringError","_DERIVE_Display_FOR_DeterministicCacheError","_DERIVE_Display_FOR_NormalizeCpuidError","as_any","as_any","as_any","as_mut_any","as_mut_any","as_mut_any","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","default_brand_string","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","source","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Amd","ApicId","CheckedAssignError","Clflush","CpuBits","ExtendedCacheFeatures","ExtendedCacheFeaturesError","ExtendedTopology","ExtendedTopologyError","FeatureInformation","FeatureInformationError","GetMaxCpusPerPackage","GetMaxCpusPerPackageError","InitialApicId","Intel","LevelNumber","LevelType","LogicalProcessors","MissingLeaf0","MissingLeaf0x80000005","MissingLeaf0x80000006","MissingLeaf1","NormalizeCpuidError","Overflow","Overflow","SetMaxCpusPerPackage","Underflow","VendorId","VendorIdError","_DERIVE_Display_FOR_ExtendedCacheFeaturesError","_DERIVE_Display_FOR_ExtendedTopologyError","_DERIVE_Display_FOR_FeatureInformationError","_DERIVE_Display_FOR_GetMaxCpusPerPackageError","_DERIVE_Display_FOR_NormalizeCpuidError","_DERIVE_Display_FOR_VendorIdError","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","get_max_cpus_per_package","get_range","into","into","into","into","into","into","into","mask","set_bit","set_range","source","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","CpuidLeafModifier","CpuidRegister","CpuidRegisterModifier","CustomCpuTemplate","Eax","Ebx","Ecx","Edx","RegisterModifier","addr","as_any","as_any","as_any","as_any","as_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","bitmap","bitmap","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cpuid_modifiers","default","default","default","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize_cpuid_register","deserialize_kvm_cpuid_flags","eq","eq","eq","eq","eq","flags","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","get_msr_index_list","hash","hash","hash","hash","into","into","into","into","into","kvm_capabilities","leaf","modifiers","msr_modifiers","partial_cmp","register","serialize","serialize","serialize","serialize","serialize","serialize_cpuid_register","subleaf","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","validate","C3","None","StaticCpuTemplate","T2","T2A","T2CL","T2S","as_any","as_mut_any","borrow","borrow_mut","c3","clone","clone_into","default","deserialize","deserialize","eq","fmt","fmt","from","from","from","into","is_none","serialize","serialize","t2","t2a","t2cl","t2s","to_owned","to_string","try_from","try_into","type_id","version","c3","t2","t2a","t2cl","t2s","TEST_INVALID_TEMPLATE_JSON","TEST_TEMPLATE_JSON","build_test_template","legacy","mmio","persist","BusError","COM_EVT_1_3_GSI","COM_EVT_2_4_GSI","EventFd","I8042_KDB_DATA_REGISTER_ADDRESS","I8042_KDB_DATA_REGISTER_SIZE","KBD_EVT_GSI","LegacyDeviceError","PortIODeviceManager","SERIAL_PORT_ADDRESSES","SERIAL_PORT_SIZE","_DERIVE_Display_FOR_LegacyDeviceError","as_any","as_any","as_mut_any","as_mut_any","borrow","borrow","borrow_mut","borrow_mut","com_evt_1_3","com_evt_2_4","fmt","fmt","fmt","from","from","from","from","i8042","into","into","io_bus","kbd_evt","new","register_devices","stdio_serial","to_string","try_from","try_from","try_into","try_into","type_id","type_id","Allocator","BusInsert","Cmdline","DeviceNotFound","InternalDeviceError","InvalidDeviceType","InvalidIrqConfig","MMIODeviceInfo","MMIODeviceManager","MMIO_LEN","MmioError","RegisterIoEvent","RegisterIrqFd","_DERIVE_Display_FOR_MmioError","add_virtio_device_to_cmdline","addr","address_allocator","allocate_mmio_resources","as_any","as_any","as_any","as_mut_any","as_mut_any","as_mut_any","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bus","clone","clone_into","deserialize","eq","fmt","fmt","fmt","fmt","for_each_device","for_each_virtio_device","from","from","from","get_device","get_device_info","id_to_dev_info","into","into","into","irq_allocator","irqs","kick_devices","len","new","register_mmio_boot_timer","register_mmio_device","register_mmio_virtio","register_mmio_virtio_for_boot","restore","save","serialize","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","version","with_virtio_device_with_id","Balloon","Balloon","ConnectedBalloonState","ConnectedEntropyState","ConnectedNetState","ConnectedVhostUserBlockState","ConnectedVirtioBlockState","ConnectedVsockState","DeviceManager","DevicePersistError","DeviceStates","Entropy","Entropy","MMIODevManagerConstructorArgs","MmdsConfig","MmdsVersionState","MmioTransport","Net","Network","SharedDeviceType","V1","V2","VhostUserBlock","VhostUserBlock","VirtioBlock","VirtioBlock","Vsock","Vsock","VsockUnixBackend","_DERIVE_Display_FOR_DevicePersistError","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","balloon_device","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","de_vhost_user_block","default","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","device_id","device_id","device_id","device_id","device_id","device_id","device_info","device_info","device_info","device_info","device_info","device_info","device_state","device_state","device_state","device_state","device_state","device_state","entropy_device","eq","event_manager","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","for_each_restored_device","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","instance_id","into","into","into","into","into","into","into","into","into","into","into","mem","mmds_version","net_devices","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","source","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","transport_state","transport_state","transport_state","transport_state","transport_state","transport_state","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","version","version","version","version","version","version","version","version","vhost_user_block_devices","virtio_block_devices","vm","vm_resources","vsock_device","Bus","BusDevice","BusError","DeviceError","FailedReadTap","FailedSignalingIrq","IoError","MalformedDescriptor","MalformedPayload","QueueError","VsockError","_DERIVE_Display_FOR_DeviceError","as_any","as_mut_any","borrow","borrow_mut","bus","fmt","fmt","from","into","legacy","pseudo","report_net_event_fail","to_string","try_from","try_into","type_id","virtio","BootTimer","Bus","BusDevice","BusError","BusRange","I8042Device","MmioTransport","Overlap","Serial","_DERIVE_Display_FOR_BusError","as_any","as_any","as_any","as_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","boot_timer_mut","boot_timer_ref","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","default","devices","eq","first_before","fmt","fmt","fmt","fmt","fmt","from","from","from","from","get_device","i8042_device_mut","i8042_device_ref","init","insert","into","into","into","into","mmio_transport_mut","mmio_transport_ref","new","partial_cmp","process","read","read","serial_mut","serial_ref","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","write","write","EventFdTrigger","I8042Device","I8042DeviceError","IER_RDA_BIT","IER_RDA_OFFSET","InternalBufferFull","KbdInterruptDisabled","KbdInterruptFailure","SerialDevice","SerialEventsWrapper","SerialWrapper","as_any","as_mut_any","bhead","borrow","borrow_mut","btail","buf","cmd","control","deref","flush_metrics","fmt","from","get_event","i8042","into","kbd_interrupt_evt","new","outp","reset_evt","serial","status","trigger","try_clone","try_from","try_into","type_id","BUF_SIZE","CB_KBD_INT","CB_POST_OK","CMD_READ_CTR","CMD_READ_OUTP","CMD_RESET_CPU","CMD_WRITE_CTR","CMD_WRITE_OUTP","I8042Device","I8042DeviceMetrics","I8042Error","InternalBufferFull","KEY_ALT","KEY_CTRL","KEY_DEL","KbdInterruptDisabled","KbdInterruptFailure","METRICS","OFS_DATA","OFS_STATUS","SB_I8042_CMD_DATA","SB_KBD_ENABLED","SB_OUT_DATA_AVAIL","_DERIVE_Display_FOR_I8042Error","as_any","as_any","as_any","as_mut_any","as_mut_any","as_mut_any","bhead","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","btail","buf","buf_len","bus_read","bus_write","cmd","control","error_count","flush_buf","fmt","fmt","fmt","fmt","from","from","from","into","into","into","kbd_interrupt_evt","missed_read_count","missed_write_count","new","new","outp","pop_byte","push_byte","read_count","reset_count","reset_evt","serialize","status","to_string","trigger_ctrl_alt_del","trigger_kbd_interrupt","trigger_key","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write_count","IER_RDA_BIT","IER_RDA_OFFSET","METRICS","RawIOError","RawIOHandler","Serial","SerialDevice","SerialDeviceMetrics","SerialEventsWrapper","SerialOut","SerialWrapper","Sink","Stdout","_DERIVE_Display_FOR_RawIOError","as_any","as_any","as_any","as_any","as_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buffer_read","buffer_ready_event_fd","buffer_ready_evt_fd","bus_read","bus_write","consume_buffer_ready_event","error_count","flush","flush_count","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","handle_ewouldblock","in_buffer_empty","init","input","input","into","into","into","into","into","is_fifo","missed_read_count","missed_write_count","new","out_byte","process","raw_input","read_count","recv_bytes","serial","serial","serial_input_fd","serialize","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","tx_lost_byte","type_id","type_id","type_id","type_id","type_id","write","write_count","BootTimer","boot_timer","start_ts","BootTimer","MAGIC_VALUE_SIGNAL_GUEST_BOOT_COMPLETE","as_any","as_mut_any","borrow","borrow_mut","bus_read","bus_write","fmt","from","into","new","start_ts","try_from","try_into","type_id","ActivateError","AsAny","BadActivate","EpollCtl","NOTIFY_REG_OFFSET","TYPE_BALLOON","TYPE_BLOCK","TYPE_NET","TYPE_RNG","VhostUser","_DERIVE_Display_FOR_ActivateError","as_any","as_any","as_mut_any","as_mut_any","balloon","block_common","borrow","borrow_mut","device","device_status","fmt","fmt","from","gen","into","iovec","mmio","net","persist","queue","rng","to_string","try_from","try_into","type_id","vhost_user","vhost_user_block","vhost_user_metrics","virtio_block","vsock","Activate","AddressTranslation","BALLOON_CONFIG_SPACE_SIZE","BALLOON_DEV_ID","BALLOON_NUM_QUEUES","BALLOON_QUEUE_SIZES","Balloon","BalloonConfig","BalloonError","BalloonStats","DEFLATE_INDEX","DeviceNotActive","DeviceNotFound","EventFd","GuestMemory","INFLATE_INDEX","InterruptError","MAX_PAGES_IN_DESC","MAX_PAGE_COMPACT_BUFFER","MIB_TO_4K_PAGES","MadviseFail","MalformedDescriptor","MalformedPayload","MalformedRange","MmapFail","Queue","QueueRestoreError","RegionNotFound","RemoveMemoryRegion","RemoveRegionError","STATS_INDEX","StatisticsDisabled","StatisticsStateChange","Timer","TooManyPagesRequested","VIRTIO_BALLOON_F_DEFLATE_ON_OOM","VIRTIO_BALLOON_F_STATS_VQ","VIRTIO_BALLOON_PFN_SHIFT","VIRTIO_BALLOON_S_AVAIL","VIRTIO_BALLOON_S_CACHES","VIRTIO_BALLOON_S_HTLB_PGALLOC","VIRTIO_BALLOON_S_HTLB_PGFAIL","VIRTIO_BALLOON_S_MAJFLT","VIRTIO_BALLOON_S_MEMFREE","VIRTIO_BALLOON_S_MEMTOT","VIRTIO_BALLOON_S_MINFLT","VIRTIO_BALLOON_S_SWAP_IN","VIRTIO_BALLOON_S_SWAP_OUT","_DERIVE_Display_FOR_BalloonError","_DERIVE_Display_FOR_RemoveRegionError","as_any","as_any","as_mut_any","as_mut_any","borrow","borrow","borrow_mut","borrow_mut","device","event_handler","fmt","fmt","fmt","fmt","from","from","into","into","metrics","persist","report_balloon_event_fail","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","util","Balloon","BalloonConfig","BalloonStat","BalloonStats","ConfigSpace","SIZE_OF_STAT","SIZE_OF_U32","acked_features","acked_features","activate","activate_evt","actual_mib","actual_pages","actual_pages","amount_mib","as_any","as_any","as_any","as_any","as_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","avail_features","avail_features","available_memory","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","config","config_space","default","default","default","default","deflate_on_oom","deflate_on_oom","device_state","device_type","disk_caches","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","free_memory","from","from","from","from","from","hugetlb_allocations","hugetlb_failures","id","init","interrupt_evt","interrupt_status","into","into","into","into","into","irq_trigger","is_activated","latest_stats","latest_stats","major_faults","mib_to_pages","minor_faults","new","num_pages","num_pages","pages_to_mib","pfn_buffer","process","process_activate_event","process_deflate_queue","process_deflate_queue_event","process_inflate","process_inflate_queue_event","process_stats_queue","process_stats_queue_event","process_stats_timer_event","process_virtio_queues","queue_events","queue_evts","queues","queues","queues_mut","read_config","register_activate_event","register_runtime_events","restore","restored","save","serialize","serialize","set_acked_features","set_stats_desc_index","signal_used_queue","size_mb","stats_desc_index","stats_enabled","stats_polling_interval_s","stats_polling_interval_s","stats_polling_interval_s","stats_timer","swap_in","swap_out","tag","target_mib","target_pages","to_owned","to_owned","to_owned","to_owned","total_memory","trigger_stats_update","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","update_size","update_stats_polling_interval","update_timer_state","update_with_stat","val","write_config","BalloonDeviceMetrics","METRICS","activate_fails","as_any","as_mut_any","borrow","borrow_mut","deflate_count","event_fails","flush_metrics","fmt","from","inflate_count","into","new","serialize","stats_update_fails","stats_updates_count","try_from","try_into","type_id","BalloonConfigSpaceState","BalloonConstructorArgs","BalloonState","BalloonStatsState","actual_pages","as_any","as_any","as_any","as_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","available_memory","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","config_space","create_stats","deserialize","deserialize","deserialize","disk_caches","fmt","fmt","fmt","fmt","free_memory","from","from","from","from","from_stats","hugetlb_allocations","hugetlb_failures","into","into","into","into","latest_stats","major_faults","mem","minor_faults","num_pages","serialize","serialize","serialize","stats_desc_index","stats_polling_interval_s","swap_in","swap_out","to_owned","to_owned","to_owned","total_memory","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","version","version","version","virtio_state","compact_page_frame_numbers","remove_range","CacheType","Unsafe","Writeback","as_any","as_mut_any","borrow","borrow_mut","clone","clone_into","default","deserialize","deserialize","eq","fmt","from","into","serialize","serialize","to_owned","try_from","try_into","type_id","version","Activated","Config","DeviceState","Inactive","IrqTrigger","IrqType","VirtioDevice","Vring","ack_features_by_page","acked_features","activate","as_any","as_any","as_any","as_mut_any","as_mut_any","as_mut_any","avail_features","avail_features_by_page","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","device_type","fmt","fmt","fmt","fmt","from","from","from","has_feature","interrupt_evt","interrupt_status","into","into","into","irq_evt","irq_status","is_activated","is_activated","mem","new","queue_events","queues","queues_mut","read_config","reset","set_acked_features","trigger_irq","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write_config","ACKNOWLEDGE","DRIVER","DRIVER_OK","FAILED","FEATURES_OK","INIT","virtio_blk","virtio_net","virtio_ring","virtio_rng","VIRTIO_BLK_F_BARRIER","VIRTIO_BLK_F_BLK_SIZE","VIRTIO_BLK_F_CONFIG_WCE","VIRTIO_BLK_F_FLUSH","VIRTIO_BLK_F_GEOMETRY","VIRTIO_BLK_F_MQ","VIRTIO_BLK_F_RO","VIRTIO_BLK_F_SCSI","VIRTIO_BLK_F_SEG_MAX","VIRTIO_BLK_F_SIZE_MAX","VIRTIO_BLK_F_TOPOLOGY","VIRTIO_BLK_F_WCE","VIRTIO_BLK_ID_BYTES","VIRTIO_BLK_S_IOERR","VIRTIO_BLK_S_OK","VIRTIO_BLK_S_UNSUPP","VIRTIO_BLK_T_BARRIER","VIRTIO_BLK_T_FLUSH","VIRTIO_BLK_T_GET_ID","VIRTIO_BLK_T_IN","VIRTIO_BLK_T_OUT","VIRTIO_BLK_T_SCSI_CMD","VIRTIO_F_ANY_LAYOUT","VIRTIO_F_IOMMU_PLATFORM","VIRTIO_F_NOTIFY_ON_EMPTY","VIRTIO_F_VERSION_1","VIRTIO_F_ANY_LAYOUT","VIRTIO_F_IOMMU_PLATFORM","VIRTIO_F_NOTIFY_ON_EMPTY","VIRTIO_F_VERSION_1","VIRTIO_NET_F_CSUM","VIRTIO_NET_F_CTRL_GUEST_OFFLOADS","VIRTIO_NET_F_CTRL_MAC_ADDR","VIRTIO_NET_F_CTRL_RX","VIRTIO_NET_F_CTRL_RX_EXTRA","VIRTIO_NET_F_CTRL_VLAN","VIRTIO_NET_F_CTRL_VQ","VIRTIO_NET_F_GSO","VIRTIO_NET_F_GUEST_ANNOUNCE","VIRTIO_NET_F_GUEST_CSUM","VIRTIO_NET_F_GUEST_ECN","VIRTIO_NET_F_GUEST_TSO4","VIRTIO_NET_F_GUEST_TSO6","VIRTIO_NET_F_GUEST_UFO","VIRTIO_NET_F_HOST_ECN","VIRTIO_NET_F_HOST_TSO4","VIRTIO_NET_F_HOST_TSO6","VIRTIO_NET_F_HOST_UFO","VIRTIO_NET_F_MAC","VIRTIO_NET_F_MQ","VIRTIO_NET_F_MRG_RXBUF","VIRTIO_NET_F_MTU","VIRTIO_NET_F_STATUS","__u16","__u8","__virtio16","as_any","as_mut_any","borrow","borrow_mut","clone","clone_into","csum_offset","csum_start","default","eq","flags","fmt","from","gso_size","gso_type","hdr_len","into","num_buffers","to_owned","try_from","try_into","type_id","virtio_net_hdr_v1","VIRTIO_RING_F_EVENT_IDX","VIRTIO_F_ACCESS_PLATFORM","VIRTIO_F_ANY_LAYOUT","VIRTIO_F_IOMMU_PLATFORM","VIRTIO_F_NOTIFY_ON_EMPTY","VIRTIO_F_ORDER_PLATFORM","VIRTIO_F_RING_PACKED","VIRTIO_F_SR_IOV","VIRTIO_F_VERSION_1","GuestMemory","IoVecBuffer","IoVecBufferMut","IoVecError","IoVecVec","ReadOnlyDescriptor","WriteOnlyDescriptor","_DERIVE_Display_FOR_IoVecError","as_any","as_any","as_any","as_iovec_ptr","as_mut_any","as_mut_any","as_mut_any","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","capacity","data","fmt","fmt","fmt","fmt","from","from","from","from","from_descriptor_chain","from_descriptor_chain","into","into","into","iovec_count","len","len","len","len","read_exact_volatile_at","read_volatile_at","source","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vecs","vecs","write_all_volatile_at","write_volatile_at","MMIO_MAGIC_VALUE","MMIO_VERSION","MmioTransport","VENDOR_ID","VIRTIO_MMIO_INT_CONFIG","VIRTIO_MMIO_INT_VRING","acked_features_select","are_queues_valid","as_any","as_mut_any","borrow","borrow_mut","bus_read","bus_write","check_device_status","config_generation","device","device","device_status","features_select","fmt","from","interrupt_status","into","is_vhost_user","locked_device","mem","new","queue_select","reset","restore","save","set_device_status","try_from","try_into","type_id","update_queue_field","with_queue","with_queue_mut","EventFd","IO","IfreqExecuteError","InvalidIfname","MAX_BUFFER_SIZE","NET_NUM_QUEUES","NET_QUEUE_SIZES","Net","NetError","NetQueue","OpenTun","RX_INDEX","Rx","SetOffloadFlags","SetSizeOfVnetHdr","TX_INDEX","Tap","TapError","TapOpen","TapSetOffload","TapSetVnetHdrSize","Tx","VnetHeaderMissing","_DERIVE_Display_FOR_NetError","as_any","as_any","as_mut_any","as_mut_any","borrow","borrow","borrow_mut","borrow_mut","device","event_handler","fmt","fmt","fmt","from","from","gen","if_name","into","into","metrics","persist","tap","tap_file","to_string","try_from","try_from","try_into","try_into","type_id","type_id","AddUsed","ConfigSpace","DescriptorChainTooSmall","EmptyQueue","FRAME_HEADER_MAX_LEN","FrontendError","GuestMemory","Net","ReadOnlyDescriptor","_DERIVE_Display_FOR_FrontendError","acked_features","acked_features","activate","activate_evt","as_any","as_any","as_any","as_mut_any","as_mut_any","as_mut_any","avail_features","avail_features","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","config_space","configure_mmds_network_stack","default","device_state","device_type","disable_mmds_network_stack","do_write_frame_to_guest","fmt","fmt","fmt","fmt","frame_bytes_from_buf","frame_bytes_from_buf_mut","frame_hdr_len","from","from","from","guest_mac","guest_mac","guest_mac","handle_deferred_frame","id","id","iface_name","init","init_vnet_hdr","interrupt_evt","interrupt_status","into","into","into","irq_trigger","is_activated","metrics","mmds_ns","mmds_ns","new","new_with_tap","patch_rate_limiters","process","process_activate_event","process_rx","process_rx_queue_event","process_rx_rate_limiter_event","process_tap_rx_event","process_tx","process_tx_queue_event","process_tx_rate_limiter_event","process_virtio_queues","queue_events","queue_evts","queues","queues","queues_mut","rate_limited_rx_single_frame","rate_limiter_consume_op","rate_limiter_replenish_op","read_config","read_from_mmds_or_tap","read_tap","register_activate_event","register_runtime_events","restore","resume_rx","rx_bytes_read","rx_deferred_frame","rx_frame_buf","rx_rate_limiter","rx_rate_limiter","save","set_acked_features","signal_used_queue","tap","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","tx_frame_headers","tx_rate_limiter","tx_rate_limiter","type_id","type_id","type_id","vnet_hdr_len","write_config","write_frame_to_guest","write_tap","write_to_descriptor_chain","write_to_mmds_or_tap","if_tun","iff","sockios","ETH_ALEN","ETH_DATA_LEN","ETH_FCS_LEN","ETH_FRAME_LEN","ETH_HLEN","ETH_MAX_MTU","ETH_MIN_MTU","ETH_P_1588","ETH_P_8021AD","ETH_P_8021AH","ETH_P_8021Q","ETH_P_80221","ETH_P_802_2","ETH_P_802_3","ETH_P_802_3_MIN","ETH_P_802_EX1","ETH_P_AARP","ETH_P_AF_IUCV","ETH_P_ALL","ETH_P_AOE","ETH_P_ARCNET","ETH_P_ARP","ETH_P_ATALK","ETH_P_ATMFATE","ETH_P_ATMMPOA","ETH_P_AX25","ETH_P_BATMAN","ETH_P_BPQ","ETH_P_CAIF","ETH_P_CAN","ETH_P_CANFD","ETH_P_CONTROL","ETH_P_CUST","ETH_P_DDCMP","ETH_P_DEC","ETH_P_DIAG","ETH_P_DNA_DL","ETH_P_DNA_RC","ETH_P_DNA_RT","ETH_P_DSA","ETH_P_ECONET","ETH_P_EDSA","ETH_P_ERSPAN","ETH_P_FCOE","ETH_P_FIP","ETH_P_HDLC","ETH_P_HSR","ETH_P_IBOE","ETH_P_IEEE802154","ETH_P_IEEEPUP","ETH_P_IEEEPUPAT","ETH_P_IFE","ETH_P_IP","ETH_P_IPV6","ETH_P_IPX","ETH_P_IRDA","ETH_P_LAT","ETH_P_LINK_CTL","ETH_P_LOCALTALK","ETH_P_LOOP","ETH_P_LOOPBACK","ETH_P_MACSEC","ETH_P_MAP","ETH_P_MOBITEX","ETH_P_MPLS_MC","ETH_P_MPLS_UC","ETH_P_MVRP","ETH_P_NCSI","ETH_P_NSH","ETH_P_PAE","ETH_P_PAUSE","ETH_P_PHONET","ETH_P_PPPTALK","ETH_P_PPP_DISC","ETH_P_PPP_MP","ETH_P_PPP_SES","ETH_P_PRP","ETH_P_PUP","ETH_P_PUPAT","ETH_P_QINQ1","ETH_P_QINQ2","ETH_P_QINQ3","ETH_P_RARP","ETH_P_SCA","ETH_P_SLOW","ETH_P_SNAP","ETH_P_TDLS","ETH_P_TEB","ETH_P_TIPC","ETH_P_TRAILER","ETH_P_TR_802_2","ETH_P_TSN","ETH_P_WAN_PPP","ETH_P_WCCP","ETH_P_X25","ETH_P_XDSA","ETH_TLEN","ETH_ZLEN","IFF_MULTI_QUEUE","IFF_NO_PI","IFF_TAP","IFF_VNET_HDR","TUN_FLT_ALLMULTI","TUN_F_CSUM","TUN_F_TSO4","TUN_F_TSO6","TUN_F_TSO_ECN","TUN_F_UFO","TUN_PKT_STRIP","TUN_READQ_SIZE","TUN_TX_TIMESTAMP","TUN_TYPE_MASK","__u16","__u32","__u8","as_any","as_any","as_mut_any","as_mut_any","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","code","default","default","eq","eq","filter","fmt","fmt","from","from","into","into","jf","jt","k","len","sock_filter","sock_fprog","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","IFALIASZ","IFHWADDRLEN","IFNAMSIZ","IF_GET_IFACE","IF_GET_PROTO","IF_IFACE_E1","IF_IFACE_SYNC_SERIAL","IF_IFACE_T1","IF_IFACE_V24","IF_IFACE_V35","IF_IFACE_X21","IF_IFACE_X21D","IF_LINK_MODE_DEFAULT","IF_LINK_MODE_DORMANT","IF_OPER_DORMANT","IF_OPER_DOWN","IF_OPER_LOWERLAYERDOWN","IF_OPER_NOTPRESENT","IF_OPER_TESTING","IF_OPER_UNKNOWN","IF_OPER_UP","IF_PROTO_CISCO","IF_PROTO_FR","IF_PROTO_FR_ADD_ETH_PVC","IF_PROTO_FR_ADD_PVC","IF_PROTO_FR_DEL_ETH_PVC","IF_PROTO_FR_DEL_PVC","IF_PROTO_FR_ETH_PVC","IF_PROTO_FR_PVC","IF_PROTO_HDLC","IF_PROTO_HDLC_ETH","IF_PROTO_PPP","IF_PROTO_RAW","IF_PROTO_X25","_bindgen_ty_4","_bindgen_ty_5","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","base_addr","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cisco","cisco_proto","clock_rate","clock_rate","clock_type","clock_type","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","dce","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","dlci","dlci","dma","encoding","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fr","fr_proto","fr_proto_pvc","fr_proto_pvc_info","fr_pvc","fr_pvc_info","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","if_settings","if_settings__bindgen_ty_1","ifc_ifcu","ifc_len","ifconf","ifconf__bindgen_ty_1","ifcu_buf","ifcu_req","ifmap","ifr_ifrn","ifr_ifru","ifreq","ifreq__bindgen_ty_1","ifreq__bindgen_ty_2","ifrn_name","ifru_addr","ifru_broadaddr","ifru_data","ifru_dstaddr","ifru_flags","ifru_hwaddr","ifru_ivalue","ifru_map","ifru_mtu","ifru_netmask","ifru_newname","ifru_settings","ifru_slave","ifs_ifsu","interval","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","irq","lmi","loopback","loopback","master","mem_end","mem_start","n391","n392","n393","net_device_flags","net_device_flags_IFF_ALLMULTI","net_device_flags_IFF_AUTOMEDIA","net_device_flags_IFF_BROADCAST","net_device_flags_IFF_DEBUG","net_device_flags_IFF_DORMANT","net_device_flags_IFF_DYNAMIC","net_device_flags_IFF_ECHO","net_device_flags_IFF_LOOPBACK","net_device_flags_IFF_LOWER_UP","net_device_flags_IFF_MASTER","net_device_flags_IFF_MULTICAST","net_device_flags_IFF_NOARP","net_device_flags_IFF_NOTRAILERS","net_device_flags_IFF_POINTOPOINT","net_device_flags_IFF_PORTSEL","net_device_flags_IFF_PROMISC","net_device_flags_IFF_RUNNING","net_device_flags_IFF_SLAVE","net_device_flags_IFF_UP","parity","port","raw_hdlc","raw_hdlc_proto","sa_data","sa_family","sa_family_t","size","slot_map","sockaddr","sync","sync_serial_settings","t391","t392","te1","te1_settings","timeout","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","FIOGETOWN","FIOSETOWN","SIOCADDDLCI","SIOCADDMULTI","SIOCADDRT","SIOCATMARK","SIOCBONDCHANGEACTIVE","SIOCBONDENSLAVE","SIOCBONDINFOQUERY","SIOCBONDRELEASE","SIOCBONDSETHWADDR","SIOCBONDSLAVEINFOQUERY","SIOCBRADDBR","SIOCBRADDIF","SIOCBRDELBR","SIOCBRDELIF","SIOCDARP","SIOCDELDLCI","SIOCDELMULTI","SIOCDELRT","SIOCDEVPRIVATE","SIOCDIFADDR","SIOCDRARP","SIOCETHTOOL","SIOCGARP","SIOCGHWTSTAMP","SIOCGIFADDR","SIOCGIFBR","SIOCGIFBRDADDR","SIOCGIFCONF","SIOCGIFCOUNT","SIOCGIFDSTADDR","SIOCGIFENCAP","SIOCGIFFLAGS","SIOCGIFHWADDR","SIOCGIFINDEX","SIOCGIFMAP","SIOCGIFMEM","SIOCGIFMETRIC","SIOCGIFMTU","SIOCGIFNAME","SIOCGIFNETMASK","SIOCGIFPFLAGS","SIOCGIFSLAVE","SIOCGIFTXQLEN","SIOCGIFVLAN","SIOCGMIIPHY","SIOCGMIIREG","SIOCGPGRP","SIOCGRARP","SIOCGSKNS","SIOCGSTAMP","SIOCGSTAMPNS","SIOCOUTQNSD","SIOCPROTOPRIVATE","SIOCRTMSG","SIOCSARP","SIOCSHWTSTAMP","SIOCSIFADDR","SIOCSIFBR","SIOCSIFBRDADDR","SIOCSIFDSTADDR","SIOCSIFENCAP","SIOCSIFFLAGS","SIOCSIFHWADDR","SIOCSIFHWBROADCAST","SIOCSIFLINK","SIOCSIFMAP","SIOCSIFMEM","SIOCSIFMETRIC","SIOCSIFMTU","SIOCSIFNAME","SIOCSIFNETMASK","SIOCSIFPFLAGS","SIOCSIFSLAVE","SIOCSIFTXQLEN","SIOCSIFVLAN","SIOCSMIIREG","SIOCSPGRP","SIOCSRARP","SIOCWANDEV","SIOGIFINDEX","SOCK_IOC_TYPE","METRICS","NetDeviceMetrics","NetMetricsPerDevice","activate_fails","aggregate","alloc","as_any","as_any","as_mut_any","as_mut_any","borrow","borrow","borrow_mut","borrow_mut","cfg_fails","default","event_fails","flush_metrics","fmt","fmt","from","from","into","into","mac_address_updates","metrics","no_rx_avail_buffer","no_tx_avail_buffer","rx_bytes_count","rx_count","rx_event_rate_limiter_count","rx_fails","rx_packets_count","rx_partial_writes","rx_queue_event_count","rx_rate_limiter_throttled","rx_tap_event_count","serialize","tap_read_fails","tap_write_fails","try_from","try_from","try_into","try_into","tx_bytes_count","tx_count","tx_fails","tx_malformed_frames","tx_packets_count","tx_partial_reads","tx_queue_event_count","tx_rate_limiter_event_count","tx_rate_limiter_throttled","tx_spoofed_mac_count","type_id","type_id","CreateNet","CreateRateLimiter","NetConfigSpaceState","NetConstructorArgs","NetPersistError","NetState","NoMmdsDataStore","VirtioState","_DERIVE_Display_FOR_NetPersistError","as_any","as_any","as_any","as_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","config_space","de_guest_mac_v2","def_guest_mac_old","default","deserialize","deserialize","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","guest_mac","guest_mac_v2","id","into","into","into","into","mem","mmds","mmds_ns","rx_rate_limiter_state","serialize","serialize","source","tap_if_name","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","tx_rate_limiter_state","type_id","type_id","type_id","type_id","version","version","virtio_state","IFACE_NAME_MAX_LEN","IfReqBuilder","IfreqExecuteError","InvalidIfname","OpenTun","SetOffloadFlags","SetSizeOfVnetHdr","TUNSETIFF","TUNSETOFFLOAD","TUNSETVNETHDRSZ","TUNTAP","Tap","TapError","_DERIVE_Display_FOR_TapError","as_any","as_any","as_any","as_mut_any","as_mut_any","as_mut_any","as_raw_fd","as_raw_filelike","as_raw_socketlike","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build_terminated_if_name","clone","clone_into","execute","flags","flush","fmt","fmt","fmt","fmt","from","from","from","if_name","if_name","if_name_as_str","into","into","into","new","open_named","read","set_offload","set_vnet_hdr_size","tap_file","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write","write_iovec","InvalidInput","MmioTransportConstructorArgs","MmioTransportState","PersistError","QueueState","VirtioDeviceState","_DERIVE_Display_FOR_PersistError","acked_features","acked_features_select","activated","as_any","as_any","as_any","as_any","as_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","avail_features","avail_ring","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_queues_checked","clone","clone","clone","clone_into","clone_into","clone_into","config_generation","de_interrupt_status","default","desc_table","deserialize","deserialize","deserialize","device","device_status","device_type","eq","eq","eq","features_select","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_device","interrupt_status","interrupt_status_old","into","into","into","into","into","is_vhost_user","max_size","mem","next_avail","next_used","num_added","queue_select","queues","ready","serialize","serialize","serialize","size","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","used_ring","version","version","version","DescIndexOutOfBounds","Descriptor","DescriptorChain","DescriptorIterator","FIRECRACKER_MAX_QUEUE_SIZE","Queue","QueueError","UsedRing","VIRTQ_DESC_F_NEXT","VIRTQ_DESC_F_WRITE","_DERIVE_Display_FOR_QueueError","actual_size","add_used","addr","addr","as_any","as_any","as_any","as_any","as_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","avail_idx","avail_ring","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","checked_new","clone","clone","clone_into","clone_into","default","desc_table","desc_table","do_pop_unchecked","enable_notif_suppression","eq","flags","flags","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get_max_size","has_next","index","into","into","into","into","into","into_iter","into_iter","is_empty","is_layout_valid","is_valid","is_valid","is_write_only","len","len","len","max_size","mem","new","next","next","next","next_avail","next_descriptor","next_used","num_added","pop","pop_or_enable_notification","prepare_kick","queue_size","ready","restore","save","set_avail_event","size","source","to_owned","to_owned","to_string","try_enable_notification","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","ttl","type_id","type_id","type_id","type_id","type_id","undo_pop","used_event","used_ring","uses_notif_suppression","Entropy","EntropyError","RNG_NUM_QUEUES","RNG_QUEUE","device","event_handler","metrics","persist","ENTROPY_DEV_ID","Entropy","EntropyError","EventFd","GuestMemory","Random","_DERIVE_Display_FOR_EntropyError","acked_features","acked_features","activate","activate_event","activate_event","as_any","as_any","as_mut_any","as_mut_any","avail_features","avail_features","borrow","borrow","borrow_mut","borrow_mut","device_state","device_type","fmt","fmt","fmt","from","from","from","from","from","handle_one","id","init","interrupt_evt","interrupt_status","into","into","irq_trigger","is_activated","new","new_with_queues","process","process_activate_event","process_entropy_queue","process_entropy_queue_event","process_rate_limiter_event","process_virtio_queues","queue_events","queue_events","queues","queues","queues_mut","rate_limit_replenish_request","rate_limit_request","rate_limiter","rate_limiter","read_config","register_activate_event","register_runtime_events","restore","save","set_acked_features","set_acked_features","set_activated","set_avail_features","set_irq_status","signal_used_queue","source","to_string","try_from","try_from","try_into","try_into","type_id","type_id","write_config","EntropyDeviceMetrics","METRICS","activate_fails","as_any","as_mut_any","borrow","borrow_mut","entropy_bytes","entropy_event_count","entropy_event_fails","entropy_rate_limiter_throttled","flush_metrics","fmt","from","host_rng_fails","into","new","rate_limiter_event_count","serialize","try_from","try_into","type_id","CreateEntropy","EntropyConstructorArgs","EntropyPersistError","EntropyState","RestoreRateLimiter","VirtioState","_DERIVE_Display_FOR_EntropyPersistError","as_any","as_any","as_any","as_mut_any","as_mut_any","as_mut_any","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","deserialize","fmt","fmt","fmt","fmt","from","from","from","from","from","from","into","into","into","new","rate_limiter_state","serialize","source","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","version","virtio_state","AvailAddress","Connect","DescriptorTableAddress","UsedAddress","VhostUserError","VhostUserGetFeatures","VhostUserGetProtocolFeatures","VhostUserHandle","VhostUserHandleBackend","VhostUserHandleImpl","VhostUserMemoryRegion","VhostUserSetFeatures","VhostUserSetMemTable","VhostUserSetOwner","VhostUserSetProtocolFeatures","VhostUserSetVringAddr","VhostUserSetVringBase","VhostUserSetVringCall","VhostUserSetVringEnable","VhostUserSetVringKick","VhostUserSetVringNum","_DERIVE_Display_FOR_VhostUserError","as_any","as_any","as_mut_any","as_mut_any","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","fmt","fmt","fmt","from","from","from","from_stream","get_config","get_features","get_protocol_features","into","into","negotiate_features","new","set_config","set_features","set_features","set_hdr_flags","set_mem_table","set_owner","set_protocol_features","set_protocol_features","set_vring_addr","set_vring_base","set_vring_call","set_vring_enable","set_vring_kick","set_vring_num","setup_backend","socket_path","socket_path","source","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","update_mem_table","vu","vu","Config","EventFd","IrqTrigger","NUM_QUEUES","Persist","QUEUE_SIZE","Vhost","VhostUser","VhostUserBlockError","_DERIVE_Display_FOR_VhostUserBlockError","as_any","as_mut_any","borrow","borrow_mut","device","event_handler","fmt","fmt","from","into","persist","to_string","try_from","try_into","type_id","AVAILABLE_FEATURES","BLOCK_CONFIG_SPACE_SIZE","VhostUserBlock","VhostUserBlockConfig","VhostUserBlockImpl","acked_features","acked_features","acked_features","activate","activate_evt","activate_evt","as_any","as_any","as_mut_any","as_mut_any","avail_features","avail_features","avail_features","borrow","borrow","borrow_mut","borrow_mut","cache_type","cache_type","cache_type","config","config_space","config_space","config_update","device_state","device_state","device_type","drive_id","eq","fmt","fmt","from","from","id","id","init","interrupt_evt","interrupt_status","into","into","irq_trigger","irq_trigger","is_activated","is_root_device","metrics","metrics","new","partuuid","partuuid","partuuid","prepare_save","process","process_activate_event","process_activate_event","queue_events","queue_evts","queue_evts","queues","queues","queues","queues_mut","read_config","read_only","read_only","register_activate_event","register_activate_event","restore","root_device","root_device","save","set_acked_features","socket","try_from","try_from","try_from","try_into","try_into","type_id","type_id","vu_acked_protocol_features","vu_acked_protocol_features","vu_handle","vu_handle","write_config","VhostUserBlockConstructorArgs","VhostUserBlockState","as_any","as_any","as_mut_any","as_mut_any","borrow","borrow","borrow_mut","borrow_mut","cache_type","clone","clone_into","config_space","deserialize","fmt","fmt","from","from","id","into","into","mem","partuuid","root_device","serialize","socket_path","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","version","virtio_state","vu_acked_protocol_features","METRICS","VhostUserDeviceMetrics","VhostUserMetricsPerDevice","activate_fails","activate_time_us","alloc","as_any","as_any","as_mut_any","as_mut_any","borrow","borrow","borrow_mut","borrow_mut","cfg_fails","config_change_time_us","default","flush_metrics","fmt","from","from","init_time_us","into","into","metrics","serialize","try_from","try_from","try_into","try_into","type_id","type_id","BLOCK_CONFIG_SPACE_SIZE","BLOCK_NUM_QUEUES","BLOCK_QUEUE_SIZES","BackingFile","CacheType","Config","DescriptorChainTooShort","DescriptorLengthTooSmall","EventFd","FileEngine","GetFileMetadata","GuestMemory","IO_URING_NUM_ENTRIES","InvalidDataLength","InvalidOffset","IrqTrigger","Persist","RateLimiter","SECTOR_SHIFT","SECTOR_SIZE","UnexpectedReadOnlyDescriptor","UnexpectedWriteOnlyDescriptor","VirtioBlock","VirtioBlockError","_DERIVE_Display_FOR_VirtioBlockError","as_any","as_mut_any","borrow","borrow_mut","device","event_handler","fmt","fmt","from","into","io","metrics","persist","request","to_string","try_from","try_into","type_id","Async","DiskProperties","FileEngineType","Sync","VirtioBlock","VirtioBlockConfig","acked_features","acked_features","activate","activate_evt","add_used_descriptor","as_any","as_any","as_any","as_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","avail_features","avail_features","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_device_id","build_disk_image_id","cache_type","cache_type","clone","clone_into","config","config_space","default","deserialize","deserialize","device_state","device_type","disk","drain_and_flush","drive_id","drop","eq","eq","file_engine","file_engine_type","file_engine_type","file_path","file_size","fmt","fmt","fmt","fmt","from","from","from","from","from","id","image_id","init","interrupt_evt","interrupt_status","into","into","into","into","irq_trigger","is_activated","is_io_engine_throttled","is_read_only","is_root_device","is_supported","metrics","new","new","nsectors","open_file","partuuid","partuuid","path_on_host","prepare_save","process","process_activate_event","process_async_completion_event","process_async_completion_queue","process_queue","process_queue_event","process_rate_limiter_event","process_virtio_queues","queue_events","queue_evts","queues","queues","queues_mut","rate_limiter","rate_limiter","read_config","read_only","register_activate_event","register_runtime_events","restore","root_device","save","serialize","serialize","set_acked_features","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unwrap_async_file_engine_or_return","update","update_disk_image","update_rate_limiter","virtio_block_config_space","write_config","Async","Async","AsyncFileEngine","AsyncIoError","BlockIoError","Executed","FileEngine","FileEngineOk","GetKernelVersion","Submitted","Sync","Sync","SyncFileEngine","SyncIoError","UnsupportedEngine","UserDataError","UserDataOk","_DERIVE_Display_FOR_BlockIoError","as_any","as_any","as_any","as_any","as_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","async_io","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","count","drain","drain_and_flush","eq","eq","eq","error","flush","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_file","into","into","into","into","into","is_throttling_err","read","sync_io","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","update_file_path","user_data","user_data","write","AsyncFileEngine","AsyncIoError","EventFd","GuestMemory","IO","IoUring","Submit","SyncAll","WrappedUserData","_DERIVE_Display_FOR_AsyncIoError","addr","as_any","as_any","as_any","as_mut_any","as_mut_any","as_mut_any","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","completion_evt","completion_evt","do_pop","drain","drain_and_flush","file","fmt","fmt","fmt","fmt","from","from","from","from_file","into","into","into","kick_submission_queue","mark_dirty_mem_and_unwrap","new","new_ring","new_with_dirty_tracking","phantom","pop","push_flush","push_read","push_write","ring","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update_file","user_data","Flush","Seek","SyncAll","SyncFileEngine","SyncIoError","Transfer","_DERIVE_Display_FOR_SyncIoError","as_any","as_any","as_mut_any","as_mut_any","borrow","borrow","borrow_mut","borrow_mut","file","flush","fmt","fmt","fmt","from","from","from_file","into","into","read","to_string","try_from","try_from","try_into","try_into","type_id","type_id","update_file","write","BlockDeviceMetrics","BlockMetricsPerDevice","METRICS","activate_fails","aggregate","alloc","as_any","as_any","as_mut_any","as_mut_any","borrow","borrow","borrow_mut","borrow_mut","cfg_fails","default","event_fails","execute_fails","flush_count","flush_metrics","fmt","fmt","from","from","into","into","invalid_reqs_count","io_engine_throttled_events","metrics","no_avail_buffer","queue_event_count","rate_limiter_event_count","rate_limiter_throttled_events","read_bytes","read_count","serialize","try_from","try_from","try_into","try_into","type_id","type_id","update_count","update_fails","write_bytes","write_count","Async","FileEngineTypeState","Sync","VirtioBlockConstructorArgs","VirtioBlockState","as_any","as_any","as_any","as_mut_any","as_mut_any","as_mut_any","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cache_type","clone","clone","clone_into","clone_into","default","default_cache_type_flush","deserialize","deserialize","disk_path","eq","file_engine_type","fmt","fmt","fmt","from","from","from","from","id","into","into","into","mem","partuuid","rate_limiter_state","root_device","serialize","serialize","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","version","version","virtio_state","Executed","FileEngine","FinishedRequest","Flush","GetDeviceID","GetId","In","IoErr","IoErr","Ok","Out","PartialTransfer","PendingRequest","ProcessingResult","Request","RequestHeader","RequestType","Status","Submitted","Throttled","Unsupported","Unsupported","VIRTIO_BLK_ID_BYTES","VIRTIO_BLK_S_IOERR","VIRTIO_BLK_S_OK","VIRTIO_BLK_S_UNSUPP","VIRTIO_BLK_T_FLUSH","VIRTIO_BLK_T_GET_ID","VIRTIO_BLK_T_IN","VIRTIO_BLK_T_OUT","_reserved","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","data_addr","data_len","data_len","default","desc_idx","desc_idx","eq","eq","finish","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_data","into","into","into","into","into","into","into","into","new","num_bytes_to_mem","offset","parse","process","rate_limit","read_from","request_type","sector","sector","status_addr","status_addr","to_owned","to_owned","to_pending_request","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type","type","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","write_status_and_finish","completed","expected","err","num_bytes_to_mem","num_bytes_to_mem","op","DescChainTooShortForHeader","DescChainTooShortForPacket","EmptyQueue","EpollAdd","EpollFdCreate","EventFd","GuestMemoryBounds","GuestMemoryMmap","InvalidPktLen","InvalidPortRequest","NoData","PktBufMissing","TYPE_VSOCK","TooManyConnections","UnixAccept","UnixBind","UnixConnect","UnixRead","UnreadableDescriptor","UnwritableDescriptor","VSOCK_DEV_ID","VirtioState","Vsock","VsockBackend","VsockChannel","VsockEpollListener","VsockError","VsockUdsBackend","VsockUnixBackend","VsockUnixBackendError","_DERIVE_Display_FOR_VsockError","acked_features","activate_evt","as_any","as_mut_any","avail_features","backend","borrow","borrow_mut","cid","cid","conn_map","csm","defs","device","device_state","epoll","event_handler","fmt","fmt","from","from","get_polled_evset","has_pending_rx","host_sock","host_sock_path","into","irq_trigger","killq","listener_map","local_port_last","local_port_set","metrics","notify","packet","persist","queue_events","queues","recv_pkt","rxq","send_pkt","to_string","try_from","try_into","type_id","unix","ConnState","CreditUpdate","Established","Killed","LocalClosed","LocalInit","PeerClosed","PeerInit","PendingRx","PendingRxSet","Request","Response","Rst","Rw","StreamWrite","TxBufFlush","TxBufFull","VsockConnection","VsockConnectionBackend","VsockCsmError","_DERIVE_Display_FOR_VsockCsmError","as_any","as_any","as_any","as_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","connection","contains","data","defs","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","insert","into","into","into","into","into_mask","is_empty","remove","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","txbuf","type_id","type_id","type_id","type_id","VsockConnection","VsockConnectionBackend","as_any","as_mut_any","as_raw_fd","as_raw_filelike","as_raw_socketlike","borrow","borrow_mut","expiry","expiry","fmt","from","fwd_cnt","get_polled_evset","has_expired","has_pending_rx","init_pkt","into","kill","last_fwd_cnt_to_peer","local_cid","local_port","need_credit_update_from_peer","new_local_init","new_peer_init","notify","peer_avail_credit","peer_buf_alloc","peer_cid","peer_fwd_cnt","peer_needs_credit_update","peer_port","pending_rx","recv_pkt","rx_cnt","send_bytes","send_bytes_raw","send_pkt","state","state","stream","try_from","try_into","tx_buf","type_id","will_expire","CONN_CREDIT_UPDATE_THRESHOLD","CONN_REQUEST_TIMEOUT_MS","CONN_SHUTDOWN_TIMEOUT_MS","CONN_TX_BUF_SIZE","SIZE","TxBuf","as_any","as_mut_any","borrow","borrow_mut","data","flush_to","fmt","from","head","into","is_empty","len","new","push","tail","try_from","try_into","type_id","write_volatile","MAX_PKT_BUF_SIZE","VSOCK_DEV_ID","VSOCK_NUM_QUEUES","VSOCK_QUEUE_SIZES","uapi","VIRTIO_F_IN_ORDER","VIRTIO_F_VERSION_1","VIRTIO_ID_VSOCK","VSOCK_FLAGS_SHUTDOWN_RCV","VSOCK_FLAGS_SHUTDOWN_SEND","VSOCK_HOST_CID","VSOCK_OP_CREDIT_REQUEST","VSOCK_OP_CREDIT_UPDATE","VSOCK_OP_REQUEST","VSOCK_OP_RESPONSE","VSOCK_OP_RST","VSOCK_OP_RW","VSOCK_OP_SHUTDOWN","VSOCK_TYPE_STREAM","AVAIL_FEATURES","EVQ_INDEX","RXQ_INDEX","TXQ_INDEX","VIRTIO_VSOCK_EVENT_TRANSPORT_RESET","Vsock","acked_features","acked_features","activate","activate_evt","as_any","as_mut_any","avail_features","avail_features","backend","backend","borrow","borrow_mut","cid","cid","device_state","device_type","fmt","from","handle_activate_event","handle_evq_event","handle_rxq_event","handle_txq_event","id","init","interrupt_evt","interrupt_status","into","irq_trigger","is_activated","new","notify_backend","process","process_rx","process_tx","queue_events","queue_events","queues","queues","queues_mut","read_config","register_activate_event","register_runtime_events","restore","save","send_transport_reset_event","set_acked_features","signal_used_queue","try_from","try_into","type_id","with_queues","write_config","METRICS","VsockDeviceMetrics","activate_fails","as_any","as_mut_any","borrow","borrow_mut","cfg_fails","conn_event_fails","conns_added","conns_killed","conns_removed","ev_queue_event_fails","flush_metrics","fmt","from","into","killq_resync","muxer_event_fails","new","rx_bytes_count","rx_packets_count","rx_queue_event_count","rx_queue_event_fails","rx_read_fails","serialize","try_from","try_into","tx_bytes_count","tx_flush_fails","tx_packets_count","tx_queue_event_count","tx_queue_event_fails","tx_write_fails","type_id","Rx","Tx","VSOCK_PKT_HDR_SIZE","VsockPacket","VsockPacketBuffer","VsockPacketHeader","as_any","as_any","as_any","as_mut_any","as_mut_any","as_mut_any","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","buf_alloc","buf_alloc","buf_size","buffer","clone","clone_into","commit_hdr","default","dst_cid","dst_cid","dst_port","dst_port","flags","flags","fmt","fmt","fmt","from","from","from","from_rx_virtq_head","from_tx_virtq_head","fwd_cnt","fwd_cnt","hdr","hdr","into","into","into","len","len","op","op","read_at_offset_from","set_buf_alloc","set_dst_cid","set_dst_port","set_flag","set_flags","set_fwd_cnt","set_len","set_op","set_src_cid","set_src_port","set_type","src_cid","src_cid","src_port","src_port","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_","type_","type_id","type_id","type_id","write_from_offset_to","Uds","VsockBackendState","VsockConstructorArgs","VsockFrontendState","VsockState","VsockUdsConstructorArgs","VsockUdsState","as_any","as_any","as_any","as_any","as_any","as_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","backend","backend","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cid","cid","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","deserialize","deserialize","deserialize","deserialize","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","frontend","into","into","into","into","into","into","mem","path","serialize","serialize","serialize","serialize","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","version","version","version","version","virtio_state","EpollAdd","EpollFdCreate","InvalidPortRequest","MuxerConnection","TooManyConnections","UnixAccept","UnixBind","UnixConnect","UnixRead","VsockUnixBackend","VsockUnixBackendError","_DERIVE_Display_FOR_VsockUnixBackendError","as_any","as_mut_any","borrow","borrow_mut","defs","expiry","fmt","fmt","from","fwd_cnt","into","last_fwd_cnt_to_peer","local_cid","local_port","muxer","muxer_killq","muxer_rxq","peer_buf_alloc","peer_cid","peer_fwd_cnt","peer_port","pending_rx","rx_cnt","state","stream","to_string","try_from","try_into","tx_buf","type_id","MAX_CONNECTIONS","MUXER_KILLQ_SIZE","MUXER_RXQ_SIZE","ConnMapKey","ConnRx","Connection","EpollListener","HostSock","LocalStream","MuxerRx","RstPkt","VsockMuxer","add_connection","add_listener","allocate_local_port","apply_conn_mutation","as_any","as_any","as_any","as_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_raw_fd","as_raw_filelike","as_raw_socketlike","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cid","clone","clone","clone_into","clone_into","conn_map","enq_rst","epoll","eq","fmt","fmt","fmt","fmt","free_local_port","from","from","from","from","get_polled_evset","handle_event","handle_peer_request_pkt","has_pending_rx","hash","host_sock","host_sock_path","host_sock_path","into","into","into","into","kill_connection","killq","listener_map","local_port","local_port_last","local_port_set","new","notify","peer_port","read_local_stream_port","recv_pkt","remove_connection","remove_listener","restore","rxq","save","send_pkt","sweep_killq","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","evset","key","local_port","peer_port","MuxerKillQ","MuxerKillQItem","SIZE","as_any","as_any","as_mut_any","as_mut_any","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","fmt","fmt","from","from","from_conn_map","into","into","is_empty","is_full","is_synced","key","kill_time","new","pop","push","q","synced","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","MuxerRxQ","SIZE","as_any","as_mut_any","borrow","borrow_mut","fmt","from","from_conn_map","into","is_empty","is_full","is_synced","len","new","peek","pop","push","q","synced","try_from","try_into","type_id","ByteBuffer","ETHERNET_PAYLOAD_OFFSET","ETHERTYPE_ARP","ETHERTYPE_IPV4","ETH_IPV4_FRAME_LEN","EthIPv4ArpFrame","EthernetFrame","IPv4Packet","PROTOCOL_TCP","PROTOCOL_UDP","UDP_HEADER_SIZE","UdpDatagram","len","pdu","read_to_slice","tcp","ChecksumProto","Incomplete","Tcp","Udp","arp","as_any","as_any","as_mut_any","as_mut_any","borrow","borrow","borrow_mut","borrow_mut","bytes","clone","clone_into","compute_checksum","eq","ethernet","finalize","finalize","fmt","fmt","from","from","inner","inner","inner_mut","into","into","ipv4","new","tcp","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","udp","with_header_and_payload_len_unchecked","with_options_and_payload_len_unchecked","with_payload_len_unchecked","with_payload_len_unchecked","ETH_IPV4_FRAME_LEN","ETH_IPV4_SPA_OFFSET","ETH_IPV4_THA_OFFSET","ETH_IPV4_TPA_OFFSET","Error","EthIPv4ArpFrame","HLEN_OFFSET","HLen","HTYPE_ETHERNET","HTYPE_OFFSET","HType","IPV4_ADDR_LEN","OPER_OFFSET","OPER_REPLY","OPER_REQUEST","Operation","PLEN_OFFSET","PLen","PTYPE_OFFSET","PType","SHA_OFFSET","SliceExactLen","_DERIVE_Display_FOR_Error","as_any","as_any","as_mut_any","as_mut_any","borrow","borrow","borrow_mut","borrow_mut","bytes","eq","fmt","fmt","fmt","from","from","from_bytes_unchecked","hlen","htype","into","into","len","operation","plen","ptype","request_from_bytes","set_hlen","set_htype","set_operation","set_plen","set_ptype","set_sha","set_spa","set_tha","set_tpa","sha","spa","test_speculative_tpa","tha","to_string","tpa","try_from","try_from","try_into","try_into","type_id","type_id","write_raw","write_reply","write_request","InnerBytes","NetworkBytes","NetworkBytesMut","as_any","as_mut_any","borrow","borrow_mut","bytes","deref","deref_mut","fmt","from","htonl_unchecked","htons_unchecked","into","new","ntohl_unchecked","ntohs_unchecked","phantom","shrink_unchecked","shrink_unchecked","try_from","try_into","type_id","DST_MAC_OFFSET","ETHERTYPE_ARP","ETHERTYPE_IPV4","ETHERTYPE_OFFSET","Error","EthernetFrame","PAYLOAD_OFFSET","SRC_MAC_OFFSET","SliceTooShort","_DERIVE_Display_FOR_Error","as_any","as_any","as_mut_any","as_mut_any","borrow","borrow","borrow_mut","borrow_mut","bytes","dst_mac","eq","ethertype","fmt","fmt","fmt","from","from","from_bytes","from_bytes_unchecked","into","into","len","new_with_header","payload","payload_mut","payload_offset","set_dst_mac","set_ethertype","set_src_mac","src_mac","to_string","try_from","try_from","try_into","try_into","type_id","type_id","write_incomplete","Checksum","DEFAULT_TTL","DESTINATION_ADDRESS_OFFSET","DSCP_AND_ECN_OFFSET","Error","FLAGS_AND_FRAGMENTOFF_OFFSET","HEADER_CHECKSUM_OFFSET","HeaderLen","IDENTIFICATION_OFFSET","IPV4_VERSION","IPv4Packet","InvalidTotalLen","OPTIONS_OFFSET","PROTOCOL_OFFSET","PROTOCOL_TCP","PROTOCOL_UDP","SOURCE_ADDRESS_OFFSET","SliceExactLen","SliceTooShort","TOTAL_LEN_OFFSET","TTL_OFFSET","VERSION_AND_IHL_OFFSET","Version","_DERIVE_Display_FOR_Error","as_any","as_any","as_mut_any","as_mut_any","borrow","borrow","borrow_mut","borrow_mut","bytes","compute_checksum","compute_checksum_unchecked","destination_address","dscp_and_ecn","eq","flags_and_fragment_offset","fmt","fmt","fmt","from","from","from_bytes","from_bytes_unchecked","header_checksum","header_len","identification","into","into","len","payload","payload_mut","payload_mut_unchecked","payload_unchecked","protocol","set_destination_address","set_dscp_and_ecn","set_flags_and_fragment_offset","set_header_checksum","set_identification","set_protocol","set_source_address","set_total_len","set_ttl","set_version_and_header_len","source_address","test_speculative_dst_addr","to_string","total_len","try_from","try_from","try_into","try_into","ttl","type_id","type_id","version_and_header_len","write_header","ACK","ACK_NUMBER_OFFSET","CHECKSUM_OFFSET","CWR","Checksum","DATAOFF_RSVD_NS_OFFSET","DESTINATION_PORT_OFFSET","ECE","EmptyPayload","Error","FIN","FLAGS_AFTER_NS_OFFSET","Flags","HeaderLen","MAX_HEADER_LEN","MSS_MIN","MssOption","MssRemaining","OPTIONS_OFFSET","OPTION_KIND_EOL","OPTION_KIND_MSS","OPTION_KIND_NOP","OPTION_LEN_MSS","PSH","RST","SEQ_NUMBER_OFFSET","SOURCE_PORT_OFFSET","SYN","SliceTooShort","TcpSegment","URG","URG_POINTER_OFFSET","WINDOW_SIZE_OFFSET","_DERIVE_Display_FOR_Error","ack_number","all","as_any","as_any","as_any","as_mut_any","as_mut_any","as_mut_any","bitand","bitand_assign","bitor","bitor_assign","bits","bits","bitxor","bitxor_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bytes","checksum","clone","clone_into","complement","compute_checksum","contains","destination_port","difference","empty","eq","eq","extend","flags_after_ns","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from_bits","from_bits_retain","from_bits_retain","from_bits_truncate","from_bytes","from_bytes_unchecked","from_iter","from_name","header_len","header_len_rsvd_ns","insert","intersection","intersects","into","into","into","into_iter","is_all","is_empty","iter","iter_names","len","not","options_unchecked","parse_mss_option_unchecked","payload","payload_len","payload_mut","payload_mut_unchecked","payload_unchecked","remove","sequence_number","set","set_ack_number","set_checksum","set_destination_port","set_flags_after_ns","set_header_len_rsvd_ns","set_sequence_number","set_source_port","set_urgent_pointer","set_window_size","source_port","sub","sub_assign","symmetric_difference","to_owned","to_string","toggle","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","union","urgent_pointer","window_size","write_incomplete_segment","write_segment","CHECKSUM_OFFSET","Checksum","DESTINATION_PORT_OFFSET","DatagramTooShort","Error","IPV4_MAX_UDP_PACKET_SIZE","LENGTH_OFFSET","PAYLOAD_OFFSET","PayloadTooBig","SOURCE_PORT_OFFSET","UDP_HEADER_SIZE","UdpDatagram","_DERIVE_Display_FOR_Error","as_any","as_any","as_mut_any","as_mut_any","borrow","borrow","borrow_mut","borrow_mut","bytes","checksum","compute_checksum","destination_port","eq","fmt","fmt","fmt","from","from","from_bytes","from_bytes_unchecked","into","into","len","payload","payload_mut","set_checksum","set_destination_port","set_len","set_source_port","source_port","to_string","try_from","try_from","try_into","try_into","type_id","type_id","write_incomplete_datagram","Ack","Available","MAX_WINDOW_SIZE","MSS_DEFAULT","NextSegmentStatus","Nothing","RstConfig","Seq","Timeout","as_any","as_any","as_mut_any","as_mut_any","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","connection","endpoint","eq","eq","fmt","fmt","from","from","handler","into","into","new","seq_ack_tcp_flags","seq_after","seq_at_or_after","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","BufferTooSmall","CONN_RESETTING","ConnStatusFlags","Connection","ConnectionReset","ConnectionReset","DATA_BEYOND_FIN","DUP_ACK","DataAfterFin","ESTABLISHED","FIN_ACKED","FIN_SENT","INVALID_ACK","INVALID_FIN","INVALID_RST","INVALID_SEGMENT","InvalidSyn","MssOption","MssRemaining","None","PassiveOpenError","PayloadBufTooLarge","PayloadMissingSeq","PayloadSource","REMOTE_RWND_EDGE","RESET","RESET_RECEIVED","RecvError","RecvStatusFlags","SEGMENT_BEYOND_RWND","SYNACK_SENT","SYN_RECEIVED","Some","TcpSegment","UNEXPECTED_SEQ","WriteNextError","_DERIVE_Display_FOR_PassiveOpenError","_DERIVE_Display_FOR_RecvError","_DERIVE_Display_FOR_WriteNextError","ack_to_send","advance_local_rwnd_edge","all","all","as_any","as_any","as_any","as_any","as_any","as_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor_assign","bitor_assign","bits","bits","bits","bits","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","can_send_first_fin","clear_flags","clone","clone","clone","clone_into","clone_into","clone_into","close","complement","complement","compute_remote_rwnd_edge","contains","contains","control_segment_or_timeout_status","difference","difference","dup_ack","dup_ack_pending","empty","empty","enqueue_ack","eq","eq","eq","eq","eq","extend","extend","fin_acked","fin_received","fin_received","fin_sent","first_not_sent","first_not_sent","flags_intersect","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_bits","from_bits","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_retain","from_bits_truncate","from_bits_truncate","from_iter","from_iter","from_name","from_name","highest_ack_received","highest_ack_received","insert","insert","intersection","intersection","intersects","intersects","into","into","into","into","into","into","into_iter","into_iter","is_all","is_all","is_done","is_empty","is_empty","is_established","is_reset","is_same_syn","is_valid_syn","iter","iter","iter_names","iter_names","local_rwnd","local_rwnd_edge","make_rst_config","mss","not","not","parse_mss_option","passive_open","pending_ack","receive_segment","remote_rwnd_edge","remote_rwnd_edge","remote_window_size","remove","remove","reset","reset_for_segment","reset_for_segment_helper","rst_pending","rto_count","rto_count_max","rto_expired","rto_period","rto_start","send_fin","send_rst","set","set","set_flags","source","status_flags","sub","sub","sub_assign","sub_assign","symmetric_difference","symmetric_difference","syn_received","synack_pending","synack_sent","to_owned","to_owned","to_owned","to_string","to_string","to_string","toggle","toggle","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","union","union","write_control_segment","write_next_segment","write_segment","CONNECTION_RTO_COUNT_MAX","CONNECTION_RTO_PERIOD","EVICTION_THRESHOLD","Endpoint","RCV_BUF_MAX_SIZE","as_any","as_mut_any","borrow","borrow_mut","build_response","connection","connection","eviction_threshold","fmt","from","initial_response_seq","into","is_done","is_evictable","last_segment_received_timestamp","new","new_with_defaults","next_segment_status","parse_request_bytes","receive_buf","receive_buf_left","receive_segment","response_buf","response_seq","stop_receiving","try_from","try_into","type_id","write_next_segment","ConnectionTuple","EndpointDone","EndpointDone","EndpointDone","EndpointRunning","FailedNewConnection","IPv4Packet","InvalidPort","NewConnection","NewConnectionDropped","NewConnectionReplacing","NewConnectionSuccessful","Nothing","Nothing","RecvError","RecvEvent","RecvSegmentOutcome","TcpIPv4Handler","TcpSegment","TcpSegment","UnexpectedSegment","UnexpectedSegment","WriteEvent","WriteNextError","_DERIVE_Display_FOR_RecvError","_DERIVE_Display_FOR_WriteNextError","active_connections","add_connection","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check_next_segment_status","check_timeout","clone","clone_into","connections","enqueue_rst","enqueue_rst_config","eq","eq","eq","eq","eq","find_evictable_connection","find_next_timeout","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","hash","into","into","into","into","into","into","into","local_ipv4_addr","local_ipv4_addr","local_port","local_port","max_connections","max_connections","max_pending_resets","max_pending_resets","new","new","next_segment_status","next_timeout","receive_packet","remote_addr","remote_port","remove_connection","rst_queue","set_local_ipv4_addr","source","source","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","write_next_packet","CQueue","CQueueError","Enable","Fam","FullCQueue","FullQueue","IORING_MAX_FIXED_FILES","InvalidFixedFd","IoUring","IoUringError","Mmap","Mmap","NoRegisteredFds","Probe","REQUIRED_OPS","RegisterEventfd","RegisterFile","RegisterFileLimitExceeded","RegisterRestrictions","SQueue","SQueueError","Setup","Submit","UnsupportedFeature","UnsupportedOperation","VolatileMemory","VolatileMemory","_DERIVE_Display_FOR_IoUringError","as_any","as_any","as_mut_any","as_mut_any","bindings","borrow","borrow","borrow_mut","borrow_mut","check_features","check_operations","cqueue","do_submit","enable","fd","fmt","fmt","fmt","from","from","into","into","is_throttling_err","new","num_ops","num_ops","operation","pending_sqes","pop","probe","push","queue","register_eventfd","register_files","register_restrictions","registered_fds_count","restriction","squeue","submit","submit_and_wait_all","to_string","try_from","try_from","try_into","try_into","type_id","type_id","IORING_CQE_BUFFER_SHIFT","IORING_CQE_F_BUFFER","IORING_CQ_EVENTFD_DISABLED","IORING_ENTER_GETEVENTS","IORING_ENTER_SQ_WAIT","IORING_ENTER_SQ_WAKEUP","IORING_FEAT_CUR_PERSONALITY","IORING_FEAT_FAST_POLL","IORING_FEAT_NODROP","IORING_FEAT_POLL_32BITS","IORING_FEAT_RW_CUR_POS","IORING_FEAT_SINGLE_MMAP","IORING_FEAT_SUBMIT_STABLE","IORING_FSYNC_DATASYNC","IORING_OFF_CQ_RING","IORING_OFF_SQES","IORING_OFF_SQ_RING","IORING_OP_ACCEPT","IORING_OP_ASYNC_CANCEL","IORING_OP_CLOSE","IORING_OP_CONNECT","IORING_OP_EPOLL_CTL","IORING_OP_FADVISE","IORING_OP_FALLOCATE","IORING_OP_FILES_UPDATE","IORING_OP_FSYNC","IORING_OP_LAST","IORING_OP_LINK_TIMEOUT","IORING_OP_MADVISE","IORING_OP_NOP","IORING_OP_OPENAT","IORING_OP_OPENAT2","IORING_OP_POLL_ADD","IORING_OP_POLL_REMOVE","IORING_OP_PROVIDE_BUFFERS","IORING_OP_READ","IORING_OP_READV","IORING_OP_READ_FIXED","IORING_OP_RECV","IORING_OP_RECVMSG","IORING_OP_REMOVE_BUFFERS","IORING_OP_SEND","IORING_OP_SENDMSG","IORING_OP_SPLICE","IORING_OP_STATX","IORING_OP_SYNC_FILE_RANGE","IORING_OP_TEE","IORING_OP_TIMEOUT","IORING_OP_TIMEOUT_REMOVE","IORING_OP_WRITE","IORING_OP_WRITEV","IORING_OP_WRITE_FIXED","IORING_REGISTER_BUFFERS","IORING_REGISTER_ENABLE_RINGS","IORING_REGISTER_EVENTFD","IORING_REGISTER_EVENTFD_ASYNC","IORING_REGISTER_FILES","IORING_REGISTER_FILES_UPDATE","IORING_REGISTER_LAST","IORING_REGISTER_PERSONALITY","IORING_REGISTER_PROBE","IORING_REGISTER_RESTRICTIONS","IORING_RESTRICTION_LAST","IORING_RESTRICTION_REGISTER_OP","IORING_RESTRICTION_SQE_FLAGS_ALLOWED","IORING_RESTRICTION_SQE_FLAGS_REQUIRED","IORING_RESTRICTION_SQE_OP","IORING_SETUP_ATTACH_WQ","IORING_SETUP_CLAMP","IORING_SETUP_CQSIZE","IORING_SETUP_IOPOLL","IORING_SETUP_R_DISABLED","IORING_SETUP_SQPOLL","IORING_SETUP_SQ_AFF","IORING_SQ_CQ_OVERFLOW","IORING_SQ_NEED_WAKEUP","IORING_TIMEOUT_ABS","IORING_UNREGISTER_BUFFERS","IORING_UNREGISTER_EVENTFD","IORING_UNREGISTER_FILES","IORING_UNREGISTER_PERSONALITY","IOSQE_ASYNC_BIT","IOSQE_BUFFER_SELECT_BIT","IOSQE_FIXED_FILE_BIT","IOSQE_IO_DRAIN_BIT","IOSQE_IO_HARDLINK_BIT","IOSQE_IO_LINK_BIT","IO_URING_OP_SUPPORTED","__IncompleteArrayField","__bindgen_anon_1","__bindgen_anon_1","__bindgen_anon_1","__bindgen_anon_1","__bindgen_anon_2","__bindgen_anon_3","__bindgen_anon_4","__kernel_rwf_t","__pad2","__s32","__u16","__u32","__u64","__u8","_bindgen_ty_1","_bindgen_ty_2","_bindgen_ty_3","_bindgen_ty_4","_bindgen_ty_5","accept_flags","addr","addr2","array","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_ptr","as_mut_slice","as_mut_slice","as_ptr","as_slice","as_slice","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","buf_group","buf_index","cancel_flags","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cq_entries","cq_off","cqes","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","dropped","eq","eq","eq","eq","eq","eq","fadvise_advice","fd","fds","features","flags","flags","flags","flags","flags","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","fsync_flags","head","head","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","io_cqring_offsets","io_sqring_offsets","io_uring_cqe","io_uring_files_update","io_uring_params","io_uring_probe","io_uring_probe_op","io_uring_restriction","io_uring_restriction__bindgen_ty_1","io_uring_sqe","io_uring_sqe__bindgen_ty_1","io_uring_sqe__bindgen_ty_2","io_uring_sqe__bindgen_ty_3","io_uring_sqe__bindgen_ty_4","io_uring_sqe__bindgen_ty_4__bindgen_ty_1","io_uring_sqe__bindgen_ty_4__bindgen_ty_1__bindgen_ty_1","ioprio","last_op","len","len","max_len","msg_flags","new","off","offset","op","opcode","opcode","open_flags","ops","ops_len","overflow","personality","poll32_events","poll_events","register_op","res","resv","resv","resv","resv","resv","resv1","resv1","resv2","resv2","resv2","resv2","resv2","ring_entries","ring_entries","ring_mask","ring_mask","rw_flags","set_len","splice_fd_in","splice_flags","splice_off_in","sq_entries","sq_off","sq_thread_cpu","sq_thread_idle","sqe_flags","sqe_op","statx_flags","sync_range_flags","tail","tail","timeout_flags","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","user_data","user_data","wq_fd","Cqe","FixedFd","Fsync","OpCode","Operation","Read","Write","addr","as_any","as_any","as_mut_any","as_mut_any","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","cqe","fd","fd","flags","fmt","fmt","from","from","fsync","into","into","into_sqe","len","offset","opcode","read","res","sqe","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","user_data","user_data","user_data","write","Cqe","as_any","as_mut_any","borrow","borrow_mut","count","fmt","from","into","map_user_data","new","res","result","try_from","try_into","type_id","user_data","user_data","Sqe","as_any","as_mut_any","borrow","borrow_mut","fmt","from","into","new","try_from","try_into","type_id","user_data","PROBE_LEN","ProbeWrapper","mem_allocator","completion","mmap","submission","CQueueError","CompletionQueue","Mmap","VolatileMemory","_DERIVE_Display_FOR_CQueueError","as_any","as_any","as_mut_any","as_mut_any","borrow","borrow","borrow_mut","borrow_mut","count","count","cqes","cqes_off","drop","fmt","fmt","fmt","from","from","from","from","head_off","into","into","new","pop","ring_mask","source","tail_off","to_string","try_from","try_from","try_into","try_into","type_id","type_id","unmasked_head","BuildMmapRegion","MmapError","Os","_DERIVE_Display_FOR_MmapError","as_any","as_mut_any","borrow","borrow_mut","fmt","fmt","from","into","mmap","to_string","try_from","try_into","type_id","FullQueue","Mmap","SQueueError","SubmissionQueue","Submit","VolatileMemory","_DERIVE_Display_FOR_SQueueError","as_any","as_any","as_mut_any","as_mut_any","borrow","borrow","borrow_mut","borrow_mut","count","drop","fmt","fmt","fmt","from","from","from","from","from","head_off","into","into","io_uring_fd","mmap","new","pending","push","ring","ring_mask","source","sqes","submit","tail_off","to_string","to_submit","try_from","try_from","try_into","try_into","type_id","type_id","unmasked_tail","AllowOpCode","RequireFixedFds","Restriction","as_any","as_mut_any","borrow","borrow_mut","fmt","from","into","try_from","try_into","type_id","AlreadyInitialized","DEFAULT_INSTANCE_ID","DEFAULT_LEVEL","DEV_PREVIEW_LOG_PREFIX","Debug","Debug","Error","Error","FcLineWriter","INSTANCE_ID","IncMetric","Info","Info","LOGGER","Level","LevelFilter","LevelFilterFromStrError","LoggerConfig","LoggerInitError","LoggerUpdateError","METRICS","MetricsError","NeverInitialized","Off","ProcessTimeReporter","Serde","SharedIncMetric","SharedStoreMetric","StoreMetric","Trace","Trace","Warn","Warn","Write","add","as_any","as_mut_any","as_str","borrow","borrow_mut","clone","clone_into","cmp","count","debug","deserialize","eq","eq","error","fetch","fetch_diff","fmt","fmt","from","from_str","hash","info","inner","into","iter","level","log_dev_preview_warning","log_enabled","log_path","logging","max","metrics","module","parent_cpu_time_us","partial_cmp","partial_cmp","serialize","show_level","show_log_origin","start_time_cpu_us","start_time_us","store","to_level_filter","to_owned","to_string","trace","try_from","try_into","type_id","update_metric_with_elapsed_time","warn","DEFAULT_INSTANCE_ID","DEFAULT_LEVEL","Debug","Error","INSTANCE_ID","Info","LOGGER","LevelFilter","LevelFilterFromStrError","LogFilter","LogFormat","Logger","LoggerConfig","LoggerConfiguration","LoggerInitError","LoggerUpdateError","Off","Trace","Warn","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deserialize","deserialize","enabled","eq","eq","eq","filter","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format","from","from","from","from","from","from","from","from","from_str","init","into","into","into","into","into","into","into","into","level","log","log_path","module","module","serialize","serialize","show_level","show_level","show_log_origin","show_log_origin","target","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update","AlreadyInitialized","ApiServerMetrics","BalloonMetricsSerializeProxy","BlockMetricsSerializeProxy","DeprecatedApiMetrics","EntropyMetricsSerializeProxy","FirecrackerMetrics","GetRequestsMetrics","IncMetric","LatencyAggregateMetrics","LatencyMetricsRecorder","LegacyDevMetricsSerializeProxy","LoggerSystemMetrics","METRICS","Metrics","MetricsError","MmdsMetrics","NetMetricsSerializeProxy","NeverInitialized","PatchRequestsMetrics","PerformanceMetrics","ProcessTimeReporter","PutRequestsMetrics","SeccompMetrics","Serde","SerializeToUtcTimestampMs","SharedIncMetric","SharedStoreMetric","SignalMetrics","StoreMetric","VcpuMetrics","VhostUserMetricsSerializeProxy","VmmMetrics","VsockMetricsSerializeProxy","Write","_DERIVE_Display_FOR_MetricsError","actions_count","actions_fails","add","add","api_server","app_metrics","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","balloon_ser","block_ser","boot_source_count","boot_source_fails","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","connections_created","connections_destroyed","count","count","cpu_cfg_count","cpu_cfg_fails","create_serialize_proxy","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","deprecated_api","deprecated_cmd_line_api_calls","deprecated_http_api_calls","deref","device_events","diff_create_snapshot","drive_count","drive_count","drive_fails","drive_fails","drop","entropy_ser","exit_io_in","exit_io_in_agg","exit_io_out","exit_io_out_agg","exit_mmio_read","exit_mmio_read_agg","exit_mmio_write","exit_mmio_write_agg","failures","fetch","fetch","fetch_diff","fetch_diff","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","full_create_snapshot","get_api_requests","inc","inc","init","instance_info_count","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","latencies_us","legacy_dev_ser","load_snapshot","log_fails","logger","logger_count","logger_fails","machine_cfg_count","machine_cfg_count","machine_cfg_count","machine_cfg_fails","machine_cfg_fails","max_us","metric","metrics_buf","metrics_count","metrics_fails","metrics_fails","min_us","missed_log_count","missed_metrics_count","mmds","mmds_count","mmds_count","mmds_count","mmds_fails","mmds_fails","net_ser","network_count","network_count","network_fails","network_fails","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","num_faults","panic_count","parent_cpu_time_us","patch_api_requests","pause_vm","process_startup_time_cpu_us","process_startup_time_us","put_api_requests","record_latency_metrics","report_cpu_start_time","report_start_time","resume_vm","rx_accepted","rx_accepted_err","rx_accepted_unusual","rx_bad_eth","rx_count","seccomp","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","sigbus","sighup","sigill","signals","sigpipe","sigsegv","sigxcpu","sigxfsz","start_time","start_time_cpu_us","start_time_us","store","store","sum_us","sync_response_fails","sync_vmm_send_timeout_count","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","tx_bytes","tx_count","tx_errors","tx_frames","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","utc_timestamp_ms","vcpu","vhost_user_ser","vmm","vmm_diff_create_snapshot","vmm_full_create_snapshot","vmm_load_snapshot","vmm_pause_vm","vmm_resume_vm","vmm_version_count","vsock_count","vsock_fails","vsock_ser","write","Error","InvalidToken","InvalidURI","MethodNotAllowed","NoTokenProvided","NoTtlProvided","ResourceNotFound","_DERIVE_Display_FOR_Error","as_any","as_mut_any","borrow","borrow_mut","build_response","convert_to_response","data_store","fmt","fmt","from","into","json_patch","ns","persist","respond_to_get_request_checked","respond_to_get_request_unchecked","respond_to_put_request","respond_to_request_mmdsv1","respond_to_request_mmdsv2","sanitize_uri","to_string","token","token_headers","try_from","try_into","type_id","DataStoreLimitExceeded","Error","Imds","Json","Mmds","MmdsVersion","NotFound","NotInitialized","OutputFormat","TokenAuthority","UnsupportedValueType","V1","V2","_DERIVE_Display_FOR_Error","as_any","as_any","as_any","as_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check_data_store_initialized","clone","clone_into","data_store","data_store_limit","data_store_value","default","default","default_with_limit","deserialize","eq","fmt","fmt","fmt","fmt","fmt","fmt","format_imds","from","from","from","from","from","from","from","generate_token","get_value","into","into","into","into","is_initialized","is_valid_token","patch_data","put_data","serialize","set_aad","set_data_store_limit","set_version","source","to_owned","to_string","to_string","token_authority","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","version","Arp","DEFAULT_IPV4_ADDR","DEFAULT_MAC_ADDR","DEFAULT_MAX_CONNECTIONS","DEFAULT_MAX_PENDING_RESETS","DEFAULT_TCP_PORT","Ethernet","Ethernet","IPv4Packet","MmdsNetworkStack","NoPendingArpReply","TcpSegment","WriteArpFrameError","WriteNext","WritePacketError","_DERIVE_Display_FOR_WriteArpFrameError","_DERIVE_Display_FOR_WritePacketError","as_any","as_any","as_any","as_mut_any","as_mut_any","as_mut_any","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","default_ipv4_addr","detour_arp","detour_frame","detour_ipv4","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","into","into","into","ipv4_addr","ipv4_addr","is_mmds_frame","mac_addr","mmds","new","new_with_defaults","pending_arp_reply_dest","prepare_eth_unsized","remote_mac_addr","restore","save","set_ipv4_addr","source","source","tcp_handler","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","write_arp_reply","write_next_frame","write_packet","MmdsNetworkStackState","as_any","as_mut_any","borrow","borrow_mut","clone","clone_into","deserialize","fmt","from","into","ipv4_addr","mac_addr","max_connections","max_pending_resets","serialize","tcp_port","to_owned","try_from","try_into","type_id","version","DESERIALIZATION_BYTES_LIMIT","EntropyPool","Error","ExpiryExtraction","IV_LEN","InvalidState","InvalidTtlValue","KEY_LEN","MAX_TOKEN_TTL_SECONDS","MILLISECONDS_PER_SECOND","MIN_TOKEN_TTL_SECONDS","PATH_TO_TOKEN","PAYLOAD_LEN","RANDOMNESS_POOL","Serialization","TAG_LEN","TOKEN_LENGTH_LIMIT","Token","TokenAuthority","TokenEncryption","_DERIVE_Display_FOR_Error","aad","as_any","as_any","as_any","as_mut_any","as_mut_any","as_mut_any","base64_decode","base64_encode","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","check_encryption_count","check_ttl","cipher","compute_expiry","create_cipher","create_token","decrypt_expiry","deserialize","encrypt_expiry","entropy_pool","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","generate_token_secret","into","into","into","is_valid","iv","new","new","num_encrypted_tokens","payload","serialize","set_aad","source","tag","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","REJECTED_HEADER","TokenHeaders","X_METADATA_TOKEN","X_METADATA_TOKEN_TTL_SECONDS","as_any","as_mut_any","borrow","borrow_mut","default","eq","fmt","from","into","set_x_metadata_token","set_x_metadata_token_ttl_seconds","try_from","try_from","try_into","type_id","x_metadata_token","x_metadata_token","x_metadata_token_ttl_seconds","x_metadata_token_ttl_seconds","Build","Connect","Create","CreateSnapshotError","DirtyBitmap","FC_V0_23_MAX_DEVICES","File","File","File","GuestMemory","GuestMemoryFromFileError","GuestMemoryFromUffdError","GuestRegionUffdMapping","IncompatibleState","IncompatibleVirtioFeature","Invalid","InvalidInput","InvalidVcpuCount","InvalidVersionFormat","Load","Memory","MemoryBackingFile","Meta","MicrovmState","MicrovmState","MicrovmStateError","NoMemory","NotAllowed","Open","Register","Restore","Restore","RestoreDevices","RestoreFromSnapshotError","RestoreFromSnapshotGuestMemoryError","RestoreVcpuState","RestoreVmState","SaveVcpuState","SaveVmState","Send","SerializeMicrovmState","SignalVcpu","SnapShotStateSanityCheckError","SnapshotBackingFile","SnapshotBackingFileLengthMismatch","SnapshotStateFromFileError","TooManyDevices","Uffd","UnexpectedVcpuResponse","UnsupportedVersion","VmInfo","_DERIVE_Display_FOR_CreateSnapshotError","_DERIVE_Display_FOR_GuestMemoryFromFileError","_DERIVE_Display_FOR_GuestMemoryFromUffdError","_DERIVE_Display_FOR_MicrovmStateError","_DERIVE_Display_FOR_RestoreFromSnapshotError","_DERIVE_Display_FOR_RestoreFromSnapshotGuestMemoryError","_DERIVE_Display_FOR_SnapShotStateSanityCheckError","_DERIVE_Display_FOR_SnapshotStateFromFileError","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","base_host_virt_addr","boot_source","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cpu_template","create_snapshot","def_boot_source","def_cpu_template","def_smt","default","default","deserialize","deserialize","device_states","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","guest_memory_from_file","guest_memory_from_uffd","into","into","into","into","into","into","into","into","into","into","into","mem_size_mib","memory_state","offset","restore_from_snapshot","serialize","serialize","serialize","serialize","size","smt","snapshot_memory_to_file","snapshot_state_from_file","snapshot_state_sanity_check","snapshot_state_to_file","source","source","source","source","source","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","validate_cpu_vendor","vcpu_states","version","version","vm_info","vm_state","BucketReduction","BucketUpdate","Bytes","Disabled","Error","Failure","NANOSEC_IN_ONE_MILLISEC","None","Ops","OverConsumption","REFILL_TIMER_INTERVAL_MS","RateLimiter","SpuriousRateLimiterEvent","Success","TIMER_REFILL_STATE","TokenBucket","TokenType","Update","_DERIVE_Display_FOR_Error","activate_timer","as_any","as_any","as_any","as_any","as_any","as_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_raw_fd","as_raw_filelike","as_raw_socketlike","auto_replenish","bandwidth","bandwidth","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","budget","budget","capacity","clone","clone","clone_into","clone_into","consume","default","eq","eq","eq","event_handler","fmt","fmt","fmt","fmt","fmt","fmt","fmt","force_replenish","from","from","from","from","from","from","gcd","initial_one_time_burst","initial_one_time_burst","into","into","into","into","into","into","is_blocked","last_update","manual_replenish","new","new","one_time_burst","one_time_burst","ops","ops","persist","processed_capacity","processed_refill_time","reduce","refill_time","refill_time_ms","restore","restore","save","save","size","timer_active","timer_fd","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","update_buckets","RateLimiterState","TokenBucketState","as_any","as_any","as_mut_any","as_mut_any","bandwidth","borrow","borrow","borrow_mut","borrow_mut","budget","clone","clone","clone_into","clone_into","deserialize","deserialize","elapsed_ns","fmt","fmt","from","from","into","into","one_time_burst","ops","refill_time","serialize","serialize","size","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","version","version","BalloonDevice","BlockDevice","BootSource","EntropyDevice","File","InvalidJson","Logger","Metrics","Mmds","MmdsConfig","NetDevice","ResourcesError","VmConfig","VmResources","VmmConfig","VsockDevice","_DERIVE_Display_FOR_ResourcesError","as_any","as_any","as_any","as_mut_any","as_mut_any","as_mut_any","balloon","balloon_device","block","block_devices","boot_source","boot_source","boot_source_builder","boot_source_config","boot_timer","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build_boot_source","build_entropy_device","build_net_device","cpu_config","default","default","deserialize","entropy","entropy_device","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_json","into","into","into","locked_mmds_or_default","logger","machine_config","metrics","mmds","mmds_config","mmds_config","mmds_or_default","mmds_size_limit","net_builder","net_devices","serialize","set_balloon_device","set_block_device","set_boot_source_config","set_custom_cpu_template","set_mmds_config","set_mmds_network_stack_config","set_mmds_version","set_track_dirty_pages","set_vsock_device","source","to_string","track_dirty_pages","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","update_from_restored_device","update_vm_config","vm_config","vsock","vsock_device","ApiRequest","ApiResponse","BalloonConfig","BalloonConfig","BalloonStats","BootSource","BuildMicrovmFromRequestsError","ConfigureBootSource","ConfigureCpu","ConfigureLogger","ConfigureMetrics","CreateSnapshot","CreateSnapshot","DriveConfig","Empty","EntropyDevice","FlushMetrics","FullVmConfig","GetBalloonConfig","GetBalloonStats","GetFullVmConfig","GetMMDS","GetVmInstanceInfo","GetVmMachineConfig","GetVmmVersion","InsertBlockDevice","InsertNetworkDevice","InstanceInformation","InternalVmm","LoadSnapshot","LoadSnapshot","LoadSnapshotError","LoadSnapshotNotAllowed","Logger","MachineConfig","MachineConfiguration","Metrics","Mmds","Mmds","MmdsConfig","MmdsLimitExceeded","MmdsRequestHandler","MmdsValue","NetworkConfig","NotSupported","OperationNotSupportedPostBoot","OperationNotSupportedPreBoot","PatchMMDS","Pause","PrebootApiController","PutCpuConfiguration","PutMMDS","Restore","RestoreFromSnapshot","Resume","Resume","ResumeMicrovm","RuntimeApiController","SendCtrlAltDel","SetBalloonDevice","SetEntropyDevice","SetMmdsConfiguration","SetVsockDevice","StartMicroVm","StartMicrovm","UpdateBalloon","UpdateBalloonStatistics","UpdateBlockDevice","UpdateNetworkInterface","UpdateVmConfiguration","VmmAction","VmmActionError","VmmData","VmmVersion","VsockConfig","_DERIVE_Display_FOR_BuildMicrovmFromRequestsError","_DERIVE_Display_FOR_LoadSnapshotError","_DERIVE_Display_FOR_VmmActionError","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","balloon_config","boot_path","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_microvm_from_requests","built_vmm","create_snapshot","eq","eq","event_manager","fatal_error","flush_metrics","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_mmds","handle_preboot_request","handle_request","insert_block_device","insert_net_device","instance_info","into","into","into","into","into","into","into","load_snapshot","mmds","mmds","mmds","new","new","patch_mmds","pause","put_mmds","resume","seccomp_filters","send_ctrl_alt_del","set_balloon_device","set_boot_source","set_custom_cpu_template","set_entropy_device","set_mmds_config","set_vsock_device","source","source","start_microvm","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update_block_device","update_net_rate_limiters","update_vm_config","vm_resources","vm_resources","vmm","get_empty_filters","SI_OFF_SYSCALL","SYS_SECCOMP_CODE","empty_fn","exit_with_code","generate_handler","log_sigsys_err","register_signal_handlers","sigbus_handler","sighup_handler","sigill_handler","sigpipe_handler","sigsegv_handler","sigsys_handler","sigxcpu_handler","sigxfsz_handler","mock_devices","mock_resources","test_utils","MockSerialInput","as_any","as_mut_any","as_raw_fd","as_raw_filelike","as_raw_socketlike","borrow","borrow_mut","fmt","from","into","read","try_from","try_into","type_id","DEFAULT_BOOT_ARGS","DEFAULT_KERNEL_IMAGE","MockBootSourceConfig","MockVmConfig","MockVmResources","NOISY_KERNEL_IMAGE","as_any","as_any","as_any","as_mut_any","as_mut_any","as_mut_any","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","default","default","default","fmt","fmt","fmt","from","from","from","generate_from","into","into","into","kernel_image_path","new","new","new","set_cpu_template","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_boot_source","with_default_boot_args","with_dirty_page_tracking","with_kernel","with_vm_config","create_tmp_socket","create_vmm","default_vmm","default_vmm_no_boot","dirty_tracking_vmm","FC_V0_23_SNAP_VERSION","FC_V0_24_SNAP_VERSION","FC_V0_25_SNAP_VERSION","FC_V1_0_SNAP_VERSION","FC_V1_1_SNAP_VERSION","FC_V1_2_SNAP_VERSION","FC_V1_3_SNAP_VERSION","FC_V1_4_SNAP_VERSION","FC_V1_5_SNAP_VERSION","FC_V1_6_SNAP_VERSION","FC_V1_7_SNAP_VERSION","FC_VERSION_TO_SNAP_VERSION","VERSION_MAP","__private_field","__private_field","as_any","as_any","as_mut_any","as_mut_any","borrow","borrow","borrow_mut","borrow_mut","deref","deref","from","from","into","into","try_from","try_from","try_into","try_into","type_id","type_id","RateLimiterConfig","RateLimiterUpdate","TokenBucketConfig","as_any","as_any","as_any","as_mut_any","as_mut_any","as_mut_any","balloon","bandwidth","bandwidth","boot_source","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","deserialize","deserialize","drive","entropy","eq","eq","fmt","fmt","fmt","from","from","from","from","from","from","get_bucket_update","instance_info","into","into","into","into_option","machine_config","metrics","mmds","net","one_time_burst","open_file_nonblock","ops","ops","refill_time","serialize","serialize","size","snapshot","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","vsock","BALLOON_DEV_ID","BalloonBuilder","BalloonConfigError","BalloonDeviceConfig","BalloonStats","BalloonUpdateConfig","BalloonUpdateStatsConfig","CreateFailure","DeviceNotActive","DeviceNotFound","InvalidStatsUpdate","MutexBalloon","StatsNotFound","TooManyPagesRequested","UpdateFailure","_DERIVE_Display_FOR_BalloonConfigError","alloc","amount_mib","amount_mib","as_any","as_any","as_any","as_any","as_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","default","deflate_on_oom","deserialize","deserialize","deserialize","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","get","get_config","inner","into","into","into","into","into","new","phantom","ptr","serialize","serialize","serialize","set","set_device","stats_polling_interval_s","stats_polling_interval_s","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","BootConfig","BootSource","BootSourceConfig","BootSourceConfigError","DEFAULT_KERNEL_CMDLINE","InvalidInitrdPath","InvalidKernelCommandLine","InvalidKernelPath","_DERIVE_Display_FOR_BootSourceConfigError","as_any","as_any","as_any","as_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","boot_args","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","builder","clone","clone_into","cmdline","config","default","default","deserialize","deserialize","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","initrd_file","initrd_path","into","into","into","into","kernel_file","kernel_image_path","new","serialize","serialize","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","version","BlockBuilder","BlockDeviceConfig","BlockDeviceType","BlockDeviceUpdateConfig","CreateRateLimiter","CreateVhostUserBlockDevice","CreateVirtioBlockDevice","DeviceUpdate","DriveError","FileEngineType","InvalidBlockConfig","RootBlockDeviceAlreadyAdded","VhostUserBlock","VirtioBlock","_DERIVE_Display_FOR_DriveError","add_vhost_user_device","add_virtio_device","as_any","as_any","as_any","as_any","as_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cache_type","configs","default","default","default","deserialize","deserialize","devices","drive_id","drive_id","eq","eq","file_engine_type","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","get_index_of_drive_id","has_root_device","insert","into","into","into","into","into","is_read_only","is_root_device","new","partuuid","path_on_host","path_on_host","rate_limiter","rate_limiter","serialize","socket","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","CreateDevice","CreateRateLimiter","EntropyDeviceBuilder","EntropyDeviceConfig","EntropyDeviceError","_DERIVE_Display_FOR_EntropyDeviceError","as_any","as_any","as_any","as_mut_any","as_mut_any","as_mut_any","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","clone","clone_into","config","default","default","deserialize","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get","insert","into","into","into","new","rate_limiter","serialize","set_device","source","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","InstanceInfo","NotStarted","Paused","Running","VmState","app_name","as_any","as_any","as_mut_any","as_mut_any","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","eq","eq","fmt","fmt","fmt","from","from","id","into","into","serialize","serialize","state","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vmm_version","DEFAULT_MEM_SIZE_MIB","IncompatibleBalloonSize","InvalidMemorySize","InvalidVcpuCount","InvalidVmState","MAX_SUPPORTED_VCPUS","MachineConfig","MachineConfigUpdate","VmConfig","VmConfigError","_DERIVE_Display_FOR_VmConfigError","as_any","as_any","as_any","as_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cpu_template","cpu_template","cpu_template","default","default","deserialize","deserialize","deserialize_smt","deserialize_vcpu_num","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","into","into","into","into","is_empty","mem_size_mib","mem_size_mib","mem_size_mib","serialize","serialize","set_custom_cpu_template","smt","smt","smt","to_owned","to_owned","to_owned","to_string","to_string","track_dirty_pages","track_dirty_pages","track_dirty_pages","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","update","vcpu_count","vcpu_count","vcpu_count","InitializationFailure","MetricsConfig","MetricsConfigError","_DERIVE_Display_FOR_MetricsConfigError","as_any","as_any","as_mut_any","as_mut_any","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deserialize","eq","fmt","fmt","fmt","from","from","init_metrics","into","into","metrics_path","serialize","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","EmptyNetworkIfaceList","InvalidIpv4Addr","InvalidNetworkInterfaceId","MmdsConfig","MmdsConfigError","MmdsVersion","_DERIVE_Display_FOR_MmdsConfigError","as_any","as_any","as_mut_any","as_mut_any","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deserialize","eq","fmt","fmt","fmt","from","from","into","into","ipv4_addr","ipv4_address","network_interfaces","network_interfaces","serialize","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","version","version","CreateNetworkDevice","CreateRateLimiter","DeviceUpdate","GuestMacAddressInUse","NetBuilder","NetworkInterfaceConfig","NetworkInterfaceError","NetworkInterfaceUpdateConfig","OpenTap","_DERIVE_Display_FOR_NetworkInterfaceError","add_device","as_any","as_any","as_any","as_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","clone","clone_into","configs","create_net","default","deserialize","deserialize","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","guest_mac","host_dev_name","iface_id","iface_id","into","into","into","into","iter","iter_mut","net_devices","new","rx_rate_limiter","rx_rate_limiter","serialize","source","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","tx_rate_limiter","tx_rate_limiter","type_id","type_id","type_id","type_id","CreateSnapshotParams","Diff","File","Full","LoadSnapshotConfig","LoadSnapshotParams","MemBackendConfig","MemBackendType","Paused","Resumed","SnapshotType","Uffd","Version","Vm","VmState","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","backend_path","backend_type","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","clone","clone","clone_into","clone_into","cmp","cmp_precedence","default","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","enable_diff_snapshots","enable_diff_snapshots","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_str","hash","into","into","into","into","into","into","into","into","into","major","mem_backend","mem_backend","mem_file_path","mem_file_path","minor","new","parse","partial_cmp","patch","pre","resume_vm","resume_vm","serialize","serialize","serialize","serialize","snapshot_path","snapshot_path","snapshot_path","snapshot_type","state","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","CreateVsockBackend","CreateVsockDevice","MutexVsockUnix","VsockAndUnixPath","VsockBuilder","VsockConfigError","VsockDeviceConfig","_DERIVE_Display_FOR_VsockConfigError","alloc","as_any","as_any","as_any","as_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","config","create_unixsock_vsock","default","deserialize","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","get","guest_cid","inner","insert","into","into","into","into","new","phantom","ptr","serialize","set_device","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","uds_path","uds_path","vsock","vsock_id","memory","vcpu","vm","Address","AtomicBitmap","B","BS","Bitmap","BitmapSlice","ByteValued","Bytes","CreateMemory","CreateRegion","E","FileError","FileOffset","GuestAddress","GuestMemory","GuestMemoryExtension","GuestMemoryMmap","GuestMemoryRegion","GuestMemoryRegionState","GuestMemoryState","GuestMmapRegion","GuestRegionMmap","GuestUsize","I","Memfd","MemfdSetLen","MemoryError","MemoryRegionAddress","MmapRegion","MmapRegionBuilder","MmapRegionError","PageSize","R","VmMemoryError","WriteMemory","_DERIVE_Display_FOR_MemoryError","addr","addr","address","address_in_range","address_in_range","arc","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_bytes","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_slice","as_mut_slice","as_ptr","as_slice","as_slice","as_volatile_slice","base_address","bitand","bitand","bitmap","bitmap","bitmap","bitmap","bitmap","bitor","bitor","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build","build_raw","check_address","check_address","check_range","checked_add","checked_add","checked_add","checked_align_up","checked_offset","checked_offset","checked_offset_from","checked_offset_from","checked_offset_from","checked_sub","checked_sub","checked_sub","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","create_memfd","default","default","default","default","describe","describe","deserialize","deserialize","dirty_at","dirty_at","drop","dump","dump","dump_dirty","dump_dirty","eq","eq","eq","eq","fds_overlap","file","file","file_offset","file_offset","file_offset","file_offset","file_offset","find_region","flags","flags","flags","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_arc","from_file","from_mut_slice","from_raw_regions","from_raw_regions","from_raw_regions_file","from_raw_regions_file","from_slice","from_state","from_state","get_and_reset","get_host_address","get_host_address","get_slice","get_slice","get_slice","guest_base","hugetlbfs","hugetlbfs","hugetlbfs","into","into","into","into","into","into","into","into","into","is_addr_set","is_bit_set","is_hugetlbfs","is_hugetlbfs","iter","last_addr","last_addr","len","len","len","load","map","map_and_fold","mapping","mark_dirty","mark_dirty","mark_dirty","mark_dirty","mask","new","new","new","new","new","new","new","new_with_bitmap","num_regions","offset","overflowing_add","overflowing_add","overflowing_add","overflowing_sub","overflowing_sub","overflowing_sub","owned","owned","owned","page_size","partial_cmp","partial_cmp","prot","prot","prot","prot","raw_ptr","raw_value","raw_value","raw_value","read","read_exact_from","read_exact_volatile_from","read_from","read_obj","read_slice","read_volatile_from","regions","regions","reset","serialize","serialize","set_addr_range","set_hugetlbfs","size","size","size","size","size","size","slice_at","slice_at","start","start","start_addr","store","to_owned","to_owned","to_owned","to_owned","to_region_addr","to_region_addr","to_string","try_access","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unchecked_add","unchecked_add","unchecked_add","unchecked_align_up","unchecked_offset_from","unchecked_sub","unchecked_sub","unchecked_sub","version","version","with_file","with_file","with_file_offset","with_hugetlbfs","with_len","with_mmap_flags","with_mmap_prot","with_raw_mmap_pointer","with_regions","with_regions_mut","with_size","with_size","write","write_all_to","write_all_volatile_to","write_obj","write_slice","write_to","write_volatile_to","Address","AddressValue","V","checked_add","checked_align_up","checked_offset_from","checked_sub","mask","new","one","overflowing_add","overflowing_sub","raw_value","unchecked_add","unchecked_align_up","unchecked_offset_from","unchecked_sub","zero","DumpCpuConfig","DumpedCpuConfig","Error","Exited","FaultyKvmExit","Finish","Handled","Interrupted","KvmVcpuError","NotAllowed","Pause","Paused","Resume","Resumed","SaveState","SavedState","SignalVcpu","StartThreadedError","Stopped","TLS_VCPU_PTR","UnhandledKvmExit","VCPU_RTSIG_OFFSET","Vcpu","VcpuCell","VcpuConfig","VcpuConfig","VcpuEmulation","VcpuError","VcpuEvent","VcpuHandle","VcpuResponse","VcpuResponse","VcpuSendEventError","VcpuSpawn","VcpuTlsInit","VcpuTlsNotPresent","_DERIVE_Display_FOR_VcpuError","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cpu_config","drop","drop","emulate","eq","event_receiver","event_sender","event_sender","exit","exit_evt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","init_thread_local_data","into","into","into","into","into","into","into","into","into","kvm_vcpu","new","new","paused","register_kick_signal_handler","reset_thread_local_data","response_receiver","response_receiver","response_receiver","response_sender","run","run_emulation","run_on_thread_local","running","send_event","set_mmio_bus","smt","start_threaded","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","vcpu_count","vcpu_thread","x86_64","ConvertCpuidType","ConvertCpuidType","Fam","FpuConfiguration","GetMsrsToDump","GetTscError","KvmVcpu","KvmVcpuConfigureError","KvmVcpuError","LocalIntConfiguration","NormalizeCpuidError","RegsConfiguration","SetCpuid","SetLint","SetMsrs","SetTscError","SetupFpu","SetupRegisters","SetupSpecialRegisters","SregsConfiguration","TSC_KHZ_TOL_DENOMINATOR","TSC_KHZ_TOL_NUMERATOR","VcpuFd","VcpuGetCpuid","VcpuGetDebugRegs","VcpuGetLapic","VcpuGetMpState","VcpuGetMsrs","VcpuGetMsrsIncomplete","VcpuGetRegs","VcpuGetSregs","VcpuGetTsc","VcpuGetVcpuEvents","VcpuGetXcrs","VcpuGetXsave","VcpuSetCpuid","VcpuSetDebugRegs","VcpuSetLapic","VcpuSetMpState","VcpuSetMsrs","VcpuSetMsrsIncomplete","VcpuSetRegs","VcpuSetSregs","VcpuSetTsc","VcpuSetVcpuEvents","VcpuSetXcrs","VcpuSetXsave","VcpuState","VcpuTemplateError","_DERIVE_Display_FOR_KvmVcpuConfigureError","_DERIVE_Display_FOR_KvmVcpuError","as_any","as_any","as_any","as_any","as_any","as_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","configure","cpuid","de_saved_msrs","debug_regs","default_msrs","default_tsc_khz","deserialize","dump_cpu_config","eq","eq","eq","eq","fd","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_cpuid","get_msr_chunks","get_msrs","get_tsc_khz","index","into","into","into","into","into","into","is_tsc_scaling_required","lapic","mmio_bus","mp_state","msrs","msrs_to_save","new","pio_bus","regs","restore_state","run_arch_emulation","save_state","saved_msrs","serialize","set_pio_bus","set_tsc_khz","source","source","source","sregs","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","tsc_khz","type_id","type_id","type_id","type_id","type_id","type_id","vcpu_events","version","xcrs","xsave","ApiVersion","Capabilities","DEFAULT_CAPABILITIES","GetMsrsToSave","Kvm","NotEnoughMemorySlots","RestoreStateError","SetClock","SetIrqChipIoAPIC","SetIrqChipPicMaster","SetIrqChipPicSlave","SetPit2","SetUserMemoryRegion","Vm","VmError","VmError","VmFd","VmGetClock","VmGetIrqChip","VmGetPit2","VmSetClock","VmSetIrqChip","VmSetPit2","VmSetup","VmState","_DERIVE_Display_FOR_RestoreStateError","_DERIVE_Display_FOR_VmError","as_any","as_any","as_any","as_any","as_mut_any","as_mut_any","as_mut_any","as_mut_any","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check_capabilities","clock","combine_capabilities","default","default_caps","deserialize","eq","eq","fd","fd","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","into","into","into","into","ioapic","kvm_cap_modifiers","kvm_cap_modifiers","max_memslots","memory_init","msrs_to_save","msrs_to_save","new","pic_master","pic_slave","pitstate","restore_state","save_state","serialize","set_kvm_memory_regions","setup_irqchip","source","supported_cpuid","supported_cpuid","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","version"],"q":[[0,"vmm"],[205,"vmm::arch"],[253,"vmm::arch::x86_64"],[294,"vmm::arch::x86_64::cpu_model"],[316,"vmm::arch::x86_64::gdt"],[328,"vmm::arch::x86_64::interrupts"],[353,"vmm::arch::x86_64::layout"],[361,"vmm::arch::x86_64::mptable"],[407,"vmm::arch::x86_64::msr"],[538,"vmm::arch::x86_64::regs"],[629,"vmm::arch_gen"],[630,"vmm::arch_gen::x86"],[635,"vmm::arch_gen::x86::hyperv"],[641,"vmm::arch_gen::x86::hyperv_tlfs"],[703,"vmm::arch_gen::x86::mpspec"],[938,"vmm::arch_gen::x86::msr_index"],[1462,"vmm::arch_gen::x86::perf_event"],[1471,"vmm::builder"],[1572,"vmm::cpu_config"],[1575,"vmm::cpu_config::templates"],[1669,"vmm::cpu_config::templates::common_types"],[1674,"vmm::cpu_config::templates_serde"],[1678,"vmm::cpu_config::x86_64"],[1719,"vmm::cpu_config::x86_64::cpuid"],[1907,"vmm::cpu_config::x86_64::cpuid::amd"],[1959,"vmm::cpu_config::x86_64::cpuid::amd::normalize"],[2060,"vmm::cpu_config::x86_64::cpuid::common"],[2080,"vmm::cpu_config::x86_64::cpuid::intel"],[2117,"vmm::cpu_config::x86_64::cpuid::intel::normalize"],[2180,"vmm::cpu_config::x86_64::cpuid::normalize"],[2318,"vmm::cpu_config::x86_64::custom_cpu_template"],[2434,"vmm::cpu_config::x86_64::static_cpu_templates"],[2471,"vmm::cpu_config::x86_64::static_cpu_templates::c3"],[2472,"vmm::cpu_config::x86_64::static_cpu_templates::t2"],[2473,"vmm::cpu_config::x86_64::static_cpu_templates::t2a"],[2474,"vmm::cpu_config::x86_64::static_cpu_templates::t2cl"],[2475,"vmm::cpu_config::x86_64::static_cpu_templates::t2s"],[2476,"vmm::cpu_config::x86_64::test_utils"],[2479,"vmm::device_manager"],[2482,"vmm::device_manager::legacy"],[2526,"vmm::device_manager::mmio"],[2601,"vmm::device_manager::persist"],[2842,"vmm::devices"],[2871,"vmm::devices::bus"],[2952,"vmm::devices::legacy"],[2990,"vmm::devices::legacy::i8042"],[3073,"vmm::devices::legacy::serial"],[3169,"vmm::devices::pseudo"],[3172,"vmm::devices::pseudo::boot_timer"],[3188,"vmm::devices::virtio"],[3229,"vmm::devices::virtio::balloon"],[3309,"vmm::devices::virtio::balloon::device"],[3468,"vmm::devices::virtio::balloon::metrics"],[3489,"vmm::devices::virtio::balloon::persist"],[3571,"vmm::devices::virtio::balloon::util"],[3573,"vmm::devices::virtio::block_common"],[3596,"vmm::devices::virtio::device"],[3658,"vmm::devices::virtio::device_status"],[3664,"vmm::devices::virtio::gen"],[3668,"vmm::devices::virtio::gen::virtio_blk"],[3694,"vmm::devices::virtio::gen::virtio_net"],[3747,"vmm::devices::virtio::gen::virtio_ring"],[3748,"vmm::devices::virtio::gen::virtio_rng"],[3756,"vmm::devices::virtio::iovec"],[3814,"vmm::devices::virtio::mmio"],[3853,"vmm::devices::virtio::net"],[3907,"vmm::devices::virtio::net::device"],[4030,"vmm::devices::virtio::net::gen"],[4033,"vmm::devices::virtio::net::gen::if_tun"],[4186,"vmm::devices::virtio::net::gen::iff"],[4544,"vmm::devices::virtio::net::gen::sockios"],[4627,"vmm::devices::virtio::net::metrics"],[4683,"vmm::devices::virtio::net::persist"],[4764,"vmm::devices::virtio::net::tap"],[4831,"vmm::devices::virtio::persist"],[4939,"vmm::devices::virtio::queue"],[5062,"vmm::devices::virtio::rng"],[5070,"vmm::devices::virtio::rng::device"],[5148,"vmm::devices::virtio::rng::metrics"],[5170,"vmm::devices::virtio::rng::persist"],[5222,"vmm::devices::virtio::vhost_user"],[5297,"vmm::devices::virtio::vhost_user_block"],[5322,"vmm::devices::virtio::vhost_user_block::device"],[5411,"vmm::devices::virtio::vhost_user_block::persist"],[5448,"vmm::devices::virtio::vhost_user_metrics"],[5480,"vmm::devices::virtio::virtio_block"],[5523,"vmm::devices::virtio::virtio_block::device"],[5654,"vmm::devices::virtio::virtio_block::io"],[5741,"vmm::devices::virtio::virtio_block::io::async_io"],[5804,"vmm::devices::virtio::virtio_block::io::sync_io"],[5839,"vmm::devices::virtio::virtio_block::metrics"],[5885,"vmm::devices::virtio::virtio_block::persist"],[5945,"vmm::devices::virtio::virtio_block::request"],[6092,"vmm::devices::virtio::virtio_block::request::IoErr"],[6094,"vmm::devices::virtio::virtio_block::request::Status"],[6098,"vmm::devices::virtio::vsock"],[6174,"vmm::devices::virtio::vsock::csm"],[6255,"vmm::devices::virtio::vsock::csm::connection"],[6302,"vmm::devices::virtio::vsock::csm::defs"],[6306,"vmm::devices::virtio::vsock::csm::txbuf"],[6327,"vmm::devices::virtio::vsock::defs"],[6332,"vmm::devices::virtio::vsock::defs::uapi"],[6346,"vmm::devices::virtio::vsock::device"],[6404,"vmm::devices::virtio::vsock::metrics"],[6439,"vmm::devices::virtio::vsock::packet"],[6519,"vmm::devices::virtio::vsock::persist"],[6618,"vmm::devices::virtio::vsock::unix"],[6660,"vmm::devices::virtio::vsock::unix::defs"],[6663,"vmm::devices::virtio::vsock::unix::muxer"],[6757,"vmm::devices::virtio::vsock::unix::muxer::EpollListener"],[6759,"vmm::devices::virtio::vsock::unix::muxer::MuxerRx"],[6761,"vmm::devices::virtio::vsock::unix::muxer_killq"],[6798,"vmm::devices::virtio::vsock::unix::muxer_rxq"],[6821,"vmm::dumbo"],[6837,"vmm::dumbo::pdu"],[6882,"vmm::dumbo::pdu::arp"],[6954,"vmm::dumbo::pdu::bytes"],[6978,"vmm::dumbo::pdu::ethernet"],[7026,"vmm::dumbo::pdu::ipv4"],[7106,"vmm::dumbo::pdu::tcp"],[7250,"vmm::dumbo::pdu::udp"],[7301,"vmm::dumbo::tcp"],[7342,"vmm::dumbo::tcp::connection"],[7597,"vmm::dumbo::tcp::endpoint"],[7631,"vmm::dumbo::tcp::handler"],[7773,"vmm::io_uring"],[7848,"vmm::io_uring::bindings"],[8288,"vmm::io_uring::operation"],[8335,"vmm::io_uring::operation::cqe"],[8353,"vmm::io_uring::operation::sqe"],[8366,"vmm::io_uring::probe"],[8369,"vmm::io_uring::queue"],[8372,"vmm::io_uring::queue::completion"],[8413,"vmm::io_uring::queue::mmap"],[8430,"vmm::io_uring::queue::submission"],[8478,"vmm::io_uring::restriction"],[8491,"vmm::logger"],[8577,"vmm::logger::logging"],[8710,"vmm::logger::metrics"],[9228,"vmm::mmds"],[9262,"vmm::mmds::data_store"],[9349,"vmm::mmds::ns"],[9431,"vmm::mmds::persist"],[9453,"vmm::mmds::token"],[9533,"vmm::mmds::token_headers"],[9556,"vmm::persist"],[9801,"vmm::rate_limiter"],[9931,"vmm::rate_limiter::persist"],[9972,"vmm::resources"],[10084,"vmm::rpc_interface"],[10300,"vmm::seccomp_filters"],[10301,"vmm::signal_handler"],[10316,"vmm::utilities"],[10319,"vmm::utilities::mock_devices"],[10334,"vmm::utilities::mock_resources"],[10384,"vmm::utilities::test_utils"],[10389,"vmm::version_map"],[10424,"vmm::vmm_config"],[10496,"vmm::vmm_config::balloon"],[10601,"vmm::vmm_config::boot_source"],[10673,"vmm::vmm_config::drive"],[10770,"vmm::vmm_config::entropy"],[10827,"vmm::vmm_config::instance_info"],[10870,"vmm::vmm_config::machine_config"],[10967,"vmm::vmm_config::metrics"],[11001,"vmm::vmm_config::mmds"],[11042,"vmm::vmm_config::net"],[11125,"vmm::vmm_config::snapshot"],[11284,"vmm::vmm_config::vsock"],[11359,"vmm::vstate"],[11362,"vmm::vstate::memory"],[11704,"vmm::vstate::memory::address"],[11722,"vmm::vstate::vcpu"],[11896,"vmm::vstate::vcpu::x86_64"],[12074,"vmm::vstate::vm"],[12176,"core::any"],[12177,"core::result"],[12178,"alloc::vec"],[12179,"core::fmt"],[12180,"core::fmt"],[12181,"vmm_sys_util::errno"],[12182,"std::sync::mutex"],[12183,"core::option"],[12184,"event_manager::events"],[12185,"event_manager::events"],[12186,"seccompiler::common"],[12187,"alloc::sync"],[12188,"alloc::string"],[12189,"core::any"],[12190,"versionize"],[12191,"std::io"],[12192,"core::hash"],[12193,"std::io"],[12194,"core::cmp"],[12195,"kvm_bindings::x86_64::bindings"],[12196,"kvm_bindings::x86_64::bindings"],[12197,"kvm_bindings::x86_64::bindings"],[12198,"vmm_sys_util::fam"],[12199,"kvm_ioctls::ioctls::system"],[12200,"kvm_bindings::x86_64::fam_wrappers"],[12201,"bitflags::iter"],[12202,"bitflags::iter"],[12203,"core::iter::traits::iterator"],[12204,"core::fmt"],[12205,"event_manager"],[12206,"seccompiler"],[12207,"userfaultfd"],[12208,"vmm_sys_util::linux::eventfd"],[12209,"linux_loader::cmdline"],[12210,"std::io"],[12211,"std::io::stdio"],[12212,"core::default"],[12213,"serde::de"],[12214,"core::cmp"],[12215,"core::hash"],[12216,"core::fmt"],[12217,"alloc::collections::btree::map"],[12218,"kvm_bindings::x86_64::fam_wrappers"],[12219,"core::ops::range"],[12220,"serde_json::error"],[12221,"kvm_ioctls::ioctls::vm"],[12222,"core::ops::function"],[12223,"std::collections::hash::map"],[12224,"core::ops::function"],[12225,"std::os::fd::raw"],[12226,"vm_superio"],[12227,"vm_superio::serial"],[12228,"core::sync::atomic"],[12229,"libc::unix"],[12230,"vm_memory::guest_memory"],[12231,"vm_memory::volatile_memory"],[12232,"vm_memory::io"],[12233,"utils::net::mac"],[12234,"std::os::raw"],[12235,"std::os::raw"],[12236,"aws_lc_rs::error"],[12237,"std::os::unix::net::stream"],[12238,"vhost::vhost_user::message"],[12239,"vhost::vhost_user::message"],[12240,"vhost::vhost_user::message"],[12241,"vhost::backend"],[12242,"std::fs"],[12243,"utils::kernel_version"],[12244,"vmm_sys_util::linux::epoll"],[12245,"std::time"],[12246,"vm_memory::volatile_memory"],[12247,"core::ops::deref"],[12248,"core::marker"],[12249,"micro_http::common"],[12250,"micro_http::response"],[12251,"log"],[12252,"core::fmt"],[12253,"micro_http::common::headers"],[12254,"aes_gcm"],[12255,"bincode::error"],[12256,"micro_http::common"],[12257,"std::path"],[12258,"timerfd"],[12259,"std::sync::mpsc"],[12260,"std::sync::mpsc"],[12261,"vmm_sys_util::errno"],[12262,"vmm_sys_util::unix::tempdir"],[12263,"serde::de"],[12264,"core::cmp"],[12265,"core::slice::iter"],[12266,"vm_memory::guest_memory"],[12267,"vm_memory::mmap"],[12268,"memfd::memfd"],[12269,"core::sync::atomic"],[12270,"core::ops::function"],[12271,"std::thread"],[12272,"seccompiler"],[12273,"kvm_bindings::x86_64::fam_wrappers"]],"d":["Command line arguments parsing error.","Bad configuration for microvm’s resources, when using a …","Firecracker was shut down after intercepting a restricted …","Device manager error: {0}","Shorthand type for KVM dirty page bitmap.","Error getting the KVM dirty bitmap. {0}","Failed to dump CPU config: {0}","Error type for <code>Vmm::dump_cpu_config()</code>","Emulate serial init error: {0}","Event fd error: {0}","Shorthand type for the EventManager flavour used by …","Vmm exit-code type.","Generic error exit code.","Default byte limit of accepted http requests on API and …","I8042 error: {0}","Cannot access kernel file: {0}","Cannot add devices to the legacy I/O Bus. {0}","Metrics error: {0}","Operation not allowed: {0}","Success exit code.","Timeout used in recv_timeout, when waiting for a vcpu …","Cannot add a device to the MMIO Bus. {0}","Firecracker was shut down after intercepting <code>SIGBUS</code>.","Firecracker was shut down after intercepting <code>SIGHUP</code>.","Firecracker was shut down after intercepting <code>SIGILL</code>.","Firecracker was shut down after intercepting <code>SIGPIPE</code>.","Firecracker was shut down after intercepting <code>SIGSEGV</code>.","Firecracker was shut down after intercepting <code>SIGXCPU</code>.","Firecracker was shut down after intercepting <code>SIGXFSZ</code>.","Cannot install seccomp filters: {0}","Failed to send event to vcpu thread: {0:?}","Error writing to the serial console: {0}","Error type for <code>Vmm::start_vcpus</code>.","Error creating timer fd: {0}","Generic exit code for an error considered not possible to …","Got unexpected response from vcpu thread.","","","Error configuring the vcpu for boot: {0}","Error creating the vcpu: {0}","","Cannot send event to vCPU. {0}","Failed to exit the vCPUs.","","Cannot create a vCPU handle. {0}","Vcpu handle error: {0}","Failed to message the vCPUs.","Failed to pause the vCPUs.","","Failed to resume the vCPUs.","Cannot spawn Vcpu thread: {0}","Failed to start vCPUs","","Vm error: {0}","Contains the state and associated methods required for the …","Errors associated with the VMM internal logic. These …","Error thrown by observer object on Vmm initialization: {0}","VMM observer init error: {0}","Error thrown by observer object on Vmm teardown: {0}","","","","","Implements platform specific functionality. Supported …","Architecture specific bindings.","","","","","","","","","","","","","Returns a reference to the balloon device if present.","","","","","","","","","","","","","","Handles setup and initialization a <code>Vmm</code> object. Enables …","","","","Types for guest configuration.","","Emulates virtual and hardware devices. Emulates virtual …","","minimalist HTTP/TCP/IPv4 stack named DUMBO Provides helper …","Dumps CPU configuration.","Sets RDA bit in serial console","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Gets the specified bus device.","Retrieves the KVM dirty bitmap for each of the guest’s …","Returns a reference to the inner <code>GuestMemoryMmap</code> object.","","","Gets Vmm instance info.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","High-level interface over Linux io_uring.","Returns the latest balloon statistics if they are enabled.","Logger Crate that implements Firecracker specific …","Returns the size of guest memory, in MiB.","microVM Metadata Service MMDS","","Sends a pause command to the vCPUs.","Save/restore utilities. Defines state structures for …","","Handle a read event (EPOLLIN).","Rate Limiter","Resource store for configured microVM resources.","Sends a resume command to the vCPUs.","microVM RPC API adapters.","Saves the state of a paused Microvm.","","Seccomp filter utilities.","Injects CTRL+ALT+DEL keystroke combo in the i8042 device.","Enables or disables KVM dirty page tracking.","Provides the Vmm shutdown exit code if there is one.","","Signal handling utilities.","","","","Starts the microVM vcpus.","Signals Vmm to stop and exit.","","","","","","","","","","","","","","","","","","","","","","","","","","Updates configuration for the balloon device target size.","Updates configuration for the balloon device as described …","Updates the path of the host file backing the emulated …","Updates the rate limiter parameters for block device with …","Updates the rate limiter parameters for net device with …","Updates the rate limiter parameters for block device with …","Utility functions for integration and benchmark testing","","","Gets Vmm version.","microVM state versions. Provides the VersionMap that deals …","","Wrappers over structures used to configure the VMM.","Module with virtual state structs.","Device Type: BootTimer.","","","Types of devices that can get attached to this platform.","","","Type for passing information about the initrd in the guest …","","","Default (smallest) memory page size for the supported …","Device Type: Virtio.","Load address of initrd in guest memory","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Size of initrd in guest memory","","","","","","","","","","Module for x86_64 related functionality.","Errors thrown while configuring x86_64 system.","Invalid e820 setup params.","","","","","","Failed to compute initrd address.","Size of MMIO gap at top of 32-bit address space.","The size of the memory area reserved for MMIO devices.","The start of the memory area reserved for MMIO devices.","Error writing MP table to memory: {0}","Error writing the zero page of guest memory.","","Add an e820 region to the e820 map. Returns Ok(()) if …","Returns a Vec of the valid memory addresses. These should …","","","","","Configures the system and should be called once per vm …","Logic for handling x86_64 CPU models.","","","","","Returns the argument unchanged.","","Returns the memory address where the kernel could be …","Returns the memory address where the initrd could be …","Contains logic for setting up Advanced Programmable …","Calls <code>U::from(self)</code>.","Layout for the x86_64 system.","","Logic for configuring x86_64 model specific registers …","Logic for configuring x86_64 registers.","","","","","","Structure representing x86_64 CPU model.","","","","","","","Extended family.","Extended model.","Family.","","","Returns the argument unchanged.","Get CPU model from current machine.","Calls <code>U::from(self)</code>.","Check if the current CPU model is Intel Cascade Lake or …","Model.","","Stepping.","","","","Constructor for a conventional segment GDT (or LDT) entry. …","","","","","","","","","","","Automatically build the kvm struct for SET_SREGS from the …","","","","","Failure in getting the LAPIC configuration: {0}","Errors thrown while configuring the LAPIC.","Failure in setting the LAPIC configuration: {0}","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","Configures LAPICs.  LAPIC0 is set for external interrupts, …","","","","","Magic addresses externally used to lay out x86_64 VMs. …","Kernel command line maximum size.","Kernel command line start address.","Start of the high memory.","First usable IRQ ID for virtio device interrupts on x86_64.","Last usable IRQ ID for virtio device interrupts on x86_64.","Address for the TSS setup.","The ‘zero page’, a.k.a linux kernel bootparams.","","","The MP table has too little address space to be stored.","","","","","Failure while zeroing out the memory for the MP table.","","","","","","","","","There was too little guest memory to store the entire MP …","","Number of CPUs exceeds the maximum supported CPUs","Number of IRQs exceeds the maximum supported IRQs","Failure to write MP bus entry.","Failure to write MP CPU entry.","Failure to write MP interrupt source entry.","Failure to write MP ioapic entry.","Failure to write MP local interrupt source entry.","Failure to write MP table header.","Failure to write the MP floating pointer.","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Performs setup of the MP table for the given <code>num_cpus</code>.","","","","","Base MSR for APIC","Number of APIC MSR indexes","Feature flags enumerated in the IA32_ARCH_CAPABILITIES MSR.","A value of 1 indicates BHI_NO branch prediction behavior, …","The processor supports data operand independent timing …","Processor supports setting and reading …","The processor is not affected by the Fill Buffer Stale …","The processor will overwrite fill buffer values as part of …","The processor supports read and write to the …","Failed to create <code>vmm_sys_util::fam::FamStructWrapper</code> for …","Failed to get MSR index list: {0}","The processor supports enhanced Indirect Branch …","The processor is not susceptible to a machine check error …","Invalid CPU vendor: {0}","Processor is not susceptible to Microarchitectural Data …","Processor supports IA32_MISC_PACKAGE_CTRLS MSR.","Architecture capabilities MSR","","Taken from arch/x86/include/asm/msr-index.h Spectre …","","","","","","","Custom MSRs fall in the range 0x4b564d00-0x4b564dff","","MSR related errors.","MSR range","If set, the IA32_OVERCLOCKING STATUS MSR exists.","The processor is not affected by vulnerabilities involving …","The processor is not susceptible to Rogue Data Cache Load …","A value of 1 indicates processor may have the RRSBA …","The processor supports RSB Alternate. Alternative branch …","The processor is not affected by either the Shared Buffers …","","A value of 1 indicates the hypervisor need not flush the …","Processor is not susceptible to Speculative Store Bypass …","Failed to set MSRs: {0}","Not all given MSRs were set.","Processor is not susceptible to Intel® Transactional …","The processor supports RTM_DISABLE and TSX_CPUID_CLEAR.","","List of MSRs that should not be included in the dump of …","","Get a flags value with all known bits set.","","","","","","","Base MSR address","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","Get the underlying bits value.","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Returns whether <code>msr</code> is contained in this MSR range.","Whether all set bits in a source flags value are also set …","Creates and populates required MSR entries for booting …","","The intersection of a source flags value with the …","Get a flags value with all bits unset.","","The bitwise or (<code>|</code>) of the bits in each flags value.","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a bits value.","Convert from a bits value exactly.","","Convert from a bits value, unsetting any unknown bits.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","Returns the list of dumpable MSR indices.","Returns the list of serializable MSR indices.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","Yield a set of contained flags values.","Yield a set of contained named flags values.","Specifies whether a particular MSR should be dumped.","Specifies whether a particular MSR should be dumped on AMD","Specifies whether a particular MSR should be included in …","Number of MSRs","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The intersection of a source flags value with the …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Configure Model Specific Registers (MSRs) required to boot …","","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","","","","Failed to configure segments and special registers: {0}","","","Failed to get special registers: {0}","Failed to get SREGs for this CPU: {0}","","","","Errors thrown while setting up x86_64 registers.","Failed to set base registers for this CPU: {0}","Failed to configure the FPU: {0}","Failed to set special registers: {0}","Failed to set SREGs for this CPU: {0}","Error type for <code>setup_fpu</code>.","Failed to setup page tables: {0}","Error type of <code>setup_regs</code>.","Error type for <code>setup_sregs</code>.","Writing the GDT to RAM failed.","Writing the IDT to RAM failed","WritePDEAddress","WritePDPTEAddress","WritePML4Address","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Configure Floating-Point Unit (FPU) registers for a given …","","Configure base registers for a given CPU.","Configures the special registers and system page tables …eturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codenable to attach block device to Vmm: {0}","Error type for <code>build_microvm_from_snapshot</code>.","System configuration error: {0}","Cannot create the entropy device: {0}","Failed to create guest config: {0}","Error creating legacy device: {0}","Failed to create microVM and vCPUs: {0}","Cannot create network device: {0}","Cannot create RateLimiter: {0}","Failed to emulate MMIO serial: {0}","Failed to get CPU template: {0}","Could not get TSC to check if TSC scaling was required …","Invalid Memory Configuration: {0}","Cannot load initrd due to an invalid memory configuration.","Cannot load initrd due to an invalid image: {0}","Internal error while starting microVM: {0}","Invalid kernel command line: {0}","Cannot load kernel due to invalid memory configuration or …","Could not access KVM: {0}","Cannot load command line string: {0}","Cannot start microvm without kernel configuration.","Cannot start microvm without guest mem_size config.","No seccomp filter for thread category: {0}","Failed to start vCPUs as no vCPU seccomp filter found.","Failed to apply VMM secccomp filter as none found.","The net device configuration is missing the tap device.","Cannot open the block device backing file: {0}","Cannot initialize a MMIO Device or add a device to the …","Cannot restore microvm state: {0}","Failed to restore MMIO device: {0}","Failed to restore microVM state: {0}","Failed to restore vCPUs: {0}","Failed to apply VMM secccomp filter: {0}","Could not set TSC scaling within the snapshot: {0}","Cannot set vm resources: {0}","Errors associated with starting the instance.","Failed to start vCPUs: {0}","Only 255 vCPU state are supported, but {0} states where …","Error configuring the TSC, frequency not present in the …","Failed to update microVM configuration: {0}","","","","","","","","","","","","","Attaches a VirtioDevice device to the device manager and …","","","","","Builds and boots a microVM based on the current …","Builds and starts a microVM based on the current …","Builds and starts a microVM based on the provided …","Configures the system for booting Linux.","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Loads the initrd from a file into the given memory slice.","","","","Sets up the irqchip for a x86_64 microVM.","Sets up the serial device.","","","","","","","","","","","Module with types used for custom CPU templates","Module with ser/de utils for custom CPU templates","Module containing type implementations needed for x86 CPU …","Add capability to the check list.","Number of bits for type","","Enum that represents types of cpu templates available.","CPU vendor mismatched between actual CPU and CPU template.","Custom cpu template","","Trait to unwrap the inner <code>CustomCpuTemplate</code> from …","Error for GetCpuTemplate trait.","Failed to get CPU vendor information: {0}","","The current CPU model is not permitted to apply the CPU …","Invalid static CPU template: {0}","Struct to represent user defined kvm capability. Users can …","Trait for numeric types","Bit-mapped value to adjust targeted bits of a register.","Remove capability from the check list.","Static cpu template","","","Applies filter to the value","","","","","","","","","Value of bit at pos","","","","","","","","","","","","","","","","","Deserialize string into a KvmCapability.","","Deserialize a composite bitmap string into a value pair …","","","","","Filter to be used when writing the value bits.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get CPU template","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns 1 of the type","","Serialize KvmCapability into a string.","Serialize combination of value and filter into a single …","","","","","","","","","","","","","","","","","","Value to be applied.","","Returns 0 of the type","","","","","","","Deserializes number from string. Number can be in binary, …","Deserializes number from string. Number can be in binary, …","Serializes number to hex","CPU configuration for x86_64 CPUs","Errors thrown while configuring templates.","Template changes a CPUID entry not supported by KVM: Leaf: …","Can create cpuid from raw: {0}","Template changes an MSR entry not supported by KVM: …","KVM vcpu ioctl failed: {0}","","Modifies provided config with changes from template","","","","","","","","","","","Module for CPUID instruction related content Utility for …","CPUID configuration","Module for custom CPU templates","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Register values as a key pair for model specific registers …","Module for static CPU templates","Module with test utils for custom CPU templates","","","","","","","","","Failed to apply modifications to AMD CPUID: {0}","AMD CPUID specific information.","","To store the brand string we have 3 leaves, each with 4 …","Failed to set <code>CLFLUSH line size</code>: {0}","Provided <code>cpu_bits</code> is &gt;=8: {0}.","CPUID information","CPUID entry information stored for each leaf of <code>IntelCpuid</code>.","CPUID index values <code>leaf</code> and <code>subleaf</code>.","To transmute this into leaves such that we can return …","Trait defining shared behaviour between CPUID structures.","Error type for conversion from <code>kvm_bindings::CpuId</code> to <code>Cpuid</code>…","Zero.","Failed to set extended cache features leaf: {0}","Failed to set extended topology leaf: {0}","Failed to set feature information leaf: {0}","Error type for setting leaf 1 section of …","Failed to get max CPUs per package: {0}","Error type for <code>get_max_cpus_per_package</code>.","Failed to set <code>Initial APIC ID</code>: {0}","Failed to apply modifications to Intel CPUID: {0}","Intel CPUID specific information.","","Definitions from `kvm/arch/x86/include/uapi/asm/kvm.h","Error type for <code>CpuidTrait::apply_brand_string</code>.","Leaf 0 not found in the given <code>kvm_bindings::CpuId</code>.","Leaf 0x1 is missing from CPUID.","Error type for <code>super::Cpuid::normalize</code>.","Failed to get max CPUs per package as <code>cpu_count &gt; 128</code>","Indicates if the <code>index</code> field is used for indexing …","Deprecated.","Deprecated.","Failed to set max CPUs per package: {0}","Failed to get max CPUs per package as <code>cpu_count == 0</code>","Unsupported CPUID manufacturer id: &quot;{0:?}&quot; (only ‘…","AMD brand string.","AMD brand string.","Intel brand string.","Intel brand string.","Failed to set vendor ID in leaf 0x0: {0}","","AMD CPUID specification handling.","Returns <code>Some(&amp;AmdCpuid)</code> if <code>Self == Self::Amd(_)</code> else …","Returns <code>Some(&amp;mut AmdCpuid)</code> if <code>Self == Self::Amd(_)</code> else …","Applies a given brand string to CPUID.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cpuid utility functions.","Mimic of <code>std::arch::x86_64::__cpuid</code> that wraps <code>cpuid_count</code>.","Safe wrapper around <code>std::arch::x86_64::__cpuid_count</code>.","","","","","","","","EAX","EBX","ECX","EDX","","","","","","","","The KVM requires a <code>flags</code> parameter which indicates if a …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Gets a given sub-leaf.","Gets a given sub-leaf.","Gets a given sub-leaf.","Gets a given sub-leaf.","","Gets the Intel default brand. Gets host brand string.","Returns imumutable reference to inner BTreeMap&lt;CpuidKey, …","Returns mutable reference to inner BTreeMap&lt;CpuidKey, …","Intel CPUID specification handling.","Returns <code>Some(&amp;IntelCpuid)</code> if <code>Self == Self::Intel(_)</code> else …","Returns <code>Some(&amp;mut IntelCpuid)</code> if <code>Self == Self::Intel(_)</code> …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","<code>CpuidKey { leaf, subleaf: 0 }</code>","CPUID leaf.","CPUID normalize implementation.","Applies required modifications to CPUID respective of a …","","","Register values.","","","","<code>CpuidKey { leaf, subleaf }</code>","CPUID subleaf.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Update extended topology entry","","Pass-through the vendor ID from the host. This is used to …","Returns the CPUID manufacturers ID (e.g. <code>GenuineIntel</code> or …","A structure matching the AMD CPUID specification as …","Failed to set brand string: {0}","Failed to set <code>compute_unit_id</code>: {0}","Provided <code>cpu_bits</code> is &gt;=8: {0}.","We always use this brand string.","Failed to set extended APIC ID leaf: {0}","Failed to set <code>extended_apic_id</code>: {0}","Error type for setting leaf 0x8000001e section of …","Failed to set extended cache topology leaf: {0}","Error type for setting leaf 0x8000001d section of …","Failed to set feature entry leaf: {0}","Error type for setting leaf 0x80000008 section of …","Missing leaf 0x7 / subleaf 0.","Missing leaf 0x80000000.","Missing leaf 0x80000001.","Missing leaf 0x80000008.","Missing leaf 0x8000001d.","Missing leaf 0x8000001e.","Error type for <code>super::AmdCpuid::normalize</code>.","Failed to set <code>num_sharing_cache</code>: {0}","Failed to set <code>num_sharing_cache</code> due to overflow.","Failed to set <code>nt</code> (number of physical threads).","Failed to set <code>nt</code> (number of physical threads) due to …","Failed to passthrough cache topology: {0}","Failed to set <code>threads_per_compute_unit</code>: {0}","","","","","","","","","Returns the argument unchanged.","","Gets a given sub-leaf.","Gets a given sub-leaf.","Calls <code>U::from(self)</code>.","CPUID normalize implementation.","Applies required modifications to CPUID respective of a …","Passthrough cache topology.","","","","","Update AMD feature entry.","Update brand string entry","Update extended apic id entry","Update extended cache topology entry.","Updated extended feature fn entry.","Update largest extended fn entry.","","The host vendor id does not match AMD.","Failed to set brand string: {0}","Failed to set <code>compute_unit_id</code>: {0}","Provided <code>cpu_bits</code> is &gt;=8: {0}.","Failed to set extended APIC ID leaf: {0}","Failed to set <code>extended_apic_id</code>: {0}","Error type for setting leaf 0x8000001e section of …","Failed to set extended cache topology leaf: {0}","Error type for setting leaf 0x8000001d section of …","Failed to set feature entry leaf: {0}","Error type for setting leaf 0x80000008 section of …","Missing leaf 0x7 / subleaf 0.","Missing leaf 0x80000000.","Missing leaf 0x80000001.","Missing leaf 0x80000008.","Missing leaf 0x8000001d.","Missing leaf 0x8000001e.","Failed to get the host vendor id: {0}","Error type for <code>super::AmdCpuid::normalize</code>.","Failed to set <code>num_sharing_cache</code>: {0}","Failed to set <code>num_sharing_cache</code> due to overflow.","Failed to set <code>nt</code> (number of physical threads).","Failed to set <code>nt</code> (number of physical threads) due to …","Failed to passthrough cache topology: {0}","Error type for setting cache topology section of …","Failed to set <code>threads_per_compute_unit</code>: {0}","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Error type for <code>get_cpuid</code>.","Invalid subleaf: {0}","Un-supported leaf: {0}","","","","","","","","","Returns the argument unchanged.","Extract entry from the cpuid.","Extracts the CPU vendor id from leaf 0x0.","Calls <code>U::from(self)</code>.","Returns MSRs to be saved based on CPUID features that are …","","","","","Failed to set brand string: {0}","Failed to set deterministic cache leaf: {0}","Error type for setting leaf 4 section of …","Failed to get brand string: {0}","A structure matching the Intel CPUID specification as …","Failed to set …","Failed to set …","Failed to set …","Failed to set …","Leaf 0x6 is missing from CPUID.","Leaf 0x7 / subleaf 0 is missing from CPUID.","Leaf 0xA is missing from CPUID.","Error type for <code>super::IntelCpuid::normalize</code>.","","","","","","","","","Returns the argument unchanged.","","Gets a given sub-leaf.","Gets a given sub-leaf.","Calls <code>U::from(self)</code>.","CPUID normalize implementation.","Applies required modifications to CPUID respective of a …","","","","","","Update deterministic cache entry","Update structured extended feature flags enumeration leaf","Update performance monitoring entry","Update power management entry","Failed to set brand string: {0}","We always use this brand string.","","Error type for <code>default_brand_string</code>.","Failed to set deterministic cache leaf: {0}","Error type for setting leaf 4 section of …","Failed to get brand string: {0}","Failed to set …","Failed to set …","Failed to set …","Failed to set …","Missing frequency: {0:?}.","Leaf 0x6 is missing from CPUID.","Leaf 0x7 / subleaf 0 is missing from CPUID.","Leaf 0xA is missing from CPUID.","Missing space: {0:?}.","Error type for <code>super::IntelCpuid::normalize</code>.","Insufficient space in brand string.","","","","","","","","","","","","","","","","Normalize brand string to a generic Xeon(R) processor, …","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Failed to apply modifications to AMD CPUID: {0}","Failed to set …","Error type for setting a bit range.","Failed to set <code>CLFLUSH line size</code>: {0}","Provided <code>cpu_bits</code> is &gt;=8: {0}.","Failed to set extended cache features leaf: {0}","Error type for setting leaf 0x80000006 of …","Failed to set extended topology leaf: {0}","Error type for setting leaf b section of …","Failed to set feature information leaf: {0}","Error type for setting leaf 1 section of …","Failed to get max CPUs per package: {0}","Error type for <code>get_max_cpus_per_package</code>.","Failed to set <code>Initial APIC ID</code>: {0}","Failed to apply modifications to Intel CPUID: {0}","Failed to set <code>Level Number</code>: {0}","Failed to set <code>Level Type</code>: {0}","Failed to set …","Leaf 0x0 is missing from CPUID.","Leaf 0x80000005 is missing from CPUID.","Leaf 0x80000006 is missing from CPUID.","Leaf 0x1 is missing from CPUID.","Error type for <code>super::Cpuid::normalize</code>.","Failed to get max CPUs per package as <code>cpu_count &gt; 128</code>","Failed to set all leaves, as more than <code>u32::MAX</code> sub-leaves …","Failed to set max CPUs per package: {0}","Failed to get max CPUs per package as <code>cpu_count == 0</code>","Failed to set vendor ID in leaf 0x0: {0}","Error type for setting leaf 0 section.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","The maximum number of logical processors per package is …","Gets a given range within a given value.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns a mask where the given range is ones.","Sets a given bit to a true or false (1 or 0).","Sets a given range to a given value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Composite type that holistically provides the location of …","CPUID register enumeration","Target register to be modified by a bitmap.","Wrapper type to containing x86_64 CPU config modifiers.","","","","","Wrapper of a mask defined as a bitmap to apply changes to …","Pointer of the location to be bit mapped.","","","","","","","","","","","Bit mapping to be applied as a modifier to the register’…","Bit mapping to be applied as a modifier to the register’…","","","","","","","","","","","","","","","","","","","","","","Modifiers for CPUID configuration.","","","","","","","","","","","","","","","","KVM feature flags for this leaf-subleaf.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get a list of MSR indices that are modified by the CPU …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Additional kvm capabilities to check before configuring …","Leaf value.","All registers to be modified under the sub-leaf.","Modifiers for model specific registers.","","CPUID register to be modified by the bitmap.","","","","","","","Sub-Leaf value.","","","","","","","","","","","","","","","","","","","","","","","Validate the correctness of the template.","C3 Template.","No CPU template is used.","Template types available for configuring the x86 CPU …","T2 Template.","T2A Template.","T2CL Template.","T2S Template.","","","","","Module with C3 CPU template for x86_64","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Check if no template specified","","","Module with T2 CPU template for x86_64","Module with T2A CPU template for x86_64","Module with T2CL CPU template for x86_64","Module with T2S CPU template for x86_64","","","","","","","C3 CPU template.","T2 template","T2A template","T2CL template","T2S template","Test CPU template in JSON format but has an invalid field …","Test CPU template in JSON format","Builds a sample custom CPU template","Legacy Device Manager.","Memory Mapped I/O Manager.","Device managers (de)serialization support. Provides …","Failed to add legacy device to Bus: {0}","x86 global system interrupt for communication events on …","x86 global system interrupt for communication events on …","Failed to create EventFd: {0}","i8042 keyboard data register address. See …","i8042 keyboard data register size.","x86 global system interrupt for keyboard port. See …","Errors corresponding to the <code>PortIODeviceManager</code>.","The <code>PortIODeviceManager</code> is a wrapper that is used for …","Legacy serial port device addresses. See …","Size of legacy serial ports.","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Create a new DeviceManager handling legacy devices (uart, …","Register supported legacy devices.","","","","","","","","","Failed to allocate requested resource: {0}","Failed to insert device on the bus: {0}","Failed to allocate requested resourc: {0}","Failed to find the device on the bus.","{0}","Invalid device type found on the MMIO bus.","Invalid MMIO IRQ configuration.","Stores the address range and irq allocated to this device.","Manages the complexities of registering a MMIO device.","This represents the size of the mmio device specified to …","Errors for MMIO device manager.","Failed to register IO event: {0}","Failed to register irqfd: {0}","","Append a registered virtio-over-MMIO device to the kernel …","Mmio address at which the device is registered.","","Allocates resources for a new device to be added.","","","","","","","","","","","","","","","","","","","","","","Run fn for each registered device.","Run fn for each registered virtio device.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets the specified device.","Gets the information of the devices registered up to some …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Used Irq line(s) for the device.","Artificially kick devices as if they had external events.","Mmio addr range length.","Create a new DeviceManager handling mmio devices (virtio …","Register a boot timer device.","Register a device at some MMIO address.","Register a virtio-over-MMIO device to be used via MMIO …","Allocate slot and register an already created …","","","","","","","","","","","","","","","","Run fn <code>f()</code> for the virtio device matching <code>virtio_type</code> and …","Balloon: {0}","","Holds the state of a balloon device connected to the MMIO …","Holds the state of an entropy device connected to the MMIO …","Holds the state of a net device connected to the MMIO …","Holds the state of a vhost-user block device connected to …","Holds the state of a virtio block device connected to the …","Holds the state of a vsock device connected to the MMIO …","Device manager: {0}","Errors for (de)serialization of the MMIO device manager.","Holds the device states.","Entropy: {0}","","","MmdsConfig: {0}","Holds the MMDS data store version.","Mmio transport","Net: {0}","","A type used to extract the concrete <code>Arc&lt;Mutex&lt;T&gt;&gt;</code> for each …","","","VhostUserBlock: {0}","","VirtioBlock: {0}","","Vsock: {0}","","VsockUnixBackend: {0}","","","","","","","","","","","","","","","","","","","","","","","","Balloon device state.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Device identifier.","Device identifier.","Device identifier.","Device identifier.","Device identifier.","Device identifier.","VmmResources.","VmmResources.","VmmResources.","VmmResources.","VmmResources.","VmmResources.","Device state.","Device state.","Device state.","Device state.","Device state.","Device state.","Entropy device state.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Mmds version.","Net device states.","","","","","","","","","","","","","","","","","","","Mmio transport state.","Mmio transport state.","Mmio transport state.","Mmio transport state.","Mmio transport state.","Mmio transport state.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Vhost-user block device states.","Virtio block device states.","","","Vsock device state.","","","","","Failed to read from the TAP device.","Failed to signal irq: {0}","IO error: {0}","Device received malformed descriptor.","Device received malformed payload.","Error during queue processing: {0}","Vsock device error: {0}","","","","","","Handles routing to devices in an address space.","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Implements legacy devices (UART, RTC etc).","Implements Firecracker specific devices (e.g. signal when …","","","","","","Implements virtio devices, queues, and transport …","","A device container for routing reads and writes over some …","","Errors triggered during bus operations.","","","","New device overlaps with an old device.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the device found at some address.","","","","Puts the given device at the given address space.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Constructs an a bus with an empty address space.","","","Reads data from the device that owns the range containing …","","","","","","","","","","","","","","","","","","","Writes <code>data</code> to the device that owns the range containing …","","Wrapper for implementing the trigger functionality for …","A i8042 PS/2 controller that emulates just enough to …","Errors thrown by the i8042 device.","","","i8042 internal buffer full.","Keyboard interrupt disabled by guest driver.","Could not trigger keyboard interrupt: {0}.","","","","","","","","","","The internal i8042 data buffer.","The last command sent to port 0x64.","The i8042 control register.","","Called by METRICS.flush(), this function facilitates …","","Returns the argument unchanged.","Get the associated event fd out of an <code>EventFdTrigger</code>.","","Calls <code>U::from(self)</code>.","Keyboard interrupt event (IRQ 1).","Create an <code>EventFdTrigger</code>.","The i8042 output port.","CPU reset eventfd. We will set this event when the guest …","Implements a wrapper over an UART serial device.","The i8042 status register.","","Clone an <code>EventFdTrigger</code>.","","","","Internal i8042 buffer size, in bytes","i8042 control register bits","","i8042 commands These values are written by the guest …","","","","","A i8042 PS/2 controller that emulates just enough to …","Metrics specific to the i8042 device.","Errors thrown by the i8042 device.","i8042 internal buffer full.","","Key scan codes","","Keyboard interrupt disabled by guest driver.","Could not trigger keyboard interrupt: {0}.","Stores aggregated metrics","Offset of the data port (port 0x60)","Offset of the status port (port 0x64)","","","i8042 status register bits","","","","","","","","","","","","","","","","The internal i8042 data buffer.","","","","The last command sent to port 0x64.","The i8042 control register.","Errors triggered while using the i8042 device.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Keyboard interrupt event (IRQ 1).","Number of superfluous read intents on this i8042 device.","Number of superfluous write intents on this i8042 device.","Const default construction.","Constructs an i8042 device that will signal the given …","The i8042 output port.","","","Bytes read by this device.","Number of resets done by this device.","CPU reset eventfd. We will set this event when the guest …","","The i8042 status register.","","Signal a ctrl-alt-del (reset) event.","","","","","","","","","","","","Bytes written by this device.","Received Data Available interrupt - for letting the driver …","Received Data Available interrupt offset","Stores aggregated metrics","","","Serial error: {0:?}","Type for representing a serial device.","Metrics specific to the UART device.","Wrapper over available events (i.e metrics, buffer ready …","","Wrapper over the imported serial device.","","","","","","","","","","","","","","","","","","","","","","","","","Buffer ready event.","","","","","Errors triggered while using the UART device.","","Number of flush operations.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Initial registration of pollable objects. If serial input …","Input to the serial device (needs to be readable).","Input to the serial device (needs to be readable).","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Checks whether the given file descriptor is a FIFO pipe.","Number of read calls that did not trigger a read.","Number of write calls that did not trigger a write.","Const default construction.","","Handle events on the serial input fd.","Send raw input to this emulated device.","Number of succeeded read calls.","","Serial device object.","Serial device object.","","","","","","","","","","","","","","","","","","","","","Number of succeeded write calls.","Pseudo device to record the kernel boot time.","","","Pseudo device to record the kernel boot time.","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create a device at a certain point in time.","","","","","Errors triggered when activating a VirtioDevice.","Trait that helps in upcasting an object to Any","General error at activation.","Epoll error.","Offset from the base MMIO address of a virtio device used …","Virtio balloon device ID.","Virtio block device ID.","Types taken from linux/virtio_ids.h. Type 0 is not used by …","Virtio rng device ID.","Vhost user: {0}","","Return the immutable any encapsulated object.","","Return the mutable encapsulated any object.","","Implements a virtio balloon device.","","","","","When the driver initializes the device, it lets the device …","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","Implements a virtio network device.","Defines the structures needed for saving/restoring Virtio …","","","","","","","","","Defines the metrics system for vhost-user devices.","Implements a virtio block device.","The Firecracker vsock device aims to provide full …","Activation error: {0}","Address translation error.","The size of the config space.","Device ID used in MMIO device identification. Because …","Number of virtio queues.","Virtio queue sizes, in number of descriptor chain heads.","","","Balloon device related errors.","","The index of the deflate queue from Balloon device …","Device not activated yet.","No balloon device found.","EventFd error: {0}","Guest gave us bad memory addresses: {0}","The index of the deflate queue from Balloon device …","Received error while sending an interrupt: {0}","The maximum number of pages that can be received in a …","The maximum number of pages that can be compacted into …","","Error calling madvise: {0}","Guest gave us a malformed descriptor.","Guest gave us a malformed payload.","Malformed guest address range.","Error calling mmap: {0}","Error while processing the virt queues: {0}","Error restoring the balloon device queues.","Region not found.","Error removing a memory region at inflate time: {0}","","The index of the deflate queue from Balloon device …","Received stats querry when stats are disabled.","Statistics cannot be enabled/disabled after activation.","Error creating the statistics timer: {0}","Amount of pages requested cannot fit in <code>u32</code>.","","","The addresses given by the driver are divided by 4096.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Defines the metrics system for balloon devices.","Defines the structures needed for saving/restoring balloon …","","","","","","","","","","","Virtio balloon device.","Holds configuration details for the balloon device.","","BalloonStats holds statistics returned from the …","","","","","","","","The number of MiB the device is currently holding.","","The number of 4K pages the device is currently holding.","Target size.","","","","","","","","","","","","","An estimate of how much memory is available (in bytes) for …","","","","","","","","","","","","","","","","","","","Return the config of the balloon device.","","","","","","","Whether or not to ask for pages back.","","","The amount of memory, in bytes, that can be quickly …","","","","","","","","","The amount of memory not being used for any purpose (in …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","The number of successful hugetlb page allocations in the …","The number of failed hugetlb page allocations in the guest.","Provides the ID of this balloon device.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Retrieve latest stats for the balloon device.","","Number of major faults.","","Number of minor faults.","Instantiate a new balloon device.","Obtain the number of 4K pages the device is currently …","","","","","","","","","","","","","Process device virtio queue(s).","","","","","","","","","","","","","","","","","Obtain the size of 4K pages the device is currently …","","","","","Interval of time in seconds at which the balloon …","","Amount of memory swapped in.","Amount of memory swapped out.","","The target size of the balloon, in MiB.","The target size of the balloon, in 4K pages.","","","","","Total amount of memory available (in bytes).","","","","","","","","","","","","","","","","","Update the target size of the balloon.","Update the the statistics polling interval.","","","","","Balloon Device associated metrics.","Stores aggregated balloon metrics","Number of times when activate failed on a balloon device.","","","","","Number of balloon device deflations.","Number of times when handling events on a balloon device …","Called by METRICS.flush(), this function facilitates …","","Returns the argument unchanged.","Number of balloon device inflations.","Calls <code>U::from(self)</code>.","Const default construction.","","","","","","","Information about the balloon config’s that are saved at …","Auxiliary structure for creating a device when resuming …","Information about the balloon that are saved at snapshot.","Information about the balloon stats that are saved at …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Pointer to guest memory.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This takes a vector of page frame numbers, and compacts …","","Configuration options for disk caching.","Flushing mechanic not will be advertised to the guest …","Flushing mechanic will be advertised to the guest driver …","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","Interrupt triggered by change in config.","Enum that indicates if a VirtioDevice is inactive or has …","","Helper struct that is responsible for triggering guest IRQs","The 2 types of interrupt sources in MMIO transport.","Trait for virtio devices to be driven by a virtio …","Interrupt triggered by used vring buffers.","Acknowledges that this set of features should be enabled.","Get acknowledged features of the driver.","Performs the formal activation for a device, which can be …","","","","","","","Get the available features offered by device.","The set of feature bits shifted by <code>page * 32</code>.","","","","","","","The virtio device type.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Check if virtio device has negotiated given feature.","Returns the device interrupt eventfd.","Returns the current device interrupt status.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Checks if the resources of this device are activated.","Checks if the device is activated.","Gets the memory attached to the device if it is activated.","","Returns the device queues event fds.","Returns the device queues.","Returns a mutable reference to the device queues.","Reads this device configuration space at <code>offset</code>.","Optionally deactivates this device and returns ownership …","Set acknowledged features of the driver. This function …","","","","","","","","","","","Writes to this device configuration space at <code>offset</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Guest memory error: {0}","This is essentially a wrapper of a <code>Vec&lt;libc::iovec&gt;</code> which …","This is essentially a wrapper of a <code>Vec&lt;libc::iovec&gt;</code> which …","","","Tried to create an ’IoVecMut` from a read-only …","Tried to create an <code>IoVec</code> from a write-only descriptor chain","","","","","Returns a pointer to the memory keeping the <code>iovec</code> structs","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Create an <code>IoVecBuffer</code> from a <code>DescriptorChain</code>","Create an <code>IoVecBufferMut</code> from a <code>DescriptorChain</code>","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the length of the <code>iovec</code> array.","Get the total length of the memory regions covered by this …","Get the total length of the memory regions covered by this …","","","Reads a number of bytes from the <code>IoVecBuffer</code> starting at a …","Reads up to <code>len</code> bytes from the <code>IoVecBuffer</code> starting at the …","","","","","","","","","","","","","","Writes a number of bytes into the <code>IoVecBufferMut</code> starting …","Writes up to <code>len</code> bytes into the <code>IoVecBuffer</code> starting at …","","","Implements the MMIO transport for virtio devices.","","","Interrupt flags (re: interrupt status &amp; acknowledge …","","","","","","","","","","","Gets the encapsulated VirtioDevice.","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Gets the encapsulated locked VirtioDevice.","","Constructs a new MMIO transport for the given virtio …","","","","","Update device status according to the state machine …","","","","","","","EventFd error: {0}","IO error: {0}","Error while creating ifreq structure: {0}. Invalid TUN/TAP …","Invalid interface name","Maximum size of the frame buffers handled by this device.","The number of queues of the network device.","","","Errors the network device can trigger.","Enum representing the Net device queue types","Couldn’t open /dev/net/tun: {0}","The index of the rx queue from Net device …","The RX queue","Error while setting the offload flags: {0}","Error while setting size of the vnet header: {0}","The index of the tx queue from Net device …","Handle for a network tap interface.","List of errors the tap implementation can throw.","Open tap device failed: {0}","Setting tap interface offload flags failed: {0}","Setting vnet header size failed: {0}","The TX queue","The VNET header is missing from the frame","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Defines the metrics system for Network devices.","Defines the structures needed for saving/restoring net …","","","","","","","","","","Add user.","","Descriptor chain too mall.","Empty queue.","","","Guest memory error: {0}","VirtIO network device.","Read only descriptor.","","","","","","","","","","","","","","","","","","","","","","","Configures the <code>MmdsNetworkStack</code> to allow device to forward …","","","","Disables the <code>MmdsNetworkStack</code> to prevent device to forward …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Provides the MAC of this net device.","","","","Provides the ID of this net device.","","Provides the host IFACE name of this net device.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Provides the MmdsNetworkStack of this net device.","The MMDS stack corresponding to this interface. Only if …","Create a new virtio network device given the interface …","Create a new virtio network device with the given TAP …","Updates the parameters for the rate limiters","","","","Process a single RX queue event.","","","","Process a single TX queue event.","","Process device virtio queue(s).","","","","","","","","","","","","","","","","","","","Provides a reference to the configured RX rate limiter.","","","","","The backend for this device: a tap.","","","","","","","","","","Provides a reference to the configured TX rate limiter.","","","","","","","","","Write a slice in a descriptor chain","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeeturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","enum net_device_flags - &amp;struct net_device flagsool of Network-related metrics per device behind a lock to","Network-related metrics.","map of network interface id and metrics this should be …","Number of times when activate failed on a network device.","Net metrics are SharedIncMetric where the diff of current …","Allocate <code>NetDeviceMetrics</code> for net device having id <code>iface_id</code>…","","","","","","","","","Number of times when interacting with the space config of …","","Number of times when handling events on a network device …","This function facilitates aggregation and serialization of …","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Number of times the mac address was updated through the …","used to access per net device metrics","No available buffer for the net device rx queue.","No available buffer for the net device tx queue.","Number of bytes received.","Number of successful read operations while receiving data.","Number of events associated with the rate limiter …","Number of errors while receiving data.","Number of packets received.","Number of RX partial writes to guest.","Number of events associated with the receiving queue.","Number of RX rate limiter throttling events.","Number of events received on the associated tap.","","Number of times reading from TAP failed.","Number of times writing to TAP failed.","","","","","Number of transmitted bytes.","Number of successful write operations while transmitting …","Number of errors while transmitting data.","Number of malformed TX frames.","Number of transmitted packets.","Number of TX partial reads from guest.","Number of events associated with the transmitting queue.","Number of events associated with the rate limiter …","Number of RX rate limiter throttling events.","Number of packets with a spoofed mac, sent by the guest.","","","Failed to create a network device: {0}","Failed to create a rate limiter: {0}","Information about the network config’s that are saved at …","Auxiliary structure for creating a device when resuming …","Errors triggered when trying to construct a network device …","Information about the network device that are saved at …","Indicator that no MMDS is associated with this device.","Failed to re-create the virtio state (i.e queues etc): {0}","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Pointer to guest memory.","Pointer to the MMDS data store.","The associated MMDS network stack.","","","","","","","","","","","","","","","","","","","","","","","","","","","Error while creating ifreq structure: {0}. Invalid TUN/TAP …","Invalid interface name","Couldn’t open /dev/net/tun: {0}","Error while setting the offload flags: {0}","Error while setting size of the vnet header: {0}","","","","","Handle for a network tap interface.","List of errors the tap implementation can throw.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Retrieve the interface’s name as a str.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create a TUN/TAP device given the interface name.","","Set the offload flags for the tap interface.","Set the size of the vnet hdr.","","","","","","","","","","","","","","Write an <code>IoVecBuffer</code> to tap","Snapshot state contains invalid queue info.","Auxiliary structure for initializing the transport when …","Transport information saved in snapshot.","Errors thrown during restoring virtio state.","Queue information saved in snapshot.","State of a VirtioDevice.","","Negotiated virtio features.","","Flag for activated status.","","","","","","","","","","","Available virtio features.","Guest physical address of the available ring","","","","","","","","","","","Does sanity checking on the <code>self</code> state against expected …","","","","","","","","","","Guest physical address of the descriptor table","","","","Device associated with the current MMIO state.","","Device type.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Construct the virtio state of a device.","The MMIO interrupt status.","The MMIO interrupt status as a usize.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Is device backed by vhost-user.","The maximal size in elements offered by the device","Pointer to guest memory.","","","The number of added used buffers since last guest kick","","List of queues.","Indicates if the queue is finished with configuration","","","","The queue size in elements the driver selected","","","","","","","","","","","","","","","","","","","","Guest physical address of the used ring","","","","Descriptor index out of bounds: {0}.","A virtio descriptor constraints with C representative.","A virtio descriptor chain.","","Max size of virtio queues offered by firecracker’s …","A virtio queue’s parameters.","","Failed to write value into the virtio queue used ring: {0}","","","","Return the actual size of the queue, as the driver may not …","Puts an available descriptor head into the used ring for …","","Guest physical address of device specific data","","","","","","","","","","","Fetch the available ring index (<code>virtq_avail-&gt;idx</code>) from …","Guest physical address of the available ring","","","","","","","","","","","","","","","","","","Guest physical address of the descriptor table","Pop the first available descriptor chain from the avail …","Enable notification suppression.","","","Includes next, write, and indirect bits","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Maximum size of the queue.","Gets if this descriptor chain has another descriptor chain …","Index into the descriptor table","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Checks if the driver has made any descriptor chains …","Validates the queue’s in-memory layout is correct.","","Validates that the queue’s representation is correct.","If the driver designated this as a write only descriptor.","Returns the number of yet-to-be-popped descriptor chains …","","Length of device specific data","The maximal size in elements offered by the device","Reference to guest memory","Constructs an empty virtio queue with the given <code>max_size</code>.","","","Index into the descriptor table of the next descriptor if …","","Gets the next descriptor in this descriptor chain, if …","","The number of added used buffers since last guest kick","Pop the first available descriptor chain from the avail …","Try to pop the first available descriptor chain from the …","Check if we need to kick the guest.","","Indicates if the queue is finished with configuration","","","Helper method that writes <code>val</code> to the <code>avail_event</code> field of …","The queue size in elements the driver selected","","","","","Try to enable notification events from the guest driver. …","","","","","","","","","","","","","","","","","Undo the effects of the last <code>self.pop()</code> call. The caller …","Get the value of the used event field of the avail ring.","Guest physical address of the used ring","VIRTIO_F_RING_EVENT_IDX negotiated (notification …","","","","","","","Defines the metrics system for entropy devices.","Defines the structures needed for saving/restoring entropy …","","","","Error while handling an Event file descriptor: {0}","Bad guest memory buffer: {0}","Could not get random bytes: {0}","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Stores aggregated entropy metrics","Number of device activation failures","","","","","Number of entropy bytes provided to guest","Number of entropy requests handled","Number of entropy queue event handling failures","Number of times an entropy request was rate limited","Called by METRICS.flush(), this function facilitates …","","Returns the argument unchanged.","Number of errors while getting random bytes on host","Calls <code>U::from(self)</code>.","Const default construction.","Number of events associated with the rate limiter","","","","","Create entropy: {0}","","","","Restore rate limiter: {0}","Virtio state: {0}","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Invalid available address","Failed to connect to UDS Unix stream: {0}","Invalid descriptor table address","Invalid used address","vhost-user error.","Get features failed: {0}","Get protocol features failed: {0}","","","vhost-user socket handle","Failed to read vhost eventfd: {0}","Set features failed: {0}","Set mem table failed: {0}","Set owner failed: {0}","Set protocol features failed: {0}","Set vring addr failed: {0}","Set vring base failed: {0}","Set vring call failed: {0}","Set vring enable failed: {0}","Set vring kick failed: {0}","Set vring num failed: {0}","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Constructor of <code>Frontend</code>","","Get from the underlying vhost implementation the feature …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Negotiate virtio and protocol features with the backend.","Connect to the vhost-user backend socket and mark self as …","","Enable features in the underlying vhost implementation …","Set vhost-user features to the backend.","","Set the memory map regions on the slave so it can …","Set the current Frontend as an owner of the session.","","Set vhost-user protocol features to the backend.","Sets the addresses of the different aspects of the vring.","Sets the base offset in the available vring.","Set the event file descriptor to signal when buffers are …","","Set the event file descriptor for adding buffers to the …","Set the size of the queue.","Set up vhost-user backend. This includes updating memory …","","","","","","","","","","","","Update guest memory table to the backend.","","","Cannot create config","Error opening eventfd: {0}","Error creating irqfd: {0}","Number of queues for the vhost-user block device.","Persistence error: {0}","Queue size for the vhost-user block device.","Vhost error: {0}","Vhost-user error: {0}","Vhost-user block device error.","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Defines the structures needed for saving/restoring block …","","","","","","Block device config space size in bytes.","","Use this structure to set up the Block Device before …","vhost-user block device.","","","","","","","","","","","","","","","","","","","","If set to true, the drive will ignore flush requests …","","","","","","","","Unique identifier of the drive.","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the current device interrupt status.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","If set to true, it makes the current device the root block …","","","","","","Part-UUID. Represents the unique id of the boot partition …","Prepare device for being snapshotted.","","","","","","","","","","","","","","","","","","","","","Socket path of the vhost-user process","","","","","","","","","","","","","Auxiliary structure for creating a device when resuming …","vhost-user block device state.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Pool of vhost_user-related metrics per device behind a …","vhost_user Device associated metrics.","map of vhost_user drive id and metrics this should be …","Number of times when activate failed on a vhost_user …","","Allocate <code>VhostUserDeviceMetrics</code> for vhost_user device …","","","","","","","","","Number of times when interacting with the space config of …","","","This function facilitates serialization of vhost_user …","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","used to access per vhost_user device metrics","","","","","","","","Size of config space for block device.","The number of queues of block device.","","Error manipulating the backing file: {0} {1}","","Cannot create config","Guest gave us too few descriptors in a descriptor chain.","Guest gave us a descriptor that was too short to use.","Error opening eventfd: {0}","Error coming from the IO engine: {0}","Getting a block’s metadata fails for any reason.","Guest gave us bad memory addresses.","Maximum number of io uring entries we allow in the queue.","The data length is invalid.","The requested operation would cause a seek beyond disk end.","Error creating an irqfd: {0}","Persistence error: {0}","Error coming from the rate limiter: {0}","Sector shift for block device.","Size of block sector.","Guest gave us a read only descriptor that protocol says to …","Guest gave us a write only descriptor that protocol says …","","Errors the block device can trigger.","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Defines the metrics system for block devices.","Defines the structures needed for saving/restoring block …","","","","","","Use an Async engine, based on io_uring.","Helper object for setting up all <code>Block</code> fields derived from …","The engine file type, either Sync or Async (through …","Use a Sync engine, based on blocking system calls.","Virtio device for exposing block level read/write …","Use this structure to set up the Block Device before …","","","","","","","","","","","","","","","","","","","","","","","","","","If set to true, the drive will ignore flush requests …","","","","Returns a copy of a device config","","","","","","","","","Unique identifier of the drive.","","","","","Retrieve the file engine type.","The type of IO engine used by the device.","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the current device interrupt status.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","If set to true, the drive is opened in read-only mode. …","If set to true, it makes the current device the root block …","Whether the Async engine is supported on the current host …","","Create a new file for the block device using a FileEngine","Create a new virtio block device that operates on the …","","","Part-UUID. Represents the unique id of the boot partition …","","Path of the backing file on the host","Prepare device for being snapshotted.","","","","","Device specific function for peaking inside a queue and …","Process a single event in the Virtio queue.","","Process device virtio queue(s).","","","","","","Rate Limiter for I/O operations.","","","","","","","","","","","","","","","","","","","","","","","","","","","Update the path to the file backing the block device","Update the backing file and the config space of the block …","Updates the parameters for the rate limiter","Provides vec containing the virtio block configuration …","","Async error: {0}","","","","","","","","Could not get kernel version: {0}","","Sync error: {0}","","","","Unsupported engine type: {0:?}","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","EventFd: {0}","GuestMemory: {0}","IO: {0}","IoUring: {0}","Submit: {0}","SyncAll: {0}","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Flush: {0}","Seek: {0}","SyncAll: {0}","","","Transfer: {0}","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Update the backing file of the engine","","Block Device associated metrics.","map of block drive id and metrics this should be protected …","Pool of block-related metrics per device behind a lock to …","Number of times when activate failed on a block device.","block metrics are SharedIncMetric where the diff of …","Allocate <code>BlockDeviceMetrics</code> for block device having id …","","","","","","","","","Number of times when interacting with the space config of …","","Number of times when handling events on a block device …","Number of failures in executing a request on a block …","Number of flushes operation triggered on this block device.","This function facilitates aggregation and serialization of …","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Number of invalid requests received for this block device.","Number of virtio events throttled because of the IO engine.","used to access per block device metrics","No available buffer for the block queue.","Number of events triggered on the queue of this block …","Number of events ratelimiter-related.","Number of rate limiter throttling events.","Number of bytes read by this block device.","Number of successful read operations.","","","","","","","","Number of update operation triggered on this block device.","Number of failures while doing update on this block device.","Number of bytes written by this block device.","Number of successful write operations.","Async File Engine.","Holds info about block’s file engine type. Gets saved in …","Sync File Engine.","Auxiliary structure for creating a device when resuming …","Holds info about the block device. Gets saved in snapshot.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Pointer to guest memory.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The request header represents the mandatory fields of each …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Reads the request header from GuestMemoryMmap starting at …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The total length of the descriptor chain ({0}) is less …","The total length of the descriptor chain ({0}) is too …","Empty queue","Error registering a new epoll-listening FD: {0}","Error creating an epoll FD: {0}","EventFd error: {0}","Bounds check failed on guest memory pointer.","Chained GuestMemoryMmap error: {0}","The vsock header <code>len</code> field holds an invalid value: {0}","The host made an invalid vsock port connection request.","A data fetch was attempted when no data was available.","A data buffer was expected for the provided packet, but it …","Virtio vsock device ID. Defined in …","Muxer connection limit reached.","Error accepting a new connection from the host-side Unix …","Error binding to the host-side Unix socket: {0}","Error connecting to a host-side Unix socket: {0}","Error reading from host-side Unix socket: {0}","Encountered an unexpected write-only virtio descriptor.","Encountered an unexpected read-only virtio descriptor.","Device ID used in MMIO device identification. Because …","Invalid virtio configuration: {0}","Structure representing the vsock device.","The vsock backend, which is basically an …","Any channel that handles vsock packet traffic: sending and …","A passive, event-driven object, that needs to be notified …","Vsock device related errors.","Vsock uds backend error: {0}","The vsock connection multiplexer.","Vsock backend related errors.","","","","","","","","","","","Guest CID.","A hash map used to store the active connections.","","","","","The nested epoll event set, used to register epoll …","","","","Returns the argument unchanged.","","Get the set of events for which the listener wants to be …","Checks whether there is pending incoming data inside the …","The Unix socket, through which host-initiated connections …","The file system path of the host-side Unix socket. This is …","Calls <code>U::from(self)</code>.","","A queue used for terminating connections that are taking …","A hash map used to store epoll event listeners / handlers.","The last used host-side port.","A hash set used to keep track of used host-side (local) …","Defines the metrics system for vsock devices.","Notify the listener that one ore more events have occurred.","<code>VsockPacket</code> provides a thin wrapper over the buffers …","Defines state and support structures for persisting Vsock …","","","Read/receive an incoming packet from the channel.","The RX queue. Items in this queue are consumed by …","Write/send a packet through the channel.","","","","","","A vsock connection state.","We need to yield a credit update packet …","The connection handshake has been performed successfully, …","The connection is scheduled to be forcefully terminated as …","The host (AF_UNIX) socket was closed.","The connection has been initiated by the host end, but is …","A VSOCK_OP_SHUTDOWN packet was received from the guest. …","The connection has been initiated by the guest, but we are …","An RX indication, used by <code>VsockConnection</code> to schedule …","A set of RX indications (<code>PendingRx</code> items).","We need to yield a connection request packet …","We need to yield a connection response packet …","We need to yield a forceful connection termination packet …","We need to yield a data packet (VSOCK_OP_RW), by reading …","An I/O error occurred, when attempting to write data to …","An I/O error occurred, when attempting to flush the …","Attempted to push data to a full TX buffer","","","","","","","","","","","","","","","","","","","","","","","","","This module implements our vsock connection state machine. …","Check if an item is present in this set.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Insert an item into the set.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Transform the enum value into a bitmask, that can be used …","Check if the set is empty.","Remove an item from the set and return:","","","","","","","","","","","","","","","","","A self-managing connection object, that handles …","Trait that vsock connection backends need to implement.","","","Get the file descriptor that this connection wants polled.","","","","","Get the kill timer value, if one is set.","Instant when this connection should be scheduled for …","","Returns the argument unchanged.","Total number of bytes that have been successfully written …","Get the event set that this connection is interested in.","Check if this connection needs to be scheduled for …","Check if the connection has any pending packet addressed …","Prepare a packet header for transmission to our peer.","Calls <code>U::from(self)</code>.","Schedule the connection to be forcefully terminated ASAP …","Our <code>self.fwd_cnt</code>, as last sent to the peer. This is used …","The local CID. Most of the time this will be the constant <code>2</code>…","The local (host) port.","Check if we need to ask the peer for a credit update …","Create a new host-initiated connection object.","Create a new guest-initiated connection object.","Notify the connection about an event (or set of events) …","Get the maximum number of bytes that we can send to our …","The amount of buffer space that the peer (guest) has …","The peer (guest) CID.","The total number of bytes that the peer has forwarded away.","Check if the credit information the peer has last received …","The peer (guest) port.","The set of pending RX packet indications that <code>recv_pkt()</code> …","Fill in a vsock packet, to be delivered to our peer (the …","The total number of bytes sent to the peer (guest vsock …","Send some raw data (a byte-slice) to the host stream.","Send some raw, untracked, data straight to the underlying …","Deliver a guest-generated packet to this connection.","Return the connections state.","The current connection state.","The (connected) host-side stream.","","","The TX buffer for this connection.","","Check if there is an expiry (kill) timer set for this …","When the guest thinks we have less than this amount of …","Connection request timeout, in millis.","Connection graceful shutdown timeout, in millis.","Vsock connection TX buffer capacity.","Total buffer size, in bytes.","A simple ring-buffer implementation, used by vsock …","","","","","The actual u8 buffer - only allocated after the first push.","Flush the contents of the ring-buffer to a writable stream.","","Returns the argument unchanged.","Ring-buffer head offset - where new data is pushed to.","Calls <code>U::from(self)</code>.","Check if the buffer holds any data that hasn’t yet been …","Get the used length of this buffer - number of bytes that …","Ring-buffer constructor.","Push a byte slice onto the ring-buffer.","Ring-buffer tail offset - where data is flushed from.","","","","","Max vsock packet data/buffer size.","Device ID used in MMIO device identification. Because …","Number of virtio queues.","Virtio queue sizes, in number of descriptor chain heads. …","","Virtio feature flags. Defined in …","The device conforms to the virtio spec version 1.0.","Virtio vsock device ID. Defined in …","Vsock packet flags. Defined in …","Valid with a VSOCK_OP_SHUTDOWN packet: the packet sender …","","Flow control credit update request.","Flow control credit update.","Vsock packet operation IDs. Defined in …","Connection response.","Connection reset.","Connection data (read/write).","Connection clean shutdown.","Vsock packet type. Defined in …","The virtio features supported by our vsock device:","","","","","Structure representing the vsock device.","","","","","","","","","Access the backend behind the device.","","","","Retrieve the cid associated with this vsock device.","","","","","Returns the argument unchanged.","","","","","Provides the ID of this vsock device as used in MMIO …","","","","Calls <code>U::from(self)</code>.","","","Create a new virtio-vsock device with the given VM CID and …","Notify backend of new events.","","Walk the driver-provided RX queue buffers and attempt to …","Walk the driver-provided TX queue buffers, package them up …","","","","","","","","","","","","","Signal the guest driver that we’ve used some virtio …","","","","Auxiliary function for creating a new virtio-vsock device …","","Stores aggregate metrics of all Vsock connections/actions","Vsock-related metrics.","Number of times when activate failed on a vsock device.","","","","","Number of times when interacting with the space config of …","Number of times when handling connection events on a vsock …","Number of added connections.","Number of killed connections.","Number of removed connections.","Number of times when handling event queue events on a …","Called by METRICS.flush(), this function facilitates …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","How many times the killq has been resynced.","Number of times when handling muxer events on a vsock …","","Number of bytes received.","Number of packets received.","Number of events associated with the receiving queue.","Number of times when handling RX queue events on a vsock …","Number of times read() has failed.","","","","Number of transmitted bytes.","How many flush fails have been seen.","Number of transmitted packets.","Number of events associated with the transmitting queue.","Number of times when handling TX queue events on a vsock …","How many write fails have been seen.","","Buffer holds a write-only host-to-guest (RX) packet","Buffer holds a read-only guest-to-host (TX) packet","The vsock packet header struct size (the struct is packed).","Struct describing a single vsock packet.","Enum representing either a TX (e.g. read-only) or RX (e.g. …","","","","","","","","","","","","","","","","Returns the total length of this <code>VsockPacket</code>’s buffer …","The raw buffer, as it is contained in guest memory …","","","Writes the local copy of the packet header to the guest …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create the packet wrapper from an RX virtq chain head.","Create the packet wrapper from a TX virtq chain head.","","","Provides in-place access to the local copy of the vsock …","A copy of the vsock packet’s 44-byte header, held in …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","UDS backend state.","An enum for the serializable backend state types.","A helper structure that holds the constructor arguments …","The Vsock frontend serializable state.","The Vsock serializable state.","A helper structure that holds the constructor arguments …","The Vsock Unix Backend serializable state.","","","","","","","","","","","","","The vsock backend state.","The vsock Unix Backend.","","","","","","","","","","","","","Context IDentifier.","cid available in VsockFrontendState.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","The vsock frontend state.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Pointer to guest memory.","The path for the UDS socket.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Error registering a new epoll-listening FD: {0}","Error creating an epoll FD: {0}","The host made an invalid vsock port connection request.","","Muxer connection limit reached.","Error accepting a new connection from the host-side Unix …","Error binding to the host-side Unix socket: {0}","Error connecting to a host-side Unix socket: {0}","Error reading from host-side Unix socket: {0}","","Vsock backend related errors.","","","","","","","Instant when this connection should be scheduled for …","","","Returns the argument unchanged.","Total number of bytes that have been successfully written …","Calls <code>U::from(self)</code>.","Our <code>self.fwd_cnt</code>, as last sent to the peer. This is used …","The local CID. Most of the time this will be the constant <code>2</code>…","The local (host) port.","This module implements the Unix Domain Sockets backend for …","","","The amount of buffer space that the peer (guest) has …","The peer (guest) CID.","The total number of bytes that the peer has forwarded away.","The peer (guest) port.","The set of pending RX packet indications that <code>recv_pkt()</code> …","The total number of bytes sent to the peer (guest vsock …","The current connection state.","The (connected) host-side stream.","","","","The TX buffer for this connection.","","Maximum number of established connections that we can …","Size of the muxer connection kill queue.","Size of the muxer RX packet queue.","A unique identifier of a <code>MuxerConnection</code> object. …","The packet must be fetched from the connection identified …","The listener is a <code>MuxerConnection</code>, identified by <code>key</code>, and …","An epoll listener, registered under the muxer’s nested …","A listener interested in new host-initiated connections.","A listener interested in reading host <code>connect &lt;port&gt;</code> …","A muxer RX queue item.","The muxer must produce an RST packet.","The vsock connection multiplexer.","Add a new connection to the active connection pool.","Register a new epoll listener under the muxer’s nested …","Allocate a host-side port to be assigned to a new …","Perform an action that might mutate a connection’s state.","","","","","","","","","Get the FD to be registered for polling upstream (in the …","","","","","","","","","","","Guest CID.","","","","","A hash map used to store the active connections.","Enqueue an RST packet into <code>self.rxq</code>.","The nested epoll event set, used to register epoll …","","","","","","Mark a previously used host-side port as free.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get the epoll events to be polled upstream.","Handle/dispatch an epoll event to its listener.","Handle a new connection request comming from our peer (the …","Check if the muxer has any pending RX data, with which to …","","The Unix socket, through which host-initiated connections …","Return the file system path of the host-side Unix socket.","The file system path of the host-side Unix socket. This is …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Schedule a connection for immediate termination. I.e. as …","A queue used for terminating connections that are taking …","A hash map used to store epoll event listeners / handlers.","","The last used host-side port.","A hash set used to keep track of used host-side (local) …","Muxer constructor.","Notify the muxer about a pending event having occured …","","Parse a host “connect” command, and extract the …","Deliver a vsock packet to the guest vsock driver.","Remove a connection from the active connection poll.","Remove (and return) a previously registered epoll listener.","","The RX queue. Items in this queue are consumed by …","","Deliver a guest-generated packet to its destination in the …","Check if any connections have timed out, and if so, …","","","","","","","","","","","","","","","","","","","The connection kill queue: a FIFO structure, storing the …","A kill queue item, holding the connection key and the …","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Create a kill queue by walking the connection pool, …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Check if the kill queue is empty, obviously.","Check if the kill queue is full.","Check if the kill queue is synchronized with the …","","","Trivial kill queue constructor.","Attempt to pop an expired connection from the kill queue.","Push a connection key to the queue, scheduling it for …","The kill queue contents.","The kill queue sync status:","","","","","","","","The muxer RX queue.","","","","","","","Returns the argument unchanged.","Attempt to build an RX queue, that is synchronized to the …","Calls <code>U::from(self)</code>.","Check if the queue is empty.","Check if the queue is full.","Check if the RX queue is synchronized with the connection …","Get the total number of items in the queue.","Trivial RX queue constructor.","Peek into the front of the queue.","Pop an RX item from the front of the queue.","Push a new RX item to the queue.","The RX queue data.","The RX queue sync status.","","","","Represents a generalization of a borrowed <code>[u8]</code> slice.","","","","","","","","","","","","Returns the length of the buffer.","A module for interpreting byte slices as protocol data …","Reads <code>buf.len()</code> bytes from <code>self</code> into <code>buf</code>, starting at …","Provides functionality for handling incoming TCP …","","This is the baseline definition of the <code>Incomplete</code> struct, …","","","Contains logic that helps with handling ARP frames over …","","","","","","","","","Defines traits which allow byte slices to be interpreted …","","","Computes the checksum of a TCP/UDP packet. Since both …","","Contains support for parsing and writing Ethernet frames. …","Transforms <code>self</code> into a <code>TcpSegment&lt;T&gt;</code> by specifying values …","Transforms <code>self</code> into a <code>UdpDatagram&lt;T&gt;</code> by specifying values …","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns a reference to the wrapped object.","","Returns a mutable reference to the wrapped object.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Contains support for parsing and writing IPv4 packets.","","Contains support for parsing and writing TCP segments.","","","","","","","","Contains support for parsing and writing User Datagram …","Transforms <code>self</code> into an <code>IPv4Packet</code> based on the supplied …","Transforms <code>self</code> into an <code>IPv4Packet</code> based on the supplied …","Transforms <code>self</code> into an <code>IPv4Packet</code> based on the supplied …","Completes the inner frame by shrinking it to its actual …","The length of an ARP frame for IPv4 over Ethernet.","","","","Represents errors which may occur while parsing or writing …","The inner bytes will be interpreted as an ARP frame.","","Invalid hardware address length.","ARP is for Ethernet hardware","","Invalid hardware type.","","","ARP Reply operation","ARP Request operation","Invalid operation.","","Invalid protocol address length.","","Invalid protocol type.","","The provided slice does not fit the size of a frame.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Interprets the given bytes as an ARP frame, without doing …","Returns the hardware address length of the frame.","Returns the hardware type of the frame.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the length of the frame.","Returns the type of operation within the frame.","Returns the protocol address length of the frame.","Returns the protocol type of the frame.","Tries to interpret a byte slice as a valid IPv4 over …","Sets the hardware address length of the frame.","Sets the hardware type of the frame.","Sets the operation within the frame.","Sets the protocol address length of the frame.","Sets the protocol type of the frame.","Sets the sender hardware address.","Sets the sender protocol address.","Sets the target hardware address.","Sets the target protocol address.","Returns the sender hardware address.","Returns the sender protocol address.","This function checks if <code>buf</code> may hold an Ethernet frame …","Returns the target hardware address.","","Returns the target protocol address.","","","","","","","","Attempts to write an ARP reply to <code>buf</code>, based on the …","Attempts to write an ARP request to <code>buf</code>, based on the …","","Represents an immutable view into a sequence of bytes …","Offers mutable access to a sequence of bytes which stands …","","","","","","","","","Returns the argument unchanged.","Writes the given <code>u32</code> value at the specified <code>offset</code> using …","Writes the given <code>u16</code> value at the specified <code>offset</code> using …","Calls <code>U::from(self)</code>.","Creates a new instance as a wrapper around <code>bytes</code>.","Reads an <code>u32</code> value from the specified offset, converting …","Reads an <code>u16</code> value from the specified offset, converting …","","Shrinks the current slice to the given <code>len</code>.","","","","","","Ethertype value for ARP frames.","Ethertype value for IPv4 packets.","","Describes the errors which may occur when handling …","Interprets the inner bytes as an Ethernet frame.","Payload offset in an ethernet frame","","The specified byte sequence is shorter than the Ethernet …","","","","","","","","","","","Returns the destination MAC address.","","Returns the ethertype of the frame.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Checks whether the specified byte sequence can be …","Interprets <code>bytes</code> as an Ethernet frame without any validity …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the length of the frame.","Attempts to write an Ethernet frame using the given header …","Returns the payload of the frame as an <code>[&amp;u8]</code> slice.","Returns the payload of the frame as a <code>&amp;mut [u8]</code> slice.","Returns the offset of the payload within the frame.","Sets the destination MAC address.","Sets the ethertype of the frame.","Sets the source MAC address.","Returns the source MAC address.","","","","","","","","Attempts to write an incomplete Ethernet frame (whose …","The header checksum is invalid.","Default TTL value","","","Describes the errors which may occur while handling IPv4 …","","","The header length is invalid.","","Indicates version 4 of the IP protocol","Interprets the inner bytes as an IPv4 packet.","The total length of the packet is invalid.","","","The IP protocol number associated with TCP.","The IP protocol number associated with UDP.","","The length of the given slice does not match the length of …","The length of the given slice is less than the IPv4 header …","","","","The version header field is invalid.","","","","","","","","","","","Computes and returns the packet header checksum.","Computes and returns the packet header checksum using the …","Returns the destination IPv4 address of the packet.","Returns the values of the <code>dscp</code> and <code>ecn</code> header fields.","","Returns the values of the <code>flags</code> and <code>fragment offset</code> header …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Attempts to interpret <code>bytes</code> as an IPv4 packet, checking …","Interpret <code>bytes</code> as an IPv4Packet without checking the …","Returns the value of the <code>header checksum</code> header field.","Returns the packet header length (in bytes).","Returns the value of the <code>identification</code> header field.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the length of the inner byte sequence.","Returns a byte slice that contains the payload of the …","Returns a mutable byte slice representing the payload of …","Returns a mutable byte slice representing the payload of …","Returns a byte slice containing the payload, using the …","Returns the value of the <code>protocol</code> header field.","Sets the destination address of the packet.","Sets the values of the <code>dscp</code> and <code>ecn</code> header fields.","Sets the values of the <code>flags</code> and <code>fragment offset</code> header …","Sets the value of the <code>header checksum</code> header field.","Sets the value of the <code>identification</code> header field.","Sets the value of the <code>protocol</code> header field.","Sets the source address of the packet.","Sets the value of the <code>total length</code> header field.","Sets the value of the <code>ttl</code> header field.","Sets the values of the <code>version</code> and <code>ihl</code> header fields (the …","Returns the source IPv4 address of the packet.","This function checks if <code>buf</code> may hold an IPv4Packet heading …","","Returns the value of the ‘total length’ header field.","","","","","Returns the value of the <code>ttl</code> header field.","","","Returns the value of the <code>version</code> header field, and the …","Attempts to write an IPv4 packet header to <code>buf</code>, making …","The acknowledgement number field is valid.","","","Congestion window reduced.","Invalid checksum.","","","ECN-echo.","A payload has been specified for the segment, but the …","Describes the errors which may occur while handling TCP …","FIN flag.","","Represents the TCP header flags, with the exception of <code>NS</code>.","Invalid header length.","","","The MSS option contains an invalid value.","The remaining segment length cannot accommodate the MSS …","","","","","","Push flag.","Reset the connection.","","","SYN flag.","The specified slice is shorter than the header length.","Interprets the inner bytes as a TCP segment.","Urgent pointer.","","","","Returns the acknowledgement number (only valid if the <code>ACK</code> …","Get a flags value with all known bits set.","","","","","","","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","Get the underlying bits value.","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","Returns the value of the <code>checksum</code> header field.","","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Computes the TCP checksum of the segment. More details …","Whether all set bits in a source flags value are also set …","Returns the destination port.","The intersection of a source flags value with the …","Get a flags value with all bits unset.","","","The bitwise or (<code>|</code>) of the bits in each flags value.","Returns the TCP header flags, with the exception of <code>NS</code>.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a bits value.","","Convert from a bits value exactly.","Convert from a bits value, unsetting any unknown bits.","Attempts to interpret <code>bytes</code> as a TCP segment, checking the …","Interprets <code>bytes</code> as a TCP segment without any validity …","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","Returns the length of the header.","Returns the header length, the value of the reserved bits, …","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Whether all known bits in this flags value are set.","Whether all bits in this flags value are unset.","Yield a set of contained flags values.","Yield a set of contained named flags values.","Returns the length of the segment.","The bitwise negation (<code>!</code>) of the bits in a flags value, …","Returns the TCP header options as an <code>[&amp;u8]</code> slice.","Parses TCP header options (only <code>MSS</code> is supported for now).","Returns a slice which contains the payload of the segment.","Returns the length of the payload.","Returns a mutable slice containing the segment payload.","Returns a mutable slice containing the segment payload.","Returns a slice which contains the payload of the segment. …","The intersection of a source flags value with the …","Returns the sequence number.","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Sets the value of the acknowledgement number field.","Sets the value of the <code>checksum</code> field.","Sets the destination port.","Sets the value of the header byte containing every TCP …","Sets the value of the <code>ihl</code> header field based on <code>header_len</code> …","Sets the value of the sequence number field.","Sets the source port.","Sets the value of the <code>urgent pointer</code> field.","Sets the value of the <code>window size</code> field.","Returns the source port.","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","Returns the value of the <code>urgent pointer</code> header field (only …","Returns the value of the <code>window size</code> header field.","Writes an incomplete TCP segment, which is missing the …","Writes a complete TCP segment.","","Invalid checksum.","","The specified byte sequence is shorter than the Ethernet …","Represents errors which may occur while parsing or writing …","","","","The payload to be added to the UDP packet exceeds the size …","","The header length is 8 octets (bytes).","Interprets the inner bytes as a UDP datagram.","","","","","","","","","","","Returns the checksum value of the packet.","Computes the checksum of a UDP datagram.","Returns the destination port of the UDP datagram.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Interprets <code>bytes</code> as a UDP datagram if possible or returns …","Interprets <code>bytes</code> as a UDP datagram without any validity …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the length of the datagram from its header.","Returns the payload of the UDP datagram as an <code>[&amp;u8]</code> slice.","Sets the payload of the UDP datagram.","Sets the checksum of a UDP datagram.","Sets the destination port of the UDP datagram.","Sets the length field in the UDP datagram header.","Sets the source port of the UDP datagram.","Returns the source port of the UDP datagram.","","","","","","","","Writes an incomplete UDP datagram, which is missing the …","The <code>RST</code> segment will carry 0 as the sequence number, will …","At least one segment is available immediately.","The largest possible window size (requires the window …","The default maximum segment size (MSS) value, used when no …","Describes whether a particular entity (a <code>Connection</code> for …","There’s nothing to send.","Represents the configuration of the sequence number and <code>ACK</code>…","The <code>RST</code> segment will carry the specified sequence number, …","A retransmission timeout (RTO) will trigger after the …","","","","","","","","","","","This module contains a minimalist TCP <code>Connection</code> …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Exposes simple TCP over IPv4 listener functionality via …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a <code>RstConfig</code> in response to the given segment.","Returns the sequence number, acknowledgement number, and …","Returns true if <code>a</code> comes after <code>b</code> in the sequence number …","Returns true if <code>a</code> comes after, or is at <code>b</code> in the sequence …","","","","","","","","The payload length is larger than the receive buffer size.","The connection is resetting, and will switch to being …","","Contains the state information and implements the logic …","The connection cannot receive the segment because it has …","The connection cannot write the segment because it has …","The other endpoint transmitted additional data after …","The connection received a duplicate ACK.","The write sends additional data after a <code>FIN</code> has been …","","","","The acknowledgement number is invalid.","The connection received a <code>FIN</code> whose sequence number does …","The connection received an invalid <code>RST</code> segment.","The connection received an invalid segment for its current …","The incoming segment is not a valid <code>SYN</code>.","The <code>SYN</code> segment carries an invalid <code>MSS</code> option.","The remaining MSS (which can be reduced by IP and/or TCP …","No value.","Describes errors which may occur during a passive open.","The payload source is too large.","The payload source does not contain the first sequence …","Defines a segment payload source.","The other endpoint advertised a receive window edge which …","","The connection received a valid <code>RST</code> segment.","Describes errors which may occur when an existing …","Represents any unusual conditions which may occur when …","The connection received a data segment which does not fall …","","","Some value of type <code>T</code>.","An error occurred during the actual write to the buffer: …","The connection received a data segment, but the sequence …","Describes errors which may occur when a connection …","","","","","Advances the right edge of the local receive window.","Get a flags value with all known bits set.","Get a flags value with all known bits set.","","","","","","","","","","","","","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","Get the underlying bits value.","","Get the underlying bits value.","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","","","","","","","Closes this half of the connection.","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","","Whether all set bits in a source flags value are also set …","Whether all set bits in a source flags value are also set …","Describes whether a control segment can be sent …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","","Returns <code>true</code> if a retransmission caused by the reception …","Get a flags value with all bits unset.","Get a flags value with all bits unset.","","","","","","","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","","Returns <code>true</code> if a <code>FIN</code> has been received.","","","Returns the first sequence number which has not been sent …","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Convert from a bits value.","Convert from a bits value.","","Convert from a bits value exactly.","Convert from a bits value exactly.","","Convert from a bits value, unsetting any unknown bits.","Convert from a bits value, unsetting any unknown bits.","The bitwise or (<code>|</code>) of the bits in each flags value.","The bitwise or (<code>|</code>) of the bits in each flags value.","Get a flags value with the bits of a flag with the given …","Get a flags value with the bits of a flag with the given …","Returns the highest acknowledgement number received for …","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","The bitwise and (<code>&amp;</code>) of the bits in two flags values.","Whether any set bits in a source flags value are also set …","Whether any set bits in a source flags value are also set …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Whether all known bits in this flags value are set.","Whether all known bits in this flags value are set.","Returns <code>true</code> if the connection is done communicating with …","Whether all bits in this flags value are unset.","Whether all bits in this flags value are unset.","Returns <code>true</code> if the connection is past the <code>ESTABLISHED</code> …","","","","Yield a set of contained flags values.","Yield a set of contained flags values.","Yield a set of contained named flags values.","Yield a set of contained named flags values.","","","Returns a valid configuration for a <code>RST</code> segment, which can …","","The bitwise negation (<code>!</code>) of the bits in a flags value, …","The bitwise negation (<code>!</code>) of the bits in a flags value, …","","Attempts to create a new <code>Connection</code> in response to an …","","Handles an incoming segment.","Returns the right edge of the receive window advertised by …","","","The intersection of a source flags value with the …","The intersection of a source flags value with the …","Specifies that a <code>RST</code> segment should be sent to the other …","","","","","","","","","","","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","Call <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …","","","","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The intersection of a source flags value with the …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","The bitwise exclusive-or (<code>^</code>) of the bits in two flags …","","","","","","","","","","","","","","","","","","","The bitwise or (<code>|</code>) of the bits in two flags values.","The bitwise or (<code>|</code>) of the bits in two flags values.","","Writes a new segment (if available) to the specified …","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","Parses the request bytes and builds a <code>micro_http::Response</code> …","","","","","","","","","","","","The local endpoint is done communicating, and has been …","The local <code>Endpoint</code> transitioned to being done after this …","","","An error occurred while trying to create a new <code>Endpoint</code> …","There was an error while writing the contents of the IPv4 …","The inner segment has an invalid destination port.","","Failed to add a local <code>Endpoint</code> because the handler is …","A new local <code>Endpoint</code> has been successfully created, but …","A new local <code>Endpoint</code> has been successfully created.","Nothing interesting happened regarding the state of the …","Nothing interesting happened.","Describes errors which may be encountered by the …","Describes events which may occur when the handler receives …","","Implements a minimalist TCP over IPv4 listener.","The handler encountered an error while parsing the inner …","There was an error while writing the contents of the inner …","The handler received a non-<code>SYN</code> segment which does not …","","Describes events which may occur when the handler writes …","Describes errors which may be encountered by the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the local IPv4 address of this TCP handler.","","Returns the local port of this TCP handler.","","Returns the max connections of this TCP handler.","","Returns the max pending resets of this TCP handler.","","","Creates a new <code>TcpIPv4Handler</code>.","Describes the status of the next segment to be sent by the …","","Contains logic for handling incoming segments.","","","","","Setter for the local IPv4 address of this TCP handler.","","","","","","","","","","","","","","","","","","","","","","","","","","","Attempts to write one packet, from either the <code>RST</code> queue or …","Error originating in the completion queue: {0}","CQueue Error.","Could not enable the ring: {0}","A FamStructWrapper operation has failed: {0}","The number of ops in the ring is &gt;= CQ::count","The queue is full.","","Fd was not registered: {0}","Main object representing an io_uring instance.","IoUring Error.","Error mapping the ring: {0}","Error mapping the ring: {0}","There are no registered fds.","Error probing the io_uring subsystem: {0}","","Could not register eventfd: {0}","Could not register file: {0}","Attempted to register too many files.","Could not register restrictions: {0}","Error originating in the submission queue: {0}","SQueue Error.","Error calling io_uring_setup: {0}","Error returned by <code>io_uring_enter</code>: {0}","Required feature is not supported on the host kernel: {0}","Required operation is not supported on the host kernel: {0}","Error reading/writing volatile memory: {0}","Error reading/writing volatile memory: {0}","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return true if this error is caused by a full submission …","Create a new instance.","A total of the number of ops in the submission and …","","Module exposing data structures for working with io_uring …","Return the number of operations currently on the …","Pop a completed entry off the completion queue. Returns …","","Push an <code>Operation</code> onto the submission queue.","","","","","","Seccomp-like restrictions for the allowed operations on an …","","Submit all operations but don’t wait for any completions.","Submit all operations and wait for their completioneturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Wrapper over a completed operation.","The index of a registered fd.","Fsync operation.","Supported operation types.","Operation type for populating the submission queue, …","Read operation.","Write operation.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Construct a fsync operation.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Transform the operation into an <code>Sqe</code>.","","","","Construct a read operation.","","","","","","","","","","Consumes the operation and returns the associated <code>user_data</code>…","","","Construct a write operation.","Wrapper over a completed operation.","","","","","Return the number of bytes successfully transferred by …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create a new Cqe, applying the passed function to the …","Construct a <code>Cqe</code> object from a raw <code>io_uring_cqe</code>.","","Return the result associated to the IO operation.","","","","Consume the object and return the user_data.","","Newtype wrapper over a raw sqe.","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Construct a new sqe.","","","","Consume the sqe and return the <code>user_data</code>.","","","","","","","CQueue Error.","","Error mapping the ring: {0}","Error reading/writing volatile memory: {0}","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Safety","","","","","","","","","","","","BuildMmapRegion: {0}","","Os: {0}","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","The queue is full.","Error mapping the ring: {0}","SQueue Error.","","Error returned by <code>io_uring_enter</code>: {0}","Error reading/writing volatile memory: {0}","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Safety","","","","","","","","","","","","","","","","Allow an operation.","Only allow operations on pre-registered fds.","Adds support for restricting the operations allowed by …","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","Reinitialization of metrics not allowed.","Default instance id.","Default level filter for logger matching the swagger …","Prefix to be used in log lines for functions/modules in …","The “debug” level.","<code>log::LevelFilter::Debug</code>","The “error” level.","<code>log::LevelFilter::Error</code>","Alias for <code>std::io::LineWriter&lt;std::fs::File&gt;</code>.","Instance id.","Used for defining new types of metrics that act as a …","The “info” level.","<code>log::LevelFilter::Info</code>","The logger.","An enum representing the available verbosity levels of the …","This is required since we originally supported <code>Warning</code> and …","Error type for [<code>&lt;LevelFilter as FromStr&gt;::from_str</code>].","Strongly typed structure used to describe the logger.","Error type for <code>Logger::init</code>.","Error type for <code>Logger::update</code>.","Static instance used for handling metrics.","Describes the errors which may occur while handling …","{0}","<code>log::LevelFilter::Off</code>","Reporter object which computes the process wall time and …","{0}","Representation of a metric that is expected to be …","Representation of a metric that is expected to hold a …","Used for defining new types of metrics that do not need a …","The “trace” level.","<code>log::LevelFilter::Trace</code>","The “warn” level.","<code>log::LevelFilter::Warn</code>","Failed to write metrics: {0}","Adds <code>value</code> to the current counter.","","","Returns the string representation of the <code>Level</code>.","","","","","","Returns current value of the counter.","Logs a message at the debug level.","","","","Logs a message at the error level.","Returns current value of the counter.","Returns diff of current and old value of the counter. …","","","Returns the argument unchanged.","","","Logs a message at the info level.","","Calls <code>U::from(self)</code>.","Iterate through all supported logging levels.","The level of the Logger.","Log a standard warning message indicating a given feature …","Determines if a message logged at the specified level in …","Named pipe or file used as output for logs.","","Returns the most verbose logging level.","Defines the metrics system.","The module to filter logs by.","","","","","Whether to show the log level in the log.","Whether to show the log origin in the log.","","","Stores <code>value</code> to the current counter.","Converts the <code>Level</code> to the equivalent <code>LevelFilter</code>.","","","Logs a message at the trace level.","","","","Helper function for updating the value of a store metric …","Logs a message at the warn level.","Default instance id.","Default level filter for logger matching the swagger …","<code>log::LevelFilter::Debug</code>","<code>log::LevelFilter::Error</code>","Instance id.","<code>log::LevelFilter::Info</code>","The logger.","This is required since we originally supported <code>Warning</code> and …","Error type for [<code>&lt;LevelFilter as FromStr&gt;::from_str</code>].","","","","Strongly typed structure used to describe the logger.","","Error type for <code>Logger::init</code>.","Error type for <code>Logger::update</code>.","<code>log::LevelFilter::Off</code>","<code>log::LevelFilter::Trace</code>","<code>log::LevelFilter::Warn</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Initialize the logger.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The level of the Logger.","","Named pipe or file used as output for logs.","","The module to filter logs by.","","","","Whether to show the log level in the log.","","Whether to show the log origin in the log.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Applies the given logger configuration the logger.","Reinitialization of metrics not allowed.","Metrics related to the internal API server.","","","Metrics related to deprecated user-facing API calls.","","Structure storing all metrics while enforcing …","Metrics specific to GET API Requests for counting user …","Used for defining new types of metrics that act as a …","Used to record Aggregate (min/max/sum) of latency metrics","Provides efficient way to record LatencyAggregateMetrics","","Metrics for the logging subsystem.","Static instance used for handling metrics.","Metrics system.","Describes the errors which may occur while handling …","Metrics for the MMDS functionality.","","{0}","Metrics specific to PATCH API Requests for counting user …","Performance metrics related for the moment only to …","Reporter object which computes the process wall time and …","Metrics specific to PUT API Requests for counting user …","Metrics for the seccomp filtering.","{0}","","Representation of a metric that is expected to be …","Representation of a metric that is expected to hold a …","Metrics related to signals. Deadly signals must be of …","Used for defining new types of metrics that do not need a …","Structure provides Metrics specific to VCPUs’ mode of …","","Metrics specific to the machine manager as a whole.","","Failed to write metrics: {0}","","Number of PUTs triggering an action on the VM.","Number of failures in triggering an action on the VM.","Adds <code>value</code> to the current counter.","","API Server related metrics.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A balloon device’s related metrics.","A block device’s related metrics.","Number of PUTs for attaching source of boot.","Number of failures during attaching source of boot.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The number of connections successfully accepted by the …","The number of connections cleaned up by the MMDS TCP …","Returns current value of the counter.","","Number of PUTs for configuring a guest’s vCPUs.","Number of failures in configuring a guest’s vCPUs.","","","","","","","","","","","","","","","","","","","","","","","","","","Metrics related to deprecated API calls.","Total number of calls to deprecated CMD line parameters.","Total number of calls to deprecated HTTP endpoints.","","Number of device related events received for a VM.","Measures the snapshot diff create time, at the API (user) …","Number of PUTs triggering a block attach.","Number of tries to PATCH a block device.","Number of failures in attaching a block device.","Number of failures in PATCHing a block device.","records aggregate (min/max/sum) for the given metric This …","Metrics related to virtio-rng entropy device.","Number of KVM exits for handling input IO.","Provides Min/max/sum for KVM exits handling input IO.","Number of KVM exits for handling output IO.","Provides Min/max/sum for KVM exits handling output IO.","Number of KVM exits for handling MMIO reads.","Provides Min/max/sum for KVM exits handling MMIO reads.","Number of KVM exits for handling MMIO writes.","Provides Min/max/sum for KVM exits handling MMIO writes.","Number of errors during this VCPU’s run.","Returns current value of the counter.","","Returns diff of current and old value of the counter. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Measures the snapshot full create time, at the API (user) …","Metrics related to API GET requests.","Increments by 1 unit the current counter.","Increments by 1 unit the current counter.","Initialize metrics system (once and only once). Every call …","Number of GETs for getting information on the instance.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Metrics related to performance measurements.","Metrics related to the legacy device.","Measures the snapshot load time, at the API (user) level, …","Number of errors while trying to log human readable …","Logging related metrics.","Number of PUTs for initializing the logging system.","Number of failures in initializing the logging system.","Number of GETs for getting status on attaching machine …","Number of PUTs for configuring the machine.","Number of PATCHs for configuring the machine.","Number of failures in configuring the machine.","Number of failures in configuring the machine.","represents maximum value of the metrics in microseconds","","","Number of PUTs for initializing the metrics system.","Number of failures in initializing the metrics system.","Number of errors during metrics handling.","represents minimum value of the metrics in microseconds","Number of misses on logging human readable content.","Number of misses on flushing metrics.","Metrics specific to MMDS functionality.","Number of GETs for getting mmds.","Number of PUTs for creating mmds.","Number of tries to PATCH an mmds.","Number of failures in creating a new mmds.","Number of failures in PATCHing an mmds.","A network device’s related metrics.","Number of PUTs for creating a new network interface.","Number of tries to PATCH a net device.","Number of failures in creating a new network interface.","Number of failures in PATCHing a net device.","Creates a new instance of the current metrics.","Const default construction.","Const default construction.","Constructor for the process time-related reporter.","Const default construction.","Const default construction.","Const default construction.","Const default construction.","Const default construction.","Const default construction.","Const default construction.","Const default construction.","Const default construction.","Const default construction.","Const default construction.","Const default construction.","Const default construction.","Const default construction.","Const default construction.","Const default construction.","Number of errors inside the seccomp filtering.","Metric for signaling a panic has occurred.","","Metrics related to API PATCH requests.","Measures the microVM pausing duration, at the API (user) …","Measures the cpu’s startup time in microseconds.","Measures the process’s startup time in microseconds.","Metrics related to API PUT requests.","returns a latency recorder which captures stores start_time","Obtain process CPU start time in microseconds.","Obtain process start time in microseconds.","Measures the microVM resuming duration, at the API (user) …","Number of frames rerouted to MMDS.","Number of errors while handling a frame through MMDS.","Number of uncommon events encountered while processing …","The number of buffers which couldn’t be parsed as valid …","The total number of successful receive operations by the …","Metrics related to seccomp filtering.","Reset counters of each metrics. Here we suppose that …","","","","","","","","","","","","","","","","","","","","","","","","Number of times that SIGBUS was handled.","Number of times that SIGHUP was handled.","Number of times that SIGILL was handled.","Metrics related to signals.","Number of times that SIGPIPE was handled.","Number of times that SIGSEGV was handled.","Number of times that SIGXCPU was handled.","Number of times that SIGXFSZ was handled.","","","","Stores <code>value</code> to the current counter.","","represents sum of the metrics in microseconds","Number of failures on API requests triggered by internal …","Number of timeouts during communication with the VMM.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The total number of bytes sent by the MMDS.","The total number of successful send operations by the MMDS.","The number of errors raised by the MMDS while attempting …","The number of frames sent by the MMDS.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Metrics related to a vcpu’s functioning.","Vhost-user device related metrics.","Metrics related to the virtual machine manager.","Measures the snapshot diff create time, at the VMM level, …","Measures the snapshot full create time, at the VMM level, …","Measures the snapshot load time, at the VMM level, in …","Measures the microVM pausing duration, at the VMM level, …","Measures the microVM resuming duration, at the VMM level, …","Number of GETs for getting the VMM version.","Number of PUTs for creating a vsock device.","Number of failures in creating a vsock device.","Metrics related to virtio-vsockets.","Writes metrics to the destination provided as argument …","MMDS token errors","MMDS token not valid.","Invalid URI.","Not allowed HTTP method.","No MMDS token provided. Use <code>X-metadata-token</code> header to …","Token time to live value not found. Use …","Resource not found: {0}.","","","","","","","Build a response for <code>request</code> and return response based on …","MMDS data store","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Patch provided JSON document (given as <code>serde_json::Value</code>) …","MMDS network stack","Defines the structures needed for saving/restoring …","","","","","","","","","MMDS token headers","","","","The MMDS patch request doesn’t fit.","MMDS data store errors","MMDS output format as Imds","MMDS output format as Json","The Mmds is the Microvm Metadata Service represented as an …","MMDS version.","The MMDS resource does not exist.","The MMDS data store is not initialized.","MMDS possible outputs.","Token Authority error: {0}","Cannot retrieve value. The value has an unsupported type.","MMDS version 1","MMDS version 2","","","","","","","","","","","","","","","","","","This method is needed to check if data store is …","","","","","return MMDS data store value We do not check size of …","","","MMDS default instance with limit <code>data_store_limit</code>","","","","","","","","","Returns the serde::Value in IMDS format plaintext. …","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Generate a new Mmds token using the token authority.","Returns the subtree located at path. When the path …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Checks if the provided token has not expired.","patch update MMDS data store with <code>patch_data</code>","put <code>data</code> in MMDS data store","","Sets the Additional Authenticated Data to be used for …","set MMDS data store limit to <code>data_store_limit</code>","Set the MMDS version.","","","","","","","","","","","","","","","","","","Return the MMDS version by checking the token authority …","ARP error: {0}","","","","","","Ethernet error: {0}","Ethernet error: {0}","IPv4Packet error: {0}","","NoPendingArpReply","TcpSegment error: {0}","","WriteNext error: {0}","","","","","","","","","","","","","","","","","","Handles a frame destined for <code>mmds</code>","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Check if a frame is destined for <code>mmds</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","State of a MmdsNetworkStack.","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Byte limit passed to <code>bincode</code> to guard against allocating …","Failed to extract entropy from /dev/urandom entropy pool: …","","Failed to extract expiry value from token.","Length of initialization vector.","Invalid token authority state.","Invalid time to live value provided for token: {0}. Please …","Length of the key used for encryption.","Maximum lifetime of token.","Constant to convert seconds to milliseconds.","Minimum lifetime of token.","Path to token.","Length of encryption payload.","Randomness pool file path.","Bincode serialization failed: {0}.","Length of encryption tag.","Token length limit to ensure we don’t bother decrypting …","Structure for token information.","","Failed to encrypt token.","","","","","","","","","Decode token structure from base64 string.","Encode token structure into a string using base64 encoding.","","","","","","","Make sure to reinitialize the cipher under a new key …","Validate the token time to live against bounds.","","Compute expiry time in seconds by adding the time to live …","Create a new AES-GCM cipher entity.","Create a new Token structure to encrypt.","Decrypt ciphertext composed of payload and tag to obtain …","","Encrypt expiry using AES-GCM block cipher and return …","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Generate encoded token string using the token time to live …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Attempts to decrypt expiry value within token sequence. …","","Create a new token authority entity.","Create a new token struct.","","","","Set Additional Authenticated Data to be used for …","","","","","","","","","","","","","Header rejected by MMDS.","Wrapper over the list of token headers associated with a …","<code>X-metadata-token</code> header.","<code>X-metadata-token-ttl-seconds</code> header.","","","","","Token headers are not present in the request by default.","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Sets the <code>XMetadataToken</code> token.","Sets the <code>XMetadataTokenTtlSeconds</code> token.","","Return <code>TokenHeaders</code> from headers map.","","","Returns the <code>XMetadataToken</code> token.","The <code>X-metadata-token</code> header might be used by HTTP clients …","Returns the <code>XMetadataTokenTtlSeconds</code> token.","The <code>X-metadata-token-ttl-seconds</code> header might be used by …","Failed to build microVM from snapshot: {0}","Failed to connect to UDS Unix stream: {0}","Failed to UFFD object: {0}","Errors associated with creating a snapshot.","Cannot get dirty bitmap: {0}","","Failed to get snapshot state from file: {0}","Error creating guest memory from file: {0}","Failed to load guest memory: {0}","Failed to load guest memory: {0}","Error type for <code>guest_memory_from_file</code>.","Error type for <code>guest_memory_from_uffd</code>","This describes the mapping between Firecracker base …","Compatibility checks failed: {0}","The virtio devices use a features that is incompatible …","Invalid snapshot state: {0}","Provided MicroVM state is invalid.","Invalid vCPU count.","Invalid microVM version format","Failed to load snapshot state from file: {0}","Cannot write memory file: {0}","Cannot perform {0} on the memory backing file: {1}","Failed to read snapshot file metadata: {0}","Contains the necesary state for saving/restoring a microVM.","Cannot save the microVM state: {0}","Errors related to saving and restoring Microvm state.","No memory region defined.","Operation not allowed: {0}","Failed to open snapshot file: {0}","Failed to register memory address range with the …","Failed to restore guest memory: {0}","Failed to restore guest memory: {0}","Cannot restore devices: {0}","Error type for <code>restore_from_snapshot</code>.","Sub-Error type for <code>restore_from_snapshot</code> to contain either …","Cannot restore Vcpu state: {0}","Cannot restore Vm state: {0}","Cannot save Vcpu state: {0}","Cannot save Vm state: {0}","Failed to sends file descriptor: {0}","Cannot serialize the microVM state: {0}","Cannot signal Vcpu: {0}","Error type for <code>snapshot_state_sanity_check</code>.","Cannot perform {0} on the snapshot backing file: {1}","Size mismatch when writing diff snapshot on top of base …","Error type for <code>snapshot_state_from_file</code>","Too many devices attached: {0}. The maximum number allowed …","Error creating guest memory from uffd: {0}","Vcpu is in unexpected state.","Cannot translate microVM version to snapshot data version","Holds information related to the VM that is not part of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Base host virtual address where the guest memory contents …","Boot source information.","","","","","","","","","","","","","","","","","","","","","","","","","","","CPU template type","Creates a Microvm snapshot.","","","","","","","","Device states.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Guest memory size.","Memory state.","Offset in the backend file/buffer where the region …","Loads a Microvm snapshot producing a ‘paused’ Microvm.","","","","","Region size.","smt information","Takes a snapshot of the virtual machine running inside the …","","Performs sanity checks against the state file and returns …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Validates that snapshot CPU vendor matches the host CPU …","Vcpu states.","","","Miscellaneous VM info.","VM KVM state.","Enum describing the outcomes of a <code>reduce()</code> call on a …","Enum that describes the type of token bucket update.","Token type used for bandwidth limiting.","Rate Limiting is disabled on this bucket.","Describes the errors that may occur while handling rate …","There are not enough tokens to complete the operation.","","No Update - same as before.","Token type used for operations/second limiting.","A number of tokens <code>inner</code> times larger than the bucket size …","","Rate Limiter that works on both bandwidth and ops/s …","The event handler was called spuriously: {0}","A part of the available tokens have been consumed.","","TokenBucket provides a lower level interface to rate …","Enum that describes the type of token used.","Rate Limiting enabled with updated bucket.","","","","","","","","","","","","","","","Provides a FD which needs to be monitored for POLLIN …","","","","Returns an immutable view of the inner bandwidth token …","","","","","","","","","","","","","","Returns the current budget (one time burst allowance …","","Returns the capacity of the token bucket.","","","","","Attempts to consume tokens and returns whether that is …","Default RateLimiter is a no-op limiter with infinite …","","","","This function needs to be called every time there is an …","","","","","","","","“Manually” adds tokens to bucket.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the initially configured one time burst budget.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns whether this rate limiter is blocked.","","Adds tokens of <code>token_type</code> to their respective bucket.","Creates a new Rate Limiter that can limit on both bytes/s …","Creates a <code>TokenBucket</code> wrapped in an <code>Option</code>.","Returns the remaining one time burst budget.","","Returns an immutable view of the inner ops token bucket.","","Defines the structures needed for saving/restoring a …","","","Attempts to consume <code>tokens</code> from the bucket and returns …","","Returns the time in milliseconds required to to completely …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Updates the parameters of the token buckets associated …","State for saving a RateLimiter.","State for saving a TokenBucket.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Balloon device error: {0}","Block device error: {0}","Boot source error: {0}","Entropy device error: {0}","File operation error: {0}","Invalid JSON: {0}","Logger error: {0}","Metrics error: {0}","MMDS error: {0}","MMDS config error: {0}","Network device error: {0}","Errors encountered when configuring microVM resources.","VM config error: {0}","A data structure that encapsulates the device …","Used for configuring a vmm from one single json passed to …","Vsock device error: {0}","","","","","","","","The balloon device.","","The block devices.","","","The boot source spec (contains both config and builder) …","Gets a reference to the boot source builder.","Gets a reference to the boot source configuration.","Whether or not to load boot timer device.","","","","","","","Obtains the boot source hooks (kernel fd, command line …","Builds an entropy device to be attached when the VM starts.","Builds a network device to be attached when the VM starts.","","","","","The entropy device builder.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Configures Vmm resources as described by the <code>config_json</code> …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","If not initialised, create the mmds data store with the …","","","","The optional Mmds data store.","","","If not initialised, create the mmds data store with the …","Data store limit for the mmds.","The network devices builder.","","","Sets a balloon device to be attached when the VM starts.","Inserts a block to be attached when the VM starts.","Set the boot source configuration (contains raw kernel …","Add a custom CPU template to the VM resources to configure …","Setter for mmds config.","","Updates MMDS version.","Configures the dirty page tracking functionality of the …","Sets a vsock device to be attached when the VM starts.","","","Returns whether dirty page tracking is enabled or not.","","","","","","","","","","Updates the resources from a restored device (used for …","Updates the configuration of the microVM.","The vCpu and memory configuration for this microVM.","The vsock device.","","Shorthand type for a request containing a boxed VmmAction.","Shorthand type for a response containing a boxed Result.","Balloon config error: {0}","The balloon device configuration.","The latest balloon device statistics.","Boot source error: {0}","Error type for …","Configure the boot source of the microVM using as input …","Configure CPU error: {0}","Configure the logger using as input the <code>LoggerConfig</code>. This …","Configure the metrics using as input the <code>MetricsConfig</code>. …","Create a snapshot using as input the <code>CreateSnapshotParams</code>. …","Create snapshot error: {0}","Drive config error: {0}","No data is sent on the channel.","Entropy device error: {0}","Flush the metrics. This action can only be called after …","The complete microVM configuration in JSON format.","Get the balloon device configuration.","Get the ballon device latest statistics.","Get complete microVM configuration in JSON format.","Get MMDS contents.","Get microVM instance information.","Get the machine configuration of the microVM.","Get microVM version.","Add a new block device or update one that already exists …","Add a new network interface config or update one that …","The microVM instance information.","Internal VMM error: {0}","Load the microVM state using as input the …","Load snapshot error: {0}","Error type for <code>PrebootApiController::load_snapshot</code>","Loading a microVM snapshot not allowed after configuring …","Logger error: {0}","Machine config error: {0}","The microVM configuration represented by <code>VmConfig</code>.","Metrics error: {0}","MMDS error: {0}","Populating MMDS from file failed: {0:?}.","MMMDS config error: {0}","MMDS limit exceeded error: {0}","Trait used for deduplicating the MMDS request handling …","Mmds contents.","Network config error: {0}","The requested operation is not supported: {0}","The requested operation is not supported after starting …","The requested operation is not supported before starting …","Partial update of the MMDS contents.","Pause the guest, by pausing the microVM VCPUs.","Enables pre-boot setup and instantiation of a Firecracker …","Configure the guest vCPU features.","Repopulate the MMDS contents.","Loading snapshot failed.","Failed to restore from snapshot: {0}","Resume the guest, by resuming the microVM VCPUs.","Resuming MicroVM after loading snapshot failed.","Failed to resume microVM: {0}","Enables RPC interaction with a running Firecracker VMM.","Send CTRL+ALT+DEL to the microVM, using the i8042 keyboard …","Set the balloon device or update the one that already …","Set the entropy device using <code>EntropyDeviceConfig</code> as input. …","Set the MMDS configuration.","Set the vsock device or update the one that already exists …","Launch the microVM. This action can only be called before …","Start microvm error: {0}","Update the balloon size, after microVM start.","Update the balloon statistics polling interval, after …","Update existing block device properties such as …","Update a network interface, after microVM start. …","Update the microVM configuration (memory &amp; vcpu) using …","This enum represents the public interface of the VMM. Each …","Wrapper for all errors associated with VMM actions.","The enum represents the response sent by the VMM in case …","The microVM version.","Vsock config error: {0}","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Default implementation for the function that builds and …","","","","","","","Write the metrics on user demand (flush). We use the word …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Handles the incoming preboot request and provides a …","Handles the incoming runtime <code>VmmAction</code> request and …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Constructor for the PrebootApiController.","Creates a new <code>RuntimeApiController</code>.","","Pauses the microVM by pausing the vCPUs.","","Resumes the microVM by resuming the vCPUs.","","Injects CTRL+ALT+DEL keystroke combo to the inner Vmm (if …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Updates block device properties:","Updates configuration for an emulated net device as …","","","","","Retrieve empty seccomp filters.","","","","","","","Registers all the required signal handlers.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Snap version for Firecracker v0.23","Snap version for Firecracker v0.24","Snap version for Firecracker v0.25","Snap version for Firecracker v1.0","Snap version for Firecracker v1.1","Snap version for Firecracker v1.2","Snap version for Firecracker v1.3","Snap version for Firecracker v1.4","Snap version for Firecracker v1.5","Snap version for Firecracker v1.6","Snap version for Firecracker v1.7","Static instance used for creating a 1:1 mapping between …","Static instance used for handling microVM state versions.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","A public-facing, stateless structure, holding all the data …","A public-facing, stateless structure, specifying …","A public-facing, stateless structure, holding all the data …","","","","","","","Wrapper for configuring the balloon device.","Data used to initialize the RateLimiter::bandwidth bucket.","Possible update to the RateLimiter::bandwidth bucket.","Wrapper for configuring the microVM boot source.","","","","","","","","","","","","","","","Wrapper for configuring the block devices.","Wrapper for configuring the entropy device attached to the …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Wrapper over the microVM general information attached to …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","<code>Option&lt;T&gt;</code> already implements <code>From&lt;T&gt;</code> so we have to use a …","Wrapper for configuring the memory and CPU of the microVM.","Wrapper for configuring the metrics. Auxiliary module for …","Wrapper for configuring the MMDS.","Wrapper for configuring the network devices attached to …","See TokenBucket::one_time_burst.","Create and opens a File for writing to it. In case we open …","Data used to initialize the RateLimiter::ops bucket.","Possible update to the RateLimiter::ops bucket.","See TokenBucket::refill_time.","","","See TokenBucket::size.","Wrapper for configuring microVM snapshots and the microVM …","","","","","","","","","","","","","Wrapper for configuring the vsock devices attached to the …","","A builder for <code>Balloon</code> devices from ‘BalloonDeviceConfig…","Errors associated with the operations allowed on the …","This struct represents the strongly typed equivalent of …","","The data fed into a balloon update request. Currently, …","The data fed into a balloon statistics interval update …","Error creating the balloon device: {0:?}","Device is inactive, check if balloon driver is enabled in …","No balloon device found.","Cannot enable/disable the statistics after boot.","","Statistics for the balloon device are not enabled","Amount of pages requested is too large.","Error updating the balloon device configuration: {0:?}","","","Target balloon size in MiB.","Target balloon size in MiB.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Option to deflate the balloon in case the guest is out of …","","","","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Provides a reference to the Balloon if present.","Returns the same structure that was used to configure the …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates an empty Balloon Store.","","","","","","Inserts a Balloon device in the store. If an entry already …","Inserts an existing balloon device.","Interval in seconds between refreshing statistics.","Interval in seconds between refreshing statistics.","","","","","","","","","","","","","","","","","","","","Holds the kernel builder (created and validates based on …","Holds the kernel specification (both configuration as well …","Strongly typed data structure used to configure the boot …","Errors associated with actions on <code>BootSourceConfig</code>.","Default guest kernel command line:","The initrd file cannot be opened due to invalid path or …","The kernel command line is invalid: {0}","The kernel file cannot be opened: {0}","","","","","","","","","","The boot arguments to pass to the kernel. If this field is …","","","","","","","","","The boot source builder (a boot source allocated and …","","","The commandline validated against correctness.","The boot source configuration.","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","The descriptor to the initrd file, if there is one.","Path of the initrd, if there is one.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The descriptor to the kernel file.","Path of the kernel image.","Creates the BootConfig based on a given configuration.","","","","","","","","","","","","","","","","","","Wrapper for the collection that holds all the Block Devices","Use this structure to set up the Block Device before …","Enum with all possible block device types.","Only provided fields will be updated. I.e. if any optional …","Cannot create RateLimiter: {0}","Unable to create the vhost-user block device: {0:?}","Unable to create the virtio block device: {0:?}","Unable to patch the block device: {0} Please verify the …","Errors associated with the operations allowed on a drive.","","Unabled to create block device from config","A root block device already exists!","VhostUserBlock type","VirtioBlock type","","Inserts an existing block device.","Inserts an existing block device.","","","","","","","","","","","","","","","","","","","","","If set to true, the drive will ignore flush requests …","Returns a vec with the structures used to configure the …","","","","","","The list of block devices. There can be at most one root …","Unique identifier of the drive.","The drive ID, as provided by the user at creation time.","","","The type of IO engine used by the device.","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets the index of the device with the specified <code>drive_id</code> …","Specifies whether there is a root block device already …","Inserts a <code>Block</code> in the block devices list using the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","If set to true, the drive is opened in read-only mode. …","If set to true, it makes the current device the root block …","Constructor for BlockDevices. It initializes an empty …","Part-UUID. Represents the unique id of the boot partition …","Path of the drive.","New block file path on the host. Only provided data will …","Rate Limiter for I/O operations.","New rate limiter config.","","Path to the vhost-user socket.","","","","","","","","","","","","","","","","","Could not create Entropy device: {0}","Could not create RateLimiter from configuration: {0}","A builder type used to construct an Entropy device","This struct represents the strongly typed equivalent of …","Errors that can occur while handling configuration for an …","","","","","","","","","","","","","","Build an entropy device and return a (counted) reference …","","","Get the configuration of the entropy device (if any)","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Get a reference to the entropy device, if present","Insert a new entropy device from a configuration object","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new instance for the builder","Configuration for RateLimiter of Entropy device","","Set the entropy device from an already created object","","","","","","","","","","","","","Serializable struct that contains general information …","Vm not started (yet)","Vm is Paused","Vm is running","Enumerates microVM runtime states.","The name of the application that runs the microVM.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","The ID of the microVM.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Whether the microVM is not started/running/paused.","","","","","","","","","","The version of the VMM that runs the microVM.","The default memory size of the VM, in MiB.","The memory size (MiB) is smaller than the previously set …","The memory size (MiB) is invalid.","The vCPU number is invalid! The vCPU number can only be 1 …","Could not get the configuration of the previously …","Firecracker aims to support small scale workloads only, so …","Struct used in PUT <code>/machine-config</code> API call.","Struct used in PATCH <code>/machine-config</code> API call. Used to …","Configuration of the microvm.","Errors associated with configuring the microVM.","","","","","","","","","","","","","","","","","","","","","","","","A CPU template that it is used to filter the CPU features …","A CPU template that it is used to filter the CPU features …","A CPU template that it is used to filter the CPU features …","","","","","Deserialization function for the <code>smt</code> field in <code>MachineConfig</code>…","Deserialization function for the <code>vcpu_num</code> field in …","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Checks if the update request contains any data. Returns …","The memory size in MiB.","The memory size in MiB.","The memory size in MiB.","","","Sets cpu tempalte field to …","Enables or disabled SMT.","Enables or disabled SMT.","Enables or disabled SMT.","","","","","","Enables or disables dirty page tracking. Enabling allows …","Enables or disables dirty page tracking. Enabling allows …","Enables or disables dirty page tracking. Enabling allows …","","","","","","","","","","","","","Updates <code>VmConfig</code> with <code>MachineConfigUpdate</code>. Mapping for cpu …","Number of vcpu to start.","Number of vcpu to start.","Number of vcpu to start.","Cannot initialize the metrics system due to bad user …","Strongly typed structure used to describe the metrics …","Errors associated with actions on the <code>MetricsConfig</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Configures the metrics as described in <code>metrics_cfg</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Named pipe or file used as output for metrics.","","","","","","","","","","The list of network interface IDs that allow forwarding …","The MMDS IPv4 address is not link local.","The list of network interface IDs provided contains at …","Keeps the MMDS configuration.","MMDS configuration related errors.","The MMDS could not be configured to version {0}: {1}","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the MMDS IPv4 address if one was configured. …","MMDS IPv4 configured address.","Returns the network interfaces that accept MMDS requests.","Network interfaces that allow forwarding packets to MMDS.","","","","","","","","","","Returns the MMDS version configured.","MMDS version.","Could not create the network device: {0}","Cannot create the rate limiter: {0}","Unable to update the net device: {0}","The MAC address is already in use: {0}","Builder for a list of network devices.","This struct represents the strongly typed equivalent of …","Errors associated with the operations allowed on a net …","The data fed into a network iface update request. …","Cannot open/create the tap device: {0}","","Adds an existing network device in the builder.","","","","","","","","","","","","","","","","","Builds a network device based on a network interface …","","","Returns a vec with the structures used to configure the …","Creates a Net device from a NetworkInterfaceConfig.","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Guest MAC address.","Host level path for the guest network interface.","ID of the guest network interface.","The net iface ID, as provided by the user at iface …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns a immutable iterator over the network devices.","Returns a mutable iterator over the network devices.","","Creates an empty list of Network Devices.","Rate Limiter for received packages.","New RX rate limiter config. Only provided data will be …","","","","","","","","","","","","","Rate Limiter for transmitted packages.","New TX rate limiter config. Only provided data will be …","","","","","Stores the configuration that will be used for creating a …","Diff snapshot.","Guest memory contents will be loaded from a file.","Full snapshot.","Stores the configuration for loading a snapshot that is …","Stores the configuration that will be used for loading a …","Stores the configuration used for managing snapshot memory.","Specifies the method through which guest memory will get …","The microVM is paused, which means that we can create a …","The microVM is resumed; this state should be set after we …","The snapshot type options that are available when creating …","Guest memory will be served through UFFD by a separate …","For crates that depend on <code>vmm</code> we export. <strong>SemVer version</strong> as …","Keeps the microVM state necessary in the snapshotting …","The microVM state options.","","","","","","","","","","","","","","","","","","","Path to the backend used to handle the guest memory.","Specifies the guest memory backend type.","","","","","","","","","","","","","","","","","","","","","","","","","Compare the major, minor, patch, and pre-release value of …","","","","","","","","","","Setting this flag will enable KVM dirty page tracking and …","Whether or not to enable KVM dirty page tracking.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Specifies guest memory backend configuration.","Guest memory backend configuration. Is not to be used in …","Path to the file that will contain the guest memory.","Path to the file that contains the guest memory to be …","","Create <code>Version</code> with an empty pre-release and build …","Create <code>Version</code> by parsing from string representation.","","","","When set to true, the vm is also resumed if the snapshot …","Whether or not to resume the vm post snapshot load.","","","","","Path to the file that will contain the microVM state.","Path to the file that contains the microVM state to be …","Path to the file that contains the microVM state to be …","This marks the type of snapshot we want to create. The …","The microVM state, which can be <code>paused</code> or <code>resumed</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Cannot create backend for vsock device: {0:?}","Cannot create vsock device: {0:?}","","","A builder of Vsock with Unix backend from ‘…","Errors associated with <code>NetworkInterfaceConfig</code>.","This struct represents the strongly typed equivalent of …","","","","","","","","","","","","","","","","","","","","","Returns the structure used to configure the vsock device.","Creates a Vsock device from a VsockDeviceConfig.","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Provides a reference to the Vsock if present.","A 32-bit Context Identifier (CID) used to identify the …","","Inserts a Unix backend Vsock in the store. If an entry …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates an empty Vsock with Unix backend Store.","","","","Inserts an existing vsock device.","","","","","","","","","","","","","","","Path to local unix socket.","","","ID of the vsock device.","Module with GuestMemory implementation.","Module with Vcpu implementation.","Module with Vm implementation.","Trait to represent an address within an address space.","<code>AtomicBitmap</code> implements a simple bit map on the page level …","Type used for dirty memory tracking.","Helper type alias for referring to the <code>BitmapSlice</code> …","Common bitmap operations. Using Higher-Rank Trait Bounds …","Trait used to represent that a <code>BitmapSlice</code> is a <code>Bitmap</code> …","Types for which it is safe to initialize from raw data.","A container to host a range of bytes and access its …","Cannot create memory: {0:?}","Cannot create memory region: {0:?}","Associated error codes","Cannot access file: {0:?}","Represents the start point within a <code>File</code> that backs a …","Represents a guest physical address (GPA).","<code>GuestMemory</code> represents a container for an <em>immutable</em> …","Defines the interface for snapshotting memory.","Type of GuestMemoryMmap.","Represents a continuous region of guest physical memory.","State of a guest memory region saved to file/buffer.","Describes guest memory regions and their snapshot file …","Type of GuestMmapRegion.","Type of GuestRegionMmap.","Type of the raw value stored in a <code>GuestAddress</code> object.","Lifetime generic associated iterators. Usually this is …","Cannot create memfd: {0:?}","Cannot resize memfd file: {0:?}","Errors associated with dumping guest memory to file.","Represents an offset inside a region.","Helper structure for working with mmaped memory regions in …","A factory struct to build <code>MmapRegion</code> objects.","Cannot create mmap region: {0}","Cannot fetch system’s page size: {0:?}","Type of objects hosted by the address space.","Cannot create guest memory: {0}","Cannot dump memory: {0:?}","","","","Traits to represent an address within an address space.","Returns <code>true</code> if the given address is within this region.","Returns <code>true</code> if the given address is present within the …","Return a reference to the inner <code>Arc&lt;File&gt;</code> object.","","","","","","","","","","Converts a mutable reference to <code>self</code> into a <code>VolatileSlice</code>. …","","","","","","","","","","Converts a mutable reference to <code>self</code> into a mutable slice …","Returns a mutable slice corresponding to the data in the …","Returns a pointer to the beginning of the memory region. …","Converts a reference to <code>self</code> into a slice of bytes.","Returns a slice corresponding to the data in the region.","Gets a slice of memory for the entire region that supports …","Base GuestAddress.","","","Borrow the associated <code>Bitmap</code> object.","Returns a reference to the inner bitmap object.","","","","","","","","","","","","","","","","","","","","","","","","Build the <code>MmapRegion</code> object.","Creates a mapping based on the provided arguments.","Creates a <code>MmapRegion</code> instance for an externally managed …","Returns the given address if it is within this region.","Returns the given address if it is present within the …","Check whether the range [base, base + len) is valid.","Computes <code>self + other</code>, returning <code>None</code> if overflow occurred.","","","Returns self, aligned to the given power of two.","Returns the address plus the offset if it is in this …","Returns the address plus the offset if it is present …","Computes the offset from this address to the given base …","","","Subtracts two addresses, checking for underflow. If …","","","","","","","","","","","","","Creates a memfd file with the <code>size</code> in MiB.","","","","","Describes GuestMemoryMmap through a GuestMemoryState …","Describes GuestMemoryMmap through a GuestMemoryState …","","","Check whether the specified <code>offset</code> is marked as dirty.","","","Dumps all contents of GuestMemoryMmap to a writer.","Dumps all contents of GuestMemoryMmap to a writer.","Dumps all pages of GuestMemoryMmap present in <code>dirty_bitmap</code> …","Dumps all pages of GuestMemoryMmap present in <code>dirty_bitmap</code> …","","","","","Checks whether this region and <code>other</code> are backed by …","Returns a reference to the inner <code>File</code> object.","","Returns information regarding the file and offset backing …","Returns information regarding the offset into the file …","","","","Returns the region containing the specified address or <code>None</code>…","Returns the value of the <code>flags</code> parameter passed to <code>mmap</code> …","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new <code>FileOffset</code> object based on an exiting …","Creates a shared file mapping of <code>size</code> bytes.","Converts a mutable slice of raw data into a mutable …","Creates a GuestMemoryMmap from raw regions with guard …","Creates a GuestMemoryMmap from raw regions backed by …","Creates a GuestMemoryMmap from raw regions with guard …","Creates a GuestMemoryMmap from raw regions with guard …","Converts a slice of raw data into a reference of <code>Self</code>.","Creates a GuestMemoryMmap given a <code>file</code> containing the data …","Creates a GuestMemoryMmap backed by a <code>file</code> if present, …","Atomically get and reset the dirty page bitmap.","Returns the host virtual address corresponding to the …","Get the host virtual address corresponding to the guest …","Returns a <code>VolatileSlice</code> of <code>count</code> bytes starting at <code>offset</code>.","Returns a <code>VolatileSlice</code> of <code>count</code> bytes starting at <code>addr</code>.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Is the bit corresponding to address <code>addr</code> set?","Is bit <code>n</code> set? Bits outside the range of the bitmap are …","Show if the region is based on the <code>HugeTLBFS</code>. Returns …","Returns <code>true</code> if the region is hugetlbfs","Gets an iterator over the entries in the collection.","Returns the maximum (inclusive) address managed by the …","Returns the maximum (inclusive) address managed by the …","Returns the size of the region.","Get the length of the bitmap in bits (i.e. in how many …","","Atomically load a value from the specified address.","","Applies two functions, specified as callbacks, on the …","","Mark the memory range specified by the given <code>offset</code> and <code>len</code>…","Mark memory range as dirty","","Mark memory range as dirty","Returns the bitwise and of the address with the given mask.","Creates an address from a raw address value.","Create a new <code>MmapRegionBuilder</code> using the default value for …","Create a new bitmap of <code>byte_size</code>, with one bit per page. …","","","Creates a new <code>FileOffset</code> object.","Creates a shared anonymous mapping of <code>size</code> bytes.","Create a new <code>MmapRegionBuilder</code> using the provided <code>Bitmap</code> …","Returns the number of regions in the collection.","Offset in file/buffer where the region is saved.","Computes <code>self + other</code>.","","","Computes <code>self - other</code>.","","","Returns <code>true</code> if the mapping is owned by this <code>MmapRegion</code> …","","","","","","Returns the value of the <code>prot</code> parameter passed to <code>mmap</code> …","","","","","Returns the raw value of the address.","","","Reads data from the container at <code>addr</code> into a slice.","Reads exactly <code>count</code> bytes from an object and writes them …","Reads exactly <code>count</code> bytes from an object and writes them …","Reads up to <code>count</code> bytes from an object and writes them …","Reads an object from the container at <code>addr</code>.","Reads data from the container at <code>addr</code> to fill an entire …","Reads up to <code>count</code> bytes from an object and writes them …","","List of regions.","Reset all bitmap bits to 0.","","","Set a range of <code>len</code> bytes starting at <code>start_addr</code>. The first …","Set the hugetlbfs of the region","Returns the size of this region.","","","","","Region size.","Return a <code>&lt;Self as WithBitmapSlice&gt;::S</code> slice of the current …","","Returns the start offset within the file.","","Returns the minimum (inclusive) address managed by the …","Atomically store a value at the specified address.","","","","","Tries to convert an absolute address to a relative address …","Tries to convert an absolute address to a relative address …","","Invokes callback <code>f</code> to handle data in the address range …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Computes <code>self + offset</code>.","","","Returns self, aligned to the given power of two. Only use …","Computes the offset from this address to the given base …","Computes <code>self - other</code>.","","","","","Creates a GuestMemoryMmap with <code>size</code> in MiB and guard pages …","Creates a GuestMemoryMmap with <code>size</code> in MiB and guard pages …","Create the <code>MmapRegion</code> object with the specified <code>file_offset</code>…","Create the <code>MmapRegion</code> object with the specified <code>hugetlbfs</code> …","","Create the <code>MmapRegion</code> object with the specified mmap <code>flags</code>.","Create the <code>MmapRegion</code> object with the specified mmap …","Create the <code>MmapRegion</code> object with pre-mmapped raw pointer.","Perform the specified action on each region.","Perform the specified action on each region mutably.","Creates a GuestMemoryMmap with <code>size</code> in MiB and guard pages.","Creates a GuestMemoryMmap with <code>size</code> in MiB and guard pages …","Writes a slice into the container at <code>addr</code>.","Reads exactly <code>count</code> bytes from the container at <code>addr</code> and …","Reads exactly <code>count</code> bytes from the container at <code>addr</code> and …","Writes an object into the container at <code>addr</code>.","Writes the entire content of a slice into the container at …","Reads up to <code>count</code> bytes from the container at <code>addr</code> and …","Reads up to <code>count</code> bytes from the container at <code>addr</code> and …","Trait to represent an address within an address space.","Simple helper trait used to store a raw address value.","Type of the raw address value.","Computes <code>self + other</code>, returning <code>None</code> if overflow occurred.","Returns self, aligned to the given power of two.","Computes the offset from this address to the given base …","Subtracts two addresses, checking for underflow. If …","Returns the bitwise and of the address with the given mask.","Creates an address from a raw address value.","Return the value zero, coerced into the value type <code>Self::V</code>","Computes <code>self + other</code>.","Computes <code>self - other</code>.","Returns the raw value of the address.","Computes <code>self + offset</code>.","Returns self, aligned to the given power of two. Only use …","Computes the offset from this address to the given base …","Computes <code>self - other</code>.","Return the value zero, coerced into the value type <code>Self::V</code>","Event to dump CPU configuration of a paused Vcpu.","Vcpu is in the state where CPU config is dumped.","Requested action encountered an error.","Vcpu is stopped.","Received error signaling kvm exit: {0}","The vCPU thread will end when receiving this message.","Handled.","Interrupted.","","Requested action not allowed.","Pause the Vcpu.","Vcpu is paused.","Event to resume the Vcpu.","Vcpu is resumed.","Event to save the state of a paused Vcpu.","Vcpu state is saved.","Failed to signal vcpu: {0}","Error type for <code>Vcpu::start_threaded</code>.","Stopped.","","Unexpected kvm exit received: {0}","Signal number (SIGRTMIN) used to kick Vcpus.","A wrapper around creating and using a vcpu.","","Encapsulates configuration parameters for the guest vCPUS.","Error creating vcpu config: {0}","Vcpu emulation state.","Errors associated with the wrappers over KVM ioctls.","List of events that the Vcpu can receive.","Wrapper over Vcpu that hides the underlying interactions …","List of responses that the Vcpu reports.","Failed to run action on vcpu: {0}","Error type for <code>VcpuHandle::send_event</code>.","Cannot spawn a new vCPU thread: {0}","Cannot clean init vcpu TLS","Vcpu not present in TLS","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Configuration for vCPU","","","Calls <code>KVM_RUN</code> with this <code>Vcpu</code>’s underlying file …","","The receiving end of events channel owned by the vcpu side.","The transmitting end of the events channel which will be …","","","File descriptor for vcpu to trigger exit event on vmm.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Associates <code>self</code> with the current thread.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Access to kvm-arch specific functionality.","Constructs a new VCPU for <code>vm</code>.","Creates a new <code>VcpuHandle</code>.","","Registers a signal handler which makes use of TLS and kvm …","Deassociates <code>self</code> from the current thread.","Returns a reference to the [<code>Received</code>] from which the vcpu…","The receiving end of the responses channel which will be …","","The transmitting end of the responses channel owned by the …","Main loop of the vCPU thread.","Runs the vCPU in KVM context and handles the kvm exit …","Runs <code>func</code> for the <code>Vcpu</code> associated with the current thread.","","Sends event to vCPU.","Sets a MMIO bus for this vcpu.","Enable simultaneous multithreading in the CPUID …","Moves the vcpu to its own thread and constructs a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Number of guest VCPUs.","","Module with x86_64 vCPU implementation.","Failed to convert <code>kvm_bindings::CpuId</code> to <code>Cpuid</code>: {0}","Failed to convert <code>Cpuid</code> to <code>kvm_bindings::CpuId</code>: {0}","Failed FamStructWrapper operation: {0}","Error configuring the floating point related registers: {0}","Failed to get dumpable MSR index list: {0}","Error type for <code>KvmVcpu::get_tsc_khz</code> and …","A wrapper around creating and using a kvm x86_64 vcpu.","Error type for <code>KvmVcpu::configure</code>.","Errors associated with the wrappers over KVM ioctls.","Cannot set the local interruption due to bad …","Failed to apply modifications to CPUID: {0}","Error configuring the general purpose registers: {0}","Failed to set CPUID: {0}","Failed to configure LAPICs: {0}","Failed to set MSRs: {0}","Error type for <code>KvmVcpu::set_tsc_khz</code>.","Failed to setup FPU: {0}","Failed to setup registers: {0}","Failed to setup special registers: {0}","Error configuring the special registers: {0}","","","Cannot open the VCPU file descriptor: {0}","Failed to get KVM vcpu cpuid: {0}","Failed to get KVM vcpu debug regs: {0}","Failed to get KVM vcpu lapic: {0}","Failed to get KVM vcpu mp state: {0}","Failed to get KVM vcpu msrs: {0}","Unexpected number of MSRS reported by the kernel","Failed to get KVM vcpu regs: {0}","Failed to get KVM vcpu sregs: {0}","Failed to get KVM TSC frequency: {0}","Failed to get KVM vcpu event: {0}","Failed to get KVM vcpu xcrs: {0}","Failed to get KVM vcpu xsave: {0}","Failed to set KVM vcpu cpuid: {0}","Failed to set KVM vcpu debug regs: {0}","Failed to set KVM vcpu lapic: {0}","Failed to set KVM vcpu mp state: {0}","Failed to set KVM vcpu msrs: {0}","Failed to set all KVM MSRs for this vCPU. Only a partial …","Failed to set KVM vcpu regs: {0}","Failed to set KVM vcpu sregs: {0}","Failed to set KVM TSC frequency: {0}","Failed to set KVM vcpu event: {0}","Failed to set KVM vcpu xcrs: {0}","Failed to set KVM vcpu xsave: {0}","Structure holding VCPU kvm state.","Failed to apply CPU template","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Configures a x86_64 specific vcpu for booting Linux and …","CpuId.","","Debug regs.","","","","Dumps CPU configuration (CPUID and MSRs).","","","","","KVM vcpu fd.","","","","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get CPUID for this vCPU.","Get MSR chunks for the given MSR index list.","Get MSRs for the given MSR index list.","Get the current TSC frequency for this vCPU.","Index of vcpu.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Checks whether the TSC needs scaling when restoring a …","Lapic.","Mmio bus.","Mp state","Msrs.","","Constructs a new kvm vcpu with arch specific functionality.","Pio bus.","Kvm regs.","Use provided state to populate KVM internal state.","Runs the vCPU in KVM context and handles the kvm exit …","Save the KVM internal state.","Saved msrs.","","Sets a Port Mapped IO bus for this vcpu.","Scale the TSC frequency of this vCPU to the one provided …","","","","Sregs.","","","","","","","","","","","","","","","","","","Tsc khz.","","","","","","","Vcpu events","","Xcrs.","Xsave.","The host kernel reports an invalid KVM API version: {0}","Missing KVM capabilities: {0:x?}","","Failed to get MSR index list to save into snapshots: {0}","Error creating KVM object: {0} Make sure the user …","The number of configured slots is bigger than the maximum …","Error type for <code>Vm::restore_state</code>","Set clock error: {0}","Set IrqChipIoAPIC error: {0}","Set IrqChipPicMaster error: {0}","Set IrqChipPicSlave error: {0}","Set PIT2 error: {0}","Cannot set the memory regions: {0}","A wrapper around creating and using a VM.","Errors associated with the wrappers over KVM ioctls. Needs …","VM error: {0}","Cannot open the VM file descriptor: {0}","Failed to get KVM vm clock: {0}","Failed to get KVM vm irqchip: {0}","Failed to get KVM vm pit state: {0}","Failed to set KVM vm clock: {0}","Failed to set KVM vm irqchip: {0}","Failed to set KVM vm pit state: {0}","Cannot configure the microvm: {0}","Structure holding VM kvm state.","","","","","","","","","","","","","","","","","","","","","","","","","","","Gets a reference to the kvm file descriptor owned by this …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Additional capabilities that were specified in cpu …","Additional capabilities that were specified in cpu …","","Initializes the guest memory.","Returns a ref to the list of serializable MSR indices.","","Constructs a new <code>Vm</code> using the given <code>Kvm</code> instance.","","","","Restores the KVM VM state.","Saves and returns the Kvm Vm state.","","","Creates the irq chip and an in-kernel device model for the …","","Returns a ref to the supported <code>CpuId</code> for this Vm.","","","","","","","","","","","","","","","",""],"if":"`````````````````````````````````````````````````````````````````{cb{}}00000000000{d{{j{fh}}}}`{ce{}{}}00000000000``{ll}{{ce}n{}{}}```{dn}`{d{{j{{Ab{A`}}Ad}}}}{d{{j{nAf}}}}`{{ll}Ah}`{{lAj}Al}{{AnAj}Al}0{{AfAj}Al}0{{B`Aj}Al}0{{AdAj}Al}0{{dAj}Al}{cc{}}00{BbAf}1{BdB`}{BfB`}{BhAd}{BjAd}55{{dBlBn}{{Cd{{Cb{C`}}}}}}{d{{j{CfAn}}}}{dCh}`{{dCj}n}{dCl}`{ce{}{}}00000`{d{{j{Cnh}}}}`{ChD`}``{d{{j{nAn}}}}``{{dDbCj}n}``1`{{dDd}{{j{DfDh}}}}{d{{j{{Ab{Dj}}Dh}}}}`3{{dAh}{{j{nAn}}}}{d{{Cd{l}}}}``{Af{{Cd{Dl}}}}{B`{{Cd{Dl}}}}{Ad{{Cd{Dl}}}}{{d{Ab{Dn}}{Eb{E`}}}{{j{nB`}}}}{{dl}n}`={cEd{}}000{c{{j{e}}}{}{}}00000000000{cEf{}}00000`{{dEh}{{j{nh}}}}{{dEj}{{j{nh}}}}{{dBnEd}{{j{nAn}}}}{{dBnElEl}{{j{nAn}}}}{{dBnElElElEl}{{j{nAn}}}}{{dBn}{{j{nAn}}}}```{dEd}`````````````````{cb{}}000{ce{}{}}000{BlBl}{{ce}n{}{}}`{{cEnEj}{{F`{Bl}}}Fb}{{BlBl}Ah}{{BlAj}Al}0{{FdAj}Al}{cc{}}0`{{Blc}nFf}`88{{BlcEnEj}{{F`{n}}}Fh}`9{cEd{}}{c{{j{e}}}{}{}}000{cEf{}}0{{}Ej}```````````````{{FjD`D`Eh}{{j{nFl}}}}{Fn{{Ab{{Gb{G`Fn}}}}}}{cb{}}0{ce{}{}}0{{ChG`Fn{Cd{Fd}}Gd}{{j{nFl}}}}`{{FlFl}Ah}{{FlAj}Al}0{GfFl}>`{{}D`}{{ChFn}{{j{D`Fl}}}}`6````{Fl{{Cd{Dl}}}}>==<`8877{{GhGh}Gj}{{GhGh}Ah}```{{GhAj}Al}{EhGh}{cc{}}{{}Gh}={GhAh}`{{GhGh}{{Cd{Gj}}}}`{c{{j{e}}}{}{}}0{cEf{}}{{EjEhEh}D`}{D`Gd}{D`D`}1111{D`Eh}222{{D`Gd}Gl}````````{cb{}}0{ce{}{}}0{{GnGn}Ah}{{GnAj}Al}0>{{H`Fn}Eh}3{{EhEh}Eh}{{H`FnEh}n}{Hb{{j{nGn}}}}{cEd{}}??>````````````````````````````````````8877`{cGdHd}{GdFn}{{GfGf}Ah}{{GfAj}Al}0{cc{}}<{HfGd}{{ChGd}{{j{nGf}}}}7{c{{j{e}}}{}{}}0{cEf{}}`````````````````````````````````````````````{{}Hh}{cb{}}00000`{{HhHh}Hh}{{HhHh}n}10{HhD`}021{ce{}{}}00000{HhHh}{{HjEh}Ah}{{HhHh}Ah}{{}{{Ab{Hl}}}}979{{HnHn}Ah}{{Hhc}n{{Ib{}{{I`{Hh}}}}}}{{HnAj}Al}0{{HjAj}Al}{{HhAj}Al}000{cc{}}{IdHn}{IfHn}22{D`{{Cd{Hh}}}}{D`Hh}00{cHh{{Ib{}{{I`{Hh}}}}}}{Bn{{Cd{Hh}}}}{Ih{{j{IjHn}}}}0{{HhHh}n}{{HhHh}Hh}{{HhHh}Ah}{ce{}{}}00{Hhc{}}{HhAh}0{Hh{{Il{Hh}}}}{Hh{{In{Hh}}}}{EhAh}00`{HhHh}9{{HhHhAh}n}{{Hb{J`{Hl}}}{{j{nHn}}}}{Hn{{Cd{Dl}}}};<;{cEd{}}={c{{j{e}}}{}{}}00000{cEf{}}00>``````````````````````````````{cb{}}0000000========{{ChJb}{{j{nJd}}}}{{JdJd}Ah}{{JfJf}Ah}{{JhJh}Ah}{{JjJj}Ah}{{JdAj}Al}0{{JfAj}Al}0{{JhAj}Al}0{{JjAj}Al}0{cc{}}{BfJf}11{BfJh}2{ce{}{}}000{Hb{{j{nJf}}}}={{HbD`}{{j{nJh}}}}{{ChHb}{{j{nJj}}}}{cEd{}}000{c{{j{e}}}{}{}}0000000{cEf{}}000{{{J`{D`}}Ch}{{j{nJd}}}}{{D`Ch}{{j{nJd}}}}``````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````{cb{}}0000000000000009999999999999999`````{HfHf}{JlJl}{JnJn}{K`K`}{KbKb}{KdKd}{KfKf}{KhKh}{{ce}n{}{}}0000000``{{}Hf}{{}Jl}{{}Jn}{{}K`}{{}Kb}{{}Kd}{{}Kf}{{}Kh}````{{HfHf}Ah}{{JlJl}Ah}{{JnJn}Ah}{{K`K`}Ah}{{KbKb}Ah}{{KdKd}Ah}{{KfKf}Ah}{{KhKh}Ah}```````{{HfAj}Al}{{JlAj}Al}{{JnAj}Al}{{K`Aj}Al}{{KbAj}Al}{{KdAj}Al}{{KfAj}Al}{{KhAj}Al}{cc{}}0000000{ce{}{}}0000000````````````````````````````````````````````00000000{c{{j{e}}}{}{}}000000000000000`````{cEf{}}0000000```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````{cb{}}000{{dKj{Eb{{Cb{Kl}}}}Kn}{{j{nL`}}}}{{dKjcKn}{{j{nL`}}}{{Ld{}{{I`{Lb}}}}Lf}}{{dLh}{{j{nL`}}}}{{dKj{Eb{{Cb{Lj}}}}Kn}{{j{nL`}}}}{{dKjcKn}{{j{nL`}}}{{Ld{}{{I`{{Eb{{Cb{Ll}}}}}}}}Lf}}{{dKj{Eb{{Cb{{M`{Ln}}}}}}Kn}{{j{nL`}}}}{{KndEd{Eb{{Cb{c}}}}KjAh}{{j{nL`}}}{MbMdLf}}::::{{ClMfKnMh}{{j{{Eb{{Cb{d}}}}L`}}}}0{{ClKnDfCh{Cd{Mj}}AhMhMf}{{j{{Eb{{Cb{d}}}}Ml}}}}{{d{J`{Dn}}MnN`G`{Cd{Fd}}Kj}{{j{nL`}}}}{{NbGdNd}{{j{{Ab{Dn}}An}}}}{{ClKnCh{Cd{Mj}}AhGd{Ab{Nf}}}{{j{{Gb{d{Ab{Dn}}}}L`}}}}{{L`Aj}Al}0{{MlAj}Al}0{cc{}}{NhL`}{NjL`}{NlL`}{B`Ml}{BhMl}{NnMl}{O`Ml}{AfMl}{ObMl}{BfMl}{OdMl};{OfMl}{L`Ml}{DhMl}{ce{}{}}0{{Chc}{{j{FdL`}}}{OhOjLf}}{{OlCh}{{j{{Cd{Fd}}L`}}}}{{OlCh}{{j{G`L`}}}}{{}n}{Nb{{j{nL`}}}}{{KnOnA`}{{j{{Eb{{Cb{C`}}}}An}}}}{L`{{Cd{Dl}}}}{Ml{{Cd{Dl}}}}{cEd{}}0{c{{j{e}}}{}{}}000{cEf{}}0```````````````````````{{{Ab{c}}c}c{AdLf}}{cb{}}0000000{{AdEh}Ah}>>>>>>>>{AfAf}{NfNf}{{{Ab{c}}}{{Ab{c}}}{AdAh}}{{ce}n{}{}}00`{{}{{Ab{c}}}{AdAj}}{c{{j{Nf}}}Al}{{cEnEj}{{F`{Nf}}}Fb}{c{{j{{Ab{e}}}}}Al{AdLf}}{{NjNj}Ah}{{AfAf}Ah}{{NfNf}Ah}{{{Ab{c}}{Ab{c}}}Ah{AdAn}}`{{NjAj}Al}0{{AfAj}Al}{{NfAj}Al}{{{Ab{c}}Aj}Al{AdLf}}{cc{}}000{AA`{{j{{AAb{N`}}Nj}}}}{{{Ab{c}}e}n{AdAAd}Ff}`{ce{}{}}000{{}Ad}{{NfcEnEj}{{F`{n}}}Fh}{{Nfc}jAAf}{{{Ab{c}}e}j{AdLf}AAf}`444{cEd{}}{c{{j{e}}}{}{}}0000000{cEf{}}000`{{}Ej}7``````{c{{j{Eh}}}Al}{c{{j{D`}}}Al}{{ce}j{AAhLf}AAf}```````{{A`N`}{{j{A`Nh}}}}{cb{}}000===={A`A`}{{ce}n{}{}}```{{NhNh}Ah}{{A`A`}Ah}{{NhAj}Al}0{{A`Aj}Al}{cc{}}0{ce{}{}}0```0{cEd{}}{c{{j{e}}}{}{}}000{cEf{}}0``````````````````````````````````````````{AAj{{Cd{AAl}}}}0{{AAn{AB`{Gd}}}{{j{nABb}}}}==============55555555555555{AAjAAj}{ABdABd}{ABfABf}{ABhABh}{ABjABj}{{ce}n{}{}}0000{{ABdABd}Gj}{{ABfABf}Gj}`{EhABl}{{EhEh}ABl}{{}ABd}{{}ABf}{{}ABh}{{}ABj}{c{{j{ABf}}}Al}{c{{j{ABh}}}Al}{c{{j{ABj}}}Al}````{{ABbABb}Ah}{{ABnABn}Ah}{{AAjAAj}Ah}{{ABdABd}Ah}{{ABfABf}Ah}{{ABhABh}Ah}{{ABjABj}Ah}`{{ABbAj}Al}0{{ABnAj}Al}0{{AAjAj}Al}{{ABdAj}Al}{{ABfAj}Al}{{ABhAj}Al}{{ABjAj}Al}{cc{}}000000{ABlABj}{{AAnABd}{{Cd{ABh}}}}{{AAjABd}{{Cd{ABh}}}}10{{ABfc}nFf}{{}{{AB`{Gd}}}}{AAj{{AC`{ABdABh}}}}0`{AAj{{Cd{ACb}}}}0{ce{}{}}000000{EhABd}``{{AAjGdGdGd}{{j{nACd}}}}{{ABdABd}{{Cd{Gj}}}}{{ABfABf}{{Cd{Gj}}}}`{{ABfc}jAAf}{{ABhc}jAAf}{{ABjc}jAAf}{{EhEh}ABd}`88888{cEd{}}0{c{{j{e}}}{}{}}00{ACf{{j{AAjc}}}{}}11111111111{cEf{}}000000{AAj{{j{nACh}}}}{{AAjGdGdGdGd}{{j{nACj}}}}{{AAjGdGd}{{j{nACl}}}}{AAj{{j{nACn}}}}{AAn{{Cd{{AB`{Gd}}}}}}`````````````````````````{cb{}}0{ce{}{}}0{AAlAAl}{{ce}n{}{}}{{AAlAAl}Ah}{{AAlAj}Al}{cc{}}{ACfAAl}{{AAlABd}{{Cd{ABh}}}}07`{{AAlGdGdGd}{{j{nAD`}}}}{AAl{{j{nADb}}}}9{c{{j{e}}}{}{}}0{cEf{}}{{AAlGd}{{j{nADd}}}}{AAl{{j{nAD`}}}}{{AAlGdGd}{{j{nADf}}}}{{AAlGdGd}{{j{nADh}}}}222```````````````````````````````{cb{}}000000000{ce{}{}}000000000{{AD`AD`}Ah}{{ADbADb}Ah}{{ADdADd}Ah}{{ADhADh}Ah}{{ADfADf}Ah}{{AD`Aj}Al}0{{ADbAj}Al}0{{ADdAj}Al}0{{ADhAj}Al}0{{ADfAj}Al}0{cc{}}{ADfAD`}{ADdAD`}{ADbAD`}{ADhAD`}4444?????{AD`{{Cd{Dl}}}}{cEd{}}0000{c{{j{e}}}{}{}}000000000{cEf{}}0000````{cb{}}0{ce{}{}}0{{IfIf}Ah}{{IfAj}Al}0<{{EhEh}{{j{ABlIf}}}}{{}{{j{{AB`{Gd}}If}}}}4{ACf{{ADj{Eh}}}}9887`````````````6655{ACbACb}{{ce}n{}{}}{{ACbACb}Ah}{{ACbAj}Al}{cc{}}{ACfACb}{{ACbABd}{{Cd{ABh}}}}0<`{{ACbGdGdGd}{{j{nADl}}}}={c{{j{e}}}{}{}}0{cEf{}}{ACb{{j{nADl}}}}{{ACbGdGd}{{j{nADn}}}}111`````````````````````{cb{}}00000{ce{}{}}00000{{{AB`{Gd}}}{{j{{AB`{Gd}}AE`}}}}{{ADlADl}Ah}{{ADnADn}Ah}{{AE`AE`}Ah}{{ADlAj}Al}0{{ADnAj}Al}0{{AE`Aj}Al}0{cc{}}{ADnADl}11999{ADl{{Cd{Dl}}}}{cEd{}}00{c{{j{e}}}{}{}}00000{cEf{}}00```````````````````````````````````>>>>>>>>>>>>>>=============={{ACdACd}Ah}{{ACnACn}Ah}{{AClACl}Ah}{{AEbAEb}Ah}{{ACjACj}Ah}{{AChACh}Ah}{{AEdAEd}Ah}{{ACdAj}Al}0{{ACnAj}Al}0{{AClAj}Al}0{{AEbAj}Al}0{{ACjAj}Al}0{{AChAj}Al}0{{AEdAj}Al}0{ACjACd}{cc{}}{ACnACd}{AD`ACd}{AClACd}{AChACd}{ADlACd}555555{Gd{{j{GdAEb}}}}{{Eh{AEf{Gd}}}Eh}{ce{}{}}000000{{{AEf{Gd}}}Eh}{{EhGdAh}n}{{Eh{AEf{Gd}}Eh}{{j{nAEd}}}}{ACd{{Cd{Dl}}}}{cEd{}}000000{c{{j{e}}}{}{}}0000000000000{cEf{}}000000``````````{cb{}}000000000``8888888888{AEhAEh}{AEjAEj}{AElAEl}{N`N`}{AEnAEn}{{ce}n{}{}}0000{{AEhAEh}Gj}`{{}AEl}{{}N`}{{}AEn}{c{{j{AEh}}}Al}{c{{j{AEj}}}Al}{c{{j{AEl}}}Al}{c{{j{N`}}}Al}{c{{j{AEn}}}Al}4{c{{j{ABf}}}Al}{{AEhAEh}Ah}{{AEjAEj}Ah}{{AElAEl}Ah}{{N`N`}Ah}{{AEnAEn}Ah}`{{AEhAj}Al}{{AEjAj}Al}{{AElAj}Al}{{N`Aj}Al}{{AEnAj}Al}{cc{}}0000{N`{{Ab{Eh}}}}{{AEhc}nFf}{{AEjc}nFf}{{AElc}nFf}{{AEnc}nFf}{ce{}{}}0000````{{AEhAEh}{{Cd{Gj}}}}`{{AEhc}jAAf}{{AEjc}jAAf}{{AElc}jAAf}{{N`c}jAAf}{{AEnc}jAAf}4`66666{c{{j{e}}}{}{}}00{Bn{{j{N`c}}}{}}1{{{J`{Gd}}}{{j{N`c}}}{}}222222{cEf{}}0000{N`{{j{nAF`}}}}```````{cb{}}0<<`{AFbAFb}{{ce}n{}{}}{{}AFb}{c{{j{AFb}}}Al}{{cEnEj}{{F`{AFb}}}Fb}{{AFbAFb}Ah}{{AFbAj}Al}0{cc{}}{AfAFb}{{{Cd{Af}}}AFb}{ce{}{}}{AFbAh}{{AFbcEnEj}{{F`{n}}}Fh}{{AFbc}jAAf}````3{cEd{}}{c{{j{e}}}{}{}}0{cEf{}}{{}Ej}{{}N`}0000``0```````````````{cb{}}0009999``{{AFdAj}Al}0{{AFfAj}Al}>{BbAFd}{AFhAFd}{cc{}}`>>``{{{Eb{{Cb{C`}}}}Nd}{{j{AFfAFd}}}}{{AFfAFj}{{j{nAFd}}}}`<;;;;::``````````````{{KjAFl}{{j{nAFn}}}}``{{AG`Eh}{{j{AFlAFn}}}}999999{ce{}{}}00000`{AFlAFl}{{ce}n{}{}}{{cEnEj}{{F`{AFl}}}Fb}{{AFlAFl}Ah}{{AFnAj}Al}0{{AFlAj}Al}{{AG`Aj}Al}{{AG`e}{{j{nc}}}Lf{{AGd{BlEdAFl{Cb{C`}}}{{AGb{{j{nc}}}}}}}}{{AG`e}{{j{nc}}}Lf{{AGd{EhEdAFl{Eb{{Cb{Mb}}}}}{{AGb{{j{nc}}}}}}}}>>>{{AG`BlBn}{{Cd{{Cb{C`}}}}}}{AG`{{AGf{{Gb{BlEd}}AFl}}}}`;;;``{AG`n}`{{D`D`{Gb{EhEh}}}{{j{AG`AFn}}}}{{AG`AGh}{{j{nAFn}}}}{{AG`{Gb{BlEd}}AFl{Eb{{Cb{C`}}}}}{{j{nAFn}}}}{{AG`AFjEdAGjAFl}{{j{nAFn}}}}{{AG`AFjEdAGjKj}{{j{AFlAFn}}}}{{ce}{{j{AG`g}}}{}{}{}}{AG`c{}}{{AFlcEnEj}{{F`{n}}}Fh}{ce{}{}}{cEd{}}{c{{j{e}}}{}{}}00000{cEf{}}00{{}Ej}{{AG`EhBne}{{j{nAFn}}}{MbLf}{{AGl{c}{{AGb{{j{nEd}}}}}}}}``````````````````````````````{cb{}}000000000000000000000`6666666666666666666666{AGnAGn}{AH`AH`}{AHbAHb}{AHdAHd}{AHfAHf}{AHhAHh}{AHjAHj}{AHlAHl}{{ce}n{}{}}0000000{{AHlEj}{{F`{n}}}}{{}AHl}{{cEnEj}{{F`{AGn}}}Fb}{{cEnEj}{{F`{AH`}}}Fb}{{cEnEj}{{F`{AHb}}}Fb}{{cEnEj}{{F`{AHd}}}Fb}{{cEnEj}{{F`{AHf}}}Fb}{{cEnEj}{{F`{AHh}}}Fb}{{cEnEj}{{F`{AHj}}}Fb}{{cEnEj}{{F`{AHl}}}Fb}```````````````````{{AHjAHj}Ah}`{{AHnAj}Al}{{AI`Aj}Al}0{{AGnAj}Al}{{AH`Aj}Al}{{AHbAj}Al}{{AHdAj}Al}{{AHfAj}Al}{{AHhAj}Al}{{AHjAj}Al}{{AHlAj}Al}{{AIbAj}Al}`{cc{}}{AIdAI`}1{AIfAI`}{AIhAI`}{AIjAI`}{AIlAI`}{AFnAI`}{AInAI`}{hAI`}{AJ`AI`}9999999{AJbAHj}::`{ce{}{}}0000000000```{{AGncEnEj}{{F`{n}}}Fh}{{AH`cEnEj}{{F`{n}}}Fh}{{AHbcEnEj}{{F`{n}}}Fh}{{AHdcEnEj}{{F`{n}}}Fh}{{AHfcEnEj}{{F`{n}}}Fh}{{AHhcEnEj}{{F`{n}}}Fh}{{AHjcEnEj}{{F`{n}}}Fh}{{AHlcEnEj}{{F`{n}}}Fh}{AI`{{Cd{Dl}}}}99999999{cEd{}}``````{c{{j{e}}}{}{}}000000000000000000000{cEf{}}0000000000{{}Ej}0000000`````````````````{cb{}}0>>`{{AJdAj}Al}0{cc{}}{ce{}{}}``{{AJfAJd}n}8776```````````44444444{C`{{Cd{AGh}}}}022222222{AJhAJh}{AJjAJj}{{ce}n{}{}}0{{AJhAJh}Gj}{{}AJj}`{{AJhAJh}Ah}{{AJjD`}{{Cd{{Gb{AJh{Cb{C`}}}}}}}}{{AFhAj}Al}0{{AJhAj}Al}{{AJjAj}Al}{{C`Aj}Al}>>>>{{AJjD`}{{Cd{{Gb{D`{Cb{C`}}}}}}}}{C`{{Cd{AJl}}}}0{{C`Cj}n}{{AJj{Eb{{Cb{C`}}}}D`D`}{{j{nAFh}}}}{ce{}{}}000{C`{{Cd{AGj}}}}0<{{AJhAJh}{{Cd{Gj}}}}{{C`DbCj}n}{{AJjD`{J`{Gd}}}Ah}{{C`D`{J`{Gd}}}n}{C`{{Cd{{AJn{On}}}}}}066{cEd{}}{c{{j{e}}}{}{}}0000000{cEf{}}00054```````````{cb{}}0`::````{AK`c{}}{cjAAf}{{AK`Aj}Al}{cc{}}{AK`Nd}`?`{NdAK`}````{AK`{{AKb{n}}}}{AK`{{AKb{AK`}}}}::9````````````````````````888888`{ce{}{}}00000``{AJlFn}{{AJlD`{J`{Gd}}}n}0```{AJln}{{AKdAj}Al}0{{AKfAj}Al}{{AJlAj}Al};;;666```{{}AKf}{{NdNd}AJl}`{AJl{{Cd{Gd}}}}{{AJlGd}{{j{nAKd}}}}```{{AKfc}jAAf}`{cEd{}}{AJl{{j{nAKd}}}}0{{AJlEj}{{j{nAKd}}}}{c{{j{e}}}{}{}}00000{cEf{}}00```````````````{cb{}}000000000{ce{}{}}000000000{AKhn}`{{{AKj{AK`AKhc}}}AKl{FbAKnAL`Lf}}{{{AKj{AK`AKhc}}D`{J`{Gd}}}n{FbAKnAL`Lf}}0{{{AKj{AK`AKhc}}}{{AKb{D`}}}{FbAKnAL`Lf}}`{ALb{{AKb{n}}}}`{{ALdAj}Al}{{ALfAj}Al}0{{AKhAj}Al}{{ALbAj}Al}{{{AKj{ceg}}Aj}Al{LfALh}{LfALj}{LfFbAKnAL`}}{cc{}}0000{{{AKj{AK`AKhc}}Cj}n{FbAKnAL`Lf}};0``<<<<<{AKlAh}``{{}ALd}={{{AKj{AK`AKhc}}DbCj}n{FbAKnAL`Lf}}{{ALl{J`{Gd}}}{{j{nALf}}}}`{{{AKj{AK`AKhc}}}{{AKb{Fn}}}{FbAKnAL`Lf}}``?{{ALdc}jAAf}{cEd{}}{c{{j{e}}}{}{}}000000000{AKhn}{cEf{}}0000{{ALb{J`{Gd}}}{{AKb{Fn}}}}``````{cb{}}0{ce{}{}}0{{AGhD`{J`{Gd}}}n}0{{AGhAj}Al}{cc{}}3{LhAGh}`997```````````{ALnb}606``55``{{AM`Aj}Al}03`6``````<;;9```````````````````````````````````````````````````````77776666``{{hAj}Al}0{{AMbAj}Al}05588``{hn}??>>>><<````````{KlD`}`{{KlCh}{{j{nAM`}}}}`````<<<<<<<<<<1``;;;;;;;;;;{AMdAMd}{AMfAMf}{ff}{CnCn}{{ce}n{}{}}000{Klf}`{{}AMd}{{}AMf}{{}f}{{}Cn}{KlAh}``{KlEh}`{{AMdAMd}Ah}{{ff}Ah}{{CnCn}Ah}{{KlAj}Al}{{AMdAj}Al}{{AMfAj}Al}{{fAj}Al}{{CnAj}Al}`{cc{}}0000``{KlBn}{{KlCj}n}{KlNd}{Kl{{Eb{AMh}}}}{ce{}{}}0000`?{Kl{{Cd{Cn}}}}``{Eh{{j{Ehh}}}}`{{EhAhEjAh}{{j{Klh}}}}{KlEh}`{EhEh}`{{KlDbCj}n}9{Kl{{j{nh}}}}000000{Kln}{Kl{{J`{Nd}}}}`{Kl{{J`{AMj}}}}`0{{KlD`{J`{Gd}}}n}>>{{ce}{{j{Klg}}}{}{}{}}`{Klc{}}{{fc}jAAf}{{Cnc}jAAf}{{KlD`}n}{{Kl{Cd{Ej}}}n}:=`{KlAh}{KlEj}````````{ce{}{}}000`={c{{j{e}}}{}{}}000000000{cEf{}}0000{{KlEh}{{j{nh}}}}{{KlEj}{{j{nh}}}}{Kln}{{CnAMf}{{j{nh}}}}`?```{cb{}}077``{cjAAf}{{AMlAj}Al}{cc{}}`:{{}AMl}{{AMlc}jAAf}``;;:`````55555555`<<<<<<<<{AMnAMn}{AN`AN`}{ANbANb}{{ce}n{}{}}00`{AN`Cn}{{cEnEj}{{F`{AMn}}}Fb}{{cEnEj}{{F`{AN`}}}Fb}{{cEnEj}{{F`{ANb}}}Fb}`{{AMnAj}Al}{{AN`Aj}Al}{{ANbAj}Al}{{ANdAj}Al}`>>>>{CnAN`}``{ce{}{}}000`````{{AMncEnEj}{{F`{n}}}Fh}{{AN`cEnEj}{{F`{n}}}Fh}{{ANbcEnEj}{{F`{n}}}Fh}````333`{c{{j{e}}}{}{}}0000000{cEf{}}000{{}Ej}00`{{{J`{Eh}}}{{Ab{{Gb{EhEh}}}}}}{{Ch{Gb{G`D`}}Ah}{{j{nAMb}}}}```{cb{}}099{ANfANf}{{ce}n{}{}}{{}ANf}{{cEnEj}{{F`{ANf}}}Fb}{c{{j{ANf}}}Al}{{ANfANf}Ah}{{ANfAj}Al}{cc{}}{ce{}{}}{{ANfcEnEj}{{F`{n}}}Fh}{{ANfc}jAAf}2{c{{j{e}}}{}{}}0{cEf{}}{{}Ej}````````{{MbEhEh}n}{MbD`}{{MbCh}{{j{nAM`}}}}{cb{}}000002{{MbEh}Eh}::::::{MbEh}{{MbAj}Al}{{ANhAj}Al}{{ANjAj}Al}{{ANlAj}Al}{cc{}}00{{MbD`}Ah}{MbNd}{Mb{{Eb{AMh}}}}{ce{}{}}00``{MbAh}{ANhAh}{ANh{{Cd{Ch}}}}{{}{{AKb{ANl}}}}{Mb{{J`{Nd}}}}{Mb{{J`{AMj}}}}0{{MbD`{J`{Gd}}}n}{Mb{{Cd{{Gb{Nd{Ab{Nd}}}}}}}}{{MbD`}n}{{ANlANj}{{j{nBb}}}}{c{{j{e}}}{}{}}00000{cEf{}}005``````````````````````````````````````````````````````````````````{cb{}}0=={ANnANn}{{ce}n{}{}}``{{}ANn}{{ANnANn}Ah}`{{ANnAj}Al}{cc{}}```{ce{}{}}`0998``````````````````777{AO`AOb}888111111``{{AOdAj}Al}0{{AO`Aj}Al}{{AOfAj}Al}5{AOhAOd}66{AOj{{j{AO`AOd}}}}{AOj{{j{AOfAOd}}}}777{AO`Fn}0{AOfFn}``{{AO`{J`{Gd}}Fn}{{j{nAOl}}}}{{AO`cFnFn}{{j{FnAOl}}}AOn}{AOd{{Cd{Dl}}}}{cEd{}}{c{{j{e}}}{}{}}00000{cEf{}}00``{{AOf{J`{Gd}}Fn}{{j{nAOl}}}}{{AOfcFnFn}{{j{FnAOl}}}Oh}```````{AGjAh}{cb{}}0{ce{}{}}0{{AGjD`{J`{Gd}}}n}0{{AGjEhEh}Ah}`{AGj{{Eb{{Cb{Mb}}}}}}```{{AGjAj}Al}{cc{}}`5`{AGj{{B`{Mb}}}}`{{Ch{Eb{{Cb{Mb}}}}Ah}AGj}`{AGjn}{{ce}{{j{AGjg}}}{}{}{}}{AGjc{}}{{AGjEh}n}{c{{j{e}}}{}{}}0{cEf{}}{{AGjc}n{{AGl{AMj}}}}{{AGjce}cLf{{AGl{AMj}{{AGb{c}}}}}}{{AGjc}Ah{{AGl{AMj}}}}````````````````````````{cb{}}000{ce{}{}}000``{{BbAj}Al}{{BdAj}Al}0??``22````{cEd{}}999988``````````{LlD`}`{{LlCh}{{j{nAM`}}}}`6666661`555555{BfBf}{{ce}n{}{}}`{{LlBh{Eb{{Cb{Bj}}}}}n}{{}Bf}`{LlEh}{Lln}{Ll{{j{nBl}}}}{{BlAj}Al}0{{BfAj}Al}{{LlAj}Al}{{{J`{Gd}}}{{j{{J`{Gd}}Bd}}}}0{{}Fn}{cc{}}00{Ll{{Cd{Bn}}}}``{Ll{{j{nAJd}}}}{LlEd}`0{{LlCj}n}{{{J`{Gd}}}n}{LlNd}{Ll{{Eb{AMh}}}}{ce{}{}}00`{LlAh}`{Ll{{Cd{BA`}}}}`{{EdBn{Cd{Bn}}BAbBAb}{{j{LlBd}}}}{{EdBAd{Cd{Bn}}BAbBAb}{{j{LlBd}}}}{{LlElElElEl}n}{{LlDbCj}n}:<{Lln}00=000{Ll{{J`{Nd}}}}`{Ll{{J`{AMj}}}}`08{{BAbD`}Ah}{{BAbD`}n}{{LlD`{J`{Gd}}}n}{Ll{{j{FnBd}}}}{Ll{{AKb{Fn}}}}{{LlCj}n}0{{ce}{{j{Llg}}}{}{}{}}{Ll{{j{nAJd}}}}```{LlBAb}`{Llc{}}{{LlD`}n}{{LlBb}{{j{nAJd}}}}`{ce{}{}}{cEd{}}{c{{j{e}}}{}{}}00000`6`{cEf{}}00{{}Fn}>{LlAh}{{BAdAO`}{{AKb{Fn}}}}{{Ch{J`{Gd}}AOjAJf}{{j{nBl}}}}{{{Cd{BA`}}BAb{J`{Gd}}AO`BAd{Cd{Bn}}AJf}{{j{AhBd}}}}``````````````````````````````````````````````````````````````````````````````````````````````````````````````````````{cb{}}0009999{BAfBAf}{BAhBAh}{{ce}n{}{}}0`{{}BAf}{{}BAh}{{BAfBAf}Ah}{{BAhBAh}Ah}`{{BAfAj}Al}{{BAhAj}Al}{cc{}}0{ce{}{}}0``````00{c{{j{e}}}{}{}}000{cEf{}}0````````````````````````````````````================================`22222222222222222222222222222222``````{BAjBAj}{BAlBAl}{BAnBAn}{BB`BB`}{BBbBBb}{BBdBBd}{BBfBBf}{BBhBBh}{BBjBBj}{BBlBBl}{BBnBBn}{BC`BC`}{BCbBCb}{BCdBCd}{BCfBCf}{BChBCh}{{ce}n{}{}}000000000000000`{{}BAj}{{}BAl}{{}BAn}{{}BB`}{{}BBb}{{}BBd}{{}BBf}{{}BBh}{{}BBj}{{}BBl}{{}BBn}{{}BC`}{{}BCb}{{}BCd}{{}BCf}{{}BCh}````{{BAjBAj}Ah}{{BAlBAl}Ah}{{BAnBAn}Ah}{{BB`BB`}Ah}{{BBbBBb}Ah}{{BBdBBd}Ah}{{BBfBBf}Ah}{{BBhBBh}Ah}{{BBjBBj}Ah}{{BAjAj}Al}{{BAlAj}Al}{{BAnAj}Al}{{BB`Aj}Al}{{BBbAj}Al}{{BBdAj}Al}{{BBfAj}Al}{{BBhAj}Al}{{BBjAj}Al}``````{cc{}}000000000000000``````````````````````````````{ce{}{}}000000000000000```````````````````````````````````````````````0000000000000000{c{{j{e}}}{}{}}0000000000000000000000000000000`{cEf{}}000000000000000```````````````````````````````````````````````````````````````````````````````````````{{AJfAJf}n}{Ed{{Eb{AJf}}}}{cb{}}0005555`{{}AJf}`{cjAAf}{{BCjAj}Al}{{AJfAj}Al}::99`````````````{{AJfc}jAAf}``9999``````````88`````````55555555::::::::{BClBCl}{BCnBCn}{{ce}n{}{}}0`{{BClEj}{{F`{n}}}}{Ej{{AB`{Gd}}}}{{}BCl}{{cEnEj}{{F`{BCl}}}Fb}{{cEnEj}{{F`{BCn}}}Fb}{{BClAj}Al}{{BCnAj}Al}{{BD`Aj}Al}{{AIfAj}Al}0{cc{}}000{BDbAIf}{BdAIf}{BbAIf}```{ce{}{}}000````{{BClcEnEj}{{F`{n}}}Fh}{{BCncEnEj}{{F`{n}}}Fh}{AIf{{Cd{Dl}}}}`33{cEd{}}{c{{j{e}}}{}{}}0000000`{cEf{}}000{{}Ej}0````````{{}BDd}00````{cb{}}00000{BAdAKl}{cBDf{}}0;;;;;;{Bn{{j{{AB`{Gd}}BDh}}}}{BDjBDj}{{ce}n{}{}}{{BDjcD`}{{AKb{BC`}}}{AKnLf}}{{BDjBDl}BDj}{BAd{{j{nBb}}}}{{BDhAj}Al}0{{BAdAj}Al}{{BDjAj}Al}{cc{}}00{{BDj{AB`{Gd}}}BDj}`{BAdBn}{ce{}{}}00{{}BDj}{Bn{{j{BAdBDh}}}}{{BAd{J`{Gd}}}{{j{FnBb}}}}{{BAdBDn}{{j{nBDh}}}}{{BAdBE`}{{j{nBDh}}}}`5{cEd{}}{c{{j{e}}}{}{}}00000{cEf{}}005{{BAdAO`}{{j{FnBb}}}}``````````{cb{}}000000000``::::::::::{{BEbChEhFnEj}{{j{{Ab{AMj}}BDb}}}}{BEdBEd}{BEbBEb}{BEfBEf}{{ce}n{}{}}00`{{BEbEj}{{F`{n}}}}{{}BEb}`{{cEnEj}{{F`{BEd}}}Fb}{{cEnEj}{{F`{BEb}}}Fb}{{cEnEj}{{F`{BEf}}}Fb}```{{BEdBEd}Ah}{{BEbBEb}Ah}{{BEfBEf}Ah}`{{BDbAj}Al}0{{BEdAj}Al}{{BEbAj}Al}{{BEfAj}Al}{{BEhAj}Al}{cc{}}0000{MbBEb}``{ce{}{}}0000`````````{{BEdcEnEj}{{F`{n}}}Fh}{{BEbcEnEj}{{F`{n}}}Fh}{{BEfcEnEj}{{F`{n}}}Fh}`333{cEd{}}{c{{j{e}}}{}{}}000000000{cEf{}}0000`{{}Ej}00```````````{AMjEj}{{AMjcEjEh}{{j{nBEj}}}BEl}``{cb{}}000000000{{AMjc}{{BEn{Ej}}}BEl}`;;;;;;;;;;{{cG`EjEj}{{Cd{{AOj{c}}}}}BEl}{BF`BF`}{AMjAMj}{{ce}n{}{}}0{{}BF`}``{{AMjc}{{Cd{{AOj{c}}}}}BEl}{AMjn}{{AMjAMj}Ah}``{{BEjAj}Al}0{{{AOj{c}}Aj}Al{LfBEl}}{{BFbAj}Al}{{AMjAj}Al}{AOhBEj}{cc{}}0000{AMjEj}{{{AOj{c}}}AhBEl}`{ce{}{}}0000{AOjc{}}1{{AMjc}AhBEl}0303{{AMjc}EjBEl}````{EjAMj}{BFb{{Cd{c}}}{}}```{{{AOj{c}}}{{Cd{{AOj{c}}}}}BEl}``{{AMjc}{{Cd{{AOj{c}}}}}BEl}05``{{ce}{{j{AMjg}}}{}{}{}}{AMjc{}}{{AMjEjc}nBEl}`{BEj{{Cd{Dl}}}};;{cEd{}}:{c{{j{e}}}{}{}}000000000`{cEf{}}0000{AMjn}{{AMjc}{{BEn{Ej}}}BEl}`````````````````{LjD`}`{{LjCh}{{j{nAM`}}}}{LjNd}`{cb{}}0003`{ce{}{}}000`{LjEh}{{BFdAj}Al}0{{LjAj}Al}{cc{}}{AOhBFd}{BFfBFd}{BbBFd}3{{LjAOf}{{j{EhBFd}}}}{LjBn}{{LjCj}n}<{Lj{{Eb{AMh}}}};;`{LjAh}{BAb{{j{LjBFd}}}}{{{Ab{AMj}}BAb}{{j{LjBFd}}}}{{LjDbCj}n}5{Ljn}000{Lj{{J`{Nd}}}}`{Lj{{J`{AMj}}}}`0{{BAbD`}n}{{BAbD`}Ah}{LjBAb}`{{LjD`{J`{Gd}}}n}<<{{ce}{{j{Ljg}}}{}{}{}}{Ljc{}}{{LjD`}n}0{{LjCh}n}1{{LjEh}n}{Lj{{j{nAJd}}}}{BFd{{Cd{Dl}}}}{cEd{}}{c{{j{e}}}{}{}}000{cEf{}}0:```{cb{}}0{ce{}{}}0````{cjAAf}{{BFhAj}Al}{cc{}}`3{{}BFh}`{{BFhc}jAAf}887```````666666555555{BFjBFj}{{ce}n{}{}}{{cEnEj}{{F`{BFj}}}Fb}{{BFjAj}Al}{{BFlAj}Al}{{AIjAj}Al}088{BFdAIj}{BbAIj}{BDbAIj};>>>{ChBFl}`{{BFjcEnEj}{{F`{n}}}Fh}{AIj{{Cd{Dl}}}}{ce{}{}}{cEd{}}{c{{j{e}}}{}{}}00000{cEf{}}00{{}Ej}```````````````````````{cb{}}0005555{{{BFn{c}}}{{BFn{c}}}{AhBG`}}{{ce}n{}{}}{{BGbAj}Al}0{{{BFn{c}}Aj}AlBG`}{BbBGb}{cc{}}0{{BGdD`}BG`}{{BG`EhEhBGf{J`{Gd}}}{{j{{Gb{BGhBGj}}BGl}}}}{BG`{{j{D`BGl}}}}{BG`{{j{BGnBGl}}}}??{{{BFn{c}}D`BGn}{{j{{Gb{D`D`}}BGb}}}BG`}{{BnD`}{{j{{BFn{c}}BGb}}}BG`}{{BG`EhBGf{J`{Gd}}}{{j{nBGl}}}}{{BG`D`}{{j{nBGl}}}}{{{BFn{c}}D`}{{j{nBGb}}}BG`}{{BG`BH`}n}{{BG`{J`{BHb}}}{{j{nBGl}}}}{BG`{{j{nBGl}}}}{{BG`BGn}{{j{nBGl}}}}{{{BFn{c}}D`D`}{{j{nBGb}}}BG`}{{BG`FnBHd}{{j{nBGl}}}}{{BG`FnEj}{{j{nBGl}}}}{{BG`FnNd}{{j{nBGl}}}}{{BG`FnAh}{{j{nBGl}}}}12{{{BFn{c}}Ch{J`{{Gb{FnAMjNd}}}}ANl}{{j{nBGb}}}BG`}``{BGb{{Cd{Dl}}}}{ce{}{}}{cEd{}}{c{{j{e}}}{}{}}000{cEf{}}0{{{BFn{c}}Ch}{{j{nBGb}}}BG`}````````````{cb{}}055``{{AIlAj}Al}0{cc{}}7`6554`````{{{BHf{c}}}D`{BG`AL`}}``{{{BHf{c}}Ch}{{j{nAM`}}}{BG`AL`}}``44441``9999```{{{BHf{c}}}BHhBG`}``{{{BHf{c}}}{{j{nAIl}}}BG`}``{{{BHf{c}}}Eh{BG`AL`}}`{{BHhBHh}Ah}{{{BHf{c}}Aj}AlBG`}{{BHhAj}Al}88``{{BHjCj}n}{{{BHf{c}}}Nd{BG`AL`}}{{{BHf{c}}}{{Eb{AMh}}}{BG`AL`}}{ce{}{}}0``{{{BHf{c}}}Ah{BG`AL`}}```{BHh{{j{{BHf{c}}AIl}}}BG`}```{{{BHf{c}}}nBG`}{{BHjDbCj}n}7{{{BHf{BHl}}Cj}n}{{{BHf{c}}}{{J`{Nd}}}{BG`AL`}}``{{{BHf{c}}}{{J`{AMj}}}{BG`AL`}}``0{{{BHf{c}}D`{J`{Gd}}}n{BG`AL`}}``;3{{ce}{{j{BHjg}}}{}{}{}}``{BHjc{}}{{{BHf{c}}D`}n{BG`AL`}}`{c{{j{e}}}{}{}}{BHn{{j{BHhc}}}{}}111{cEf{}}0````6``{cb{}}000????`{BI`BI`}{{ce}n{}{}}`{{cEnEj}{{F`{BI`}}}Fb}{{BI`Aj}Al}{{BIbAj}Al}{cc{}}0`{ce{}{}}0```{{BI`cEnEj}{{F`{n}}}Fh}`1;;;;99{{}Ej}```````{Ed{{Eb{BId}}}}::::3333``{{}BId}{cjAAf}{{BIdAj}Al}77`66`{{BIdc}jAAf}{c{{j{e}}}{}{}}000{cEf{}}0`````````````````````````{cb{}}0::``{{AIhAj}Al}0<;````{cEd{}}443``````{BIfD`}`{{BIfCh}{{j{nAM`}}}}`{{AMjEjEhChANlBIh}n}555555552`????????{BIj{{j{EdAIh}}}}{BIj{{AB`{Gd}}}}``{BIlBIl}{{ce}n{}{}}{BIfBIn}`{{}BIl}{c{{j{BIl}}}Al}{c{{j{BIn}}}Al}`{BIfEh}`{{BIfAh}n}`{BIfn}{{BIlBIl}Ah}{{BInBIn}Ah}`{BIfBIl}``{{BnBIj}{{j{D`AIh}}}}{{BIlAj}Al}{{BJ`Aj}Al}{{BInAj}Al}{{BIfAj}Al}{cc{}}{BJbBIl}111``{{BIfCj}n}{BIfNd}{BIf{{Eb{AMh}}}}{ce{}{}}000`{BIfAh}```{BIl{{j{AhBJd}}}}`{{EdAhBIl}{{j{BJ`AIh}}}}{BIn{{j{BIfAIh}}}}`{{BnAh}{{j{BIjAIh}}}}```{BIfn}{{BIfDbCj}n}:11{{BIfFn}n}222{BIf{{J`{Nd}}}}`{BIf{{J`{AMj}}}}`0``{{BIfD`{J`{Gd}}}n}`>>{{ce}{{j{BIfg}}}{}{}{}}`{BIfc{}}{{BIlc}jAAf}{{BInc}jAAf}{{BIfD`}n}{ce{}{}}{c{{j{e}}}{}{}}0{BHn{{j{BInc}}}{}}111111{cEf{}}000`{{BJ`EdAh}{{j{nAIh}}}}{{BIfEd}{{j{nAIh}}}}{{BIfElEl}n}{BJ`{{Ab{Gd}}}}=``````````````````{cb{}}000000000`8888888888`{{{BJf{c}}Ah}{{j{nBJh}}}Lf}0{{{BJj{c}}{BJj{c}}}AhAn}{{{BJl{c}}{BJl{c}}}AhAn}{{{BJn{ce}}{BJn{ce}}}AhAnAn}`{{{BJf{c}}c}{{j{{BJl{c}}{BJn{cBJh}}}}}Lf}{{{BJj{c}}Aj}AlLf}{{{BJl{c}}Aj}AlLf}{{BJhAj}Al}0{{{BJn{ce}}Aj}AlLfLf}{{{BJf{c}}Aj}AlLf}{cc{}}0000{{BIjBIl}{{j{{BJf{c}}BJh}}}Lf}{ce{}{}}0000{BJhAh}{{{BJf{c}}D`ChG`Ehc}{{j{{BJl{c}}{BJn{cBJh}}}}}Lf}`{cEd{}}{c{{j{e}}}{}{}}000000000{cEf{}}0000{{{BJf{c}}BIj}{{j{nBJh}}}Lf}``4```````````{cb{}}00000777777{{{BK`{c}}}NdLf}`{{{BK`{c}}}{{j{{Cd{{BKd{{BKb{c}}}}}}BKf}}}Lf}{{{BK`{c}}Ah}{{j{nBKf}}}Lf}0`{{BKfAj}Al}0{{{BK`{c}}Aj}AlLf}{{{BKb{c}}Aj}AlLf}???{BIj{{j{{BK`{c}}BKf}}}Lf}>>>{{{BK`{c}}}{{j{nBKf}}}Lf}{{{BKb{c}}ChEh}cLf}{c{{BKb{c}}}Lf}{{BIjAKl}{{j{BKhBKj}}}}{{G`c}{{BKb{c}}}Lf}`{{{BK`{c}}Ch}{{j{{Cd{{BKd{c}}}}BKf}}}Lf}{{{BK`{c}}c}{{j{n{BJn{cBKf}}}}}Lf}{{{BK`{c}}D`ChG`Ehc}{{j{n{BJn{cBKf}}}}}Lf}0`{cEd{}}{c{{j{e}}}{}{}}00000{cEf{}}00{{{BK`{c}}BIj}{{j{nBKf}}}Lf}````````{cb{}}000{ce{}{}}000`{BKl{{j{nBKn}}}}{{BKnAj}Al}0{{BKlAj}Al}{cc{}}0{BIjBKl}55{{BKlD`ChG`Eh}{{j{EhBKn}}}};::::99{{BKlBIj}n}1````{{BIhBIh}n}{Ed{{Eb{BIh}}}}::::9999`{{}BIh}```{cjAAf}{{BL`Aj}Al}{{BIhAj}Al}99==`````````{{BIhc}jAAf}{c{{j{e}}}{}{}}000{cEf{}}0`````````{cb{}}00000{ce{}{}}00000`{BJbBJb}{BLbBLb}{{ce}n{}{}}0{{}BJb}{EjANf}{{cEnEj}{{F`{BJb}}}Fb}{{cEnEj}{{F`{BLb}}}Fb}`{{BJbBJb}Ah}`{{BJbAj}Al}{{BLbAj}Al}{{BLdAj}Al}{cc{}}{BIlBJb}11`===````{{BJbcEnEj}{{F`{n}}}Fh}{{BLbcEnEj}{{F`{n}}}Fh}??{c{{j{e}}}{}{}}00000{cEf{}}00{{}Ej}0````````````````````````````````{cb{}}000000000000000{ce{}{}}000000000000000{BLfBLf}{BLhBLh}{{ce}n{}{}}0```{{}BLh}``{{BLfBLf}Ah}{{BLjBLj}Ah}{{BLlCh{j{EhBLn}}BIh}BM`}{{BLnAj}Al}{{BLfAj}Al}{{BMbAj}Al}{{BM`Aj}Al}{{BMdAj}Al}{{BLlAj}Al}{{BLhAj}Al}{{BLjAj}Al}{cc{}}{AOhBLn}{{{Gb{EhEh}}}BLn}{BJhBLn}3{EhBLf}444444{{EhEhAh}BMd}{ce{}{}}0000000{{EhD`}BLh}`{BLjD`}{{AOjChD`}{{j{BLjAIh}}}}{{BLjBJ`EjChBIh}BMb}{{BLjBAb}Ah}{{ChG`}{{j{BLhAIh}}}}`````66{{BLjEj}BLl}{c{{j{e}}}{}{}}000000000000000``{cEf{}}0000000{{BLlBMdChBIh}BM`}```````````````````````````````````````{cb{}}0``;;`````````{{AIdAj}Al}0{cc{}}{AOdAId}{BMfBMh}{BMjAh}``{ce{}{}}``````{{BMfBMh}n}````{{BMjBMl}{{j{nAId}}}}`0{cEd{}}<<;``````````````````````9999999933333333{BMnBMn}{BN`BN`}{{ce}n{}{}}0`{{BNbBN`}Ah}``{{BMnBMn}Ah}{{BN`BN`}Ah}{{BNdAj}Al}0{{BMnAj}Al}{{BN`Aj}Al}{{BNbAj}Al}{cc{}}00{BN`BNb}1{{BNbBN`}n}{ce{}{}}000{BN`Ej}{BNbAh}<22{cEd{}}{c{{j{e}}}{}{}}0000000`{cEf{}}000``{cb{}}0{{{BNf{c}}}AKl{BNhLf}}{cBDf{}}088{{{BNf{c}}}{{Cd{BNj}}}{BNhLf}}`{{{BNf{c}}Aj}Al{LfBNh}}=`{{{BNf{c}}}BMh{BNhLf}}{{{BNf{c}}}Ah{BNhLf}}0{{{BNf{c}}BMl}BMl{BNhLf}}={{{BNf{c}}}n{BNhLf}}```2{{cD`D`EhEh}{{BNf{c}}}{BNhLf}}{{cD`D`EhEhEh}{{BNf{c}}}{BNhLf}}{{{BNf{c}}BMh}n{BNhLf}}{{{BNf{c}}}Fn{BNhLf}}```6``{{{BNf{c}}BMl}{{j{nAId}}}{BNhLf}}`0{{{BNf{c}}{J`{Gd}}}{{j{FnBNd}}}{BNhLf}}1{{{BNf{c}}}BMn{BNhLf}}``{c{{j{e}}}{}{}}0`{cEf{}};``````{cb{}}0{ce{}{}}0`{{BNlc}{{j{FnBNd}}}{FhLf}}{{BNlAj}Al}{cc{}}`3{BNlAh}{BNlFn}{{}BNl}{{BNl{BNn{c}}}{{j{nBNd}}}BO`}`::9{{BNl{BNn{c}}}{{j{FnAOl}}}BO`}`````````````````````````{{{M`{c}}}D`{BObLf}}`{{{M`{c}}Ch}{{j{nAM`}}}{BObLf}}`;;1`{{{M`{c}}}c{BObLf}}`;;2``{{{M`{c}}}Eh{BObLf}}{{{M`{c}}Aj}AlLf}:{{{M`{c}}Cj}n{LfBOb}}{{{M`{c}}BMh}Ah{LfBOb}}00{{{M`{c}}}Bn{BObLf}}2{{{M`{c}}}Nd{BObLf}}{{{M`{c}}}{{Eb{AMh}}}{BObLf}}{ce{}{}}`{{{M`{c}}}Ah{BObLf}}{{D`c}{{j{{M`{c}}AId}}}{BObLf}}6{{{M`{c}}DbCj}n{LfBOb}}22{{{M`{c}}}{{J`{Nd}}}{BObLf}}`{{{M`{c}}}{{J`{AMj}}}{BObLf}}`0{{{M`{c}}D`{J`{Gd}}}n{BObLf}};;{{ce}{{j{{M`{g}}i}}}{}{}{BObLf}{}}{{{M`{c}}}e{BObLf}{}}{{{M`{c}}}{{j{nAJd}}}{BObLf}}{{{M`{c}}D`}n{BObLf}}1{c{{j{e}}}{}{}}0{cEf{}}{{D`c{Ab{AMj}}}{{j{{M`{c}}AId}}}{BObLf}}7```{cb{}}0>>``````{cjAAf}{{BOdAj}Al}{cc{}}{ce{}{}}``{{}BOd}`````{{BOdc}jAAf}99``````8``````666666222222{BMlEh}`{BMlFn}`{BOfBOf}{{ce}n{}{}}{BMl{{j{nAId}}}}{{}BOf}{BMlD`}`6`6`{{BOfAj}Al}{{BOhAj}Al}{{BMlAj}Al}==={AOj{{j{BMlAId}}}}0:`{BMlBOf}`>>>;`{BMlEj}`{{BMlcFnFn}{{j{FnAId}}}{OhLf}}{{BMlEh}BMl}{{BMlD`}BMl}11111{{BMlEj}BMl}120:`{BMlEh}`{ce{}{}}{c{{j{e}}}{}{}}000007`{cEf{}}00{{BMlcFnFn}{{j{FnAId}}}{AOnLf}}```````{cb{}}00000000000``444444444444``{BOjBOj}{BOlBOl}{BOnBOn}{C`C`}{{ce}n{}{}}000{{cEnEj}{{F`{BOj}}}Fb}{{cEnEj}{{F`{BOl}}}Fb}{{cEnEj}{{F`{BOn}}}Fb}{{cEnEj}{{F`{C`}}}Fb}{{BOjAj}Al}{{BOlAj}Al}{{BOnAj}Al}{{C`Aj}Al}{{{Cb{c}}Aj}AlLf}{{CdAj}Al}{cc{}}00000`{ce{}{}}00000``{{BOjcEnEj}{{F`{n}}}Fh}{{BOlcEnEj}{{F`{n}}}Fh}{{BOncEnEj}{{F`{n}}}Fh}{{C`cEnEj}{{F`{n}}}Fh}4444{c{{j{e}}}{}{}}00000000000{cEf{}}00000{{}Ej}000`````````````{cb{}}088``{{AInAj}Al}0:`9``````````````{cEd{}}55`4````````````{{LnCf{BNf{BGd}}}{{j{nAIn}}}}{{LnAKlCh}{{j{nAIn}}}}{LnEh}{{LnCfc}n{{AGl{{BNf{BGd}}}}}}66666666{LnAKl}{cBDf{}}0{ce{}{}}0000000`{CfCf}{CjCj}{{ce}n{}{}}0`{{LnEhEh}n}`{{CfCf}Ah}{{CfAj}Al}{{CjAj}Al}{{ChAj}Al}{{LnAj}Al}{{LnEh}n}{cc{}}000{LnBMh}{{LnAKlBMh}n}{{LnBMl}n}{LnAh}{{Cfc}nFf}`{LnBn}`{ce{}{}}000{{LnCf}n}`````{{D`Ed}{{j{LnAIn}}}}{{LnBMh}n}`{BGd{{j{EhAIn}}}}{{LnBMl}{{j{nAId}}}}4{{LnAKl}{{Cd{Ch}}}}{{ce}{{j{Lng}}}{}{}{}}`{Lnc{}}3{Lnn}99{c{{j{e}}}{}{}}0000000{cEf{}}000```````{cb{}}000<<<<{ClCl}{{ce}n{}{}}{{ClAj}Al}{{CnAj}Al}{cc{}}0{{{AGf{Cf{BNf{BGd}}}}}Cn}{ce{}{}}0{CnAh}00``{{}Cn}{Cn{{Cd{Cf}}}}{{CnCfBNj}n}``4====<<``;;44{{CA`Aj}Al}7{{{AGf{Cf{BNf{BGd}}}}}CA`}6{CA`Ah}00{CA`Fn}{{}CA`}{CA`{{Cd{Cj}}}}0{{CA`Cj}Ah}``{c{{j{e}}}{}{}}0{cEf{}}````````````{CAbFn}`{{CAbFn{J`{Gd}}}n}``````{cb{}}000{ce{}{}}000`{CAdCAd}{{ce}n{}{}}{{cBhBhCAd}Ej{CAfLf}}{{CAdCAd}Ah}`{{{CAj{{CAh{c}}}}EjEj{Cd{{Gb{BhBh}}}}}{{CAh{c}}}{CAlLf}}{{{CAj{{CAn{c}}}}EjEj{Cd{{Gb{BhBh}}}}}{{CAn{c}}}{CAlLf}}{{{CAj{c}}Aj}AlLf}{{CAdAj}Al}{cc{}}0{{{CAj{c}}}cLf}`0::`{c{{CAj{c}}}Lf}`;{c{{j{e}}}{}{}}000{cEf{}}0`{{{CAj{{CB`{c}}}}GdEjAh}{{CB`{c}}}{CAlLf}}0{{{CAj{{CB`{c}}}}EjAh}{{CB`{c}}}{CAlLf}}{{{CAj{{CBb{c}}}}Fn}{{CBb{c}}}{CAfLf}}```````````````````````{cb{}}000{ce{}{}}000`{{CBdCBd}Ah}{{CBdAj}Al}0{{{CBf{c}}Aj}AlLf}<<{c{{CBf{c}}}{CAfLf}}{{{CBf{c}}}Gd{CAfLf}}{{{CBf{c}}}Ej{CAfLf}}66{{{CBf{c}}}Fn{CAfLf}}121{c{{j{{CBf{c}}CBd}}}{CAfLf}}{{{CBf{c}}Gd}n{CAlLf}}{{{CBf{c}}Ej}n{CAlLf}}010{{{CBf{c}}Bn}n{CAlLf}}{{{CBf{c}}Bh}n{CAlLf}}10{{{CBf{c}}}Bn{CAfLf}}{{{CBf{c}}}Bh{CAfLf}}{{{J`{Gd}}Bh}Ah}2{cEd{}}2{c{{j{e}}}{}{}}000{cEf{}}0{{cEjEjGdGdEjBnBhBnBh}{{j{{CBf{c}}CBd}}}{CAlLf}}{{cBnBhBnBh}{{j{{CBf{c}}CBd}}}{CAlLf}}0```{cb{}}0{ce{}{}}0`{{{CBh{c}}}{{J`{Gd}}}{{CBl{}{{CBj{{J`{Gd}}}}}}Lf}}{{{CBh{c}}}{{J`{Gd}}}{{CBn{}{{CBj{{J`{Gd}}}}}}Lf}}{{{CBh{c}}Aj}AlLf}{cc{}}{{CAlFnEh}n}{{CAlFnEj}n}6{c{{CBh{c}}}Lf}{{CAfFn}Eh}{{CAfFn}Ej}`{{CAfFn}n}{{{CBh{c}}Fn}n{CAfLf}}{c{{j{e}}}{}{}}0{cEf{}}``````````>>>>====`{{{CBb{c}}}Bn{CAfLf}}{{CC`CC`}Ah}{{{CBb{c}}}Ej{CAfLf}}{{CC`Aj}Al}0{{{CBb{c}}Aj}AlLf}>>{c{{j{{CBb{c}}CC`}}}{CAfLf}}{c{{CBb{c}}}{CAfLf}}{ce{}{}}0{{{CBb{c}}}Fn{CAfLf}}{{cBnBnEj}{{j{{CBb{c}}CC`}}}{CAlLf}}{{{CBb{c}}}{{J`{Gd}}}{CAfLf}}{{{CBb{c}}}{{J`{Gd}}}{CAlLf}}3{{{CBb{c}}Bn}{{CBb{c}}}{CAlLf}}{{{CBb{c}}Ej}{{CBb{c}}}{CAlLf}}1={cEd{}}{c{{j{e}}}{}{}}000{cEf{}}0{{cBnBnEj}{{j{{CAj{{CBb{c}}}}CC`}}}{CAlLf}}````````````````````````{cb{}}000;;;;`{{{CB`{c}}}Ej{CAfLf}}{{{CB`{c}}Fn}Ej{CAfLf}}{{{CB`{c}}}Bh{CAfLf}}{{{CB`{c}}}{{Gb{GdGd}}}{CAfLf}}{{CCbCCb}Ah}{{{CB`{c}}}{{Gb{GdEj}}}{CAfLf}}{{CCbAj}Al}0{{{CB`{c}}Aj}AlLf}{cc{}}0{{cAh}{{j{{CB`{c}}CCb}}}{CAfLf}}{c{{CB`{c}}}{CAfLf}}:{{{CB`{c}}}Gd{CAfLf}};{ce{}{}}0{{{CB`{c}}}Fn{CAfLf}}{{{CB`{c}}}{{J`{Gd}}}{CAfLf}}{{{CB`{c}}}{{J`{Gd}}}{CAlLf}}{{{CB`{c}}Fn}{{J`{Gd}}}{CAlLf}}{{{CB`{c}}Fn}{{J`{Gd}}}{CAfLf}}6{{{CB`{c}}Bh}{{CB`{c}}}{CAlLf}}{{{CB`{c}}GdGd}{{CB`{c}}}{CAlLf}}{{{CB`{c}}GdEj}{{CB`{c}}}{CAlLf}}{{{CB`{c}}Ej}{{CB`{c}}}{CAlLf}}0{{{CB`{c}}Gd}{{CB`{c}}}{CAlLf}}4103{{{CB`{c}}}Bh{CAfLf}}{{{J`{Gd}}Bh}Ah}{cEd{}}{{{CB`{c}}}Ej{CAfLf}}{c{{j{e}}}{}{}}000{{{CB`{c}}}Gd{CAfLf}}{cEf{}}0{{{CB`{c}}}{{Gb{GdGd}}}{CAfLf}}{{cGdBhBh}{{j{{CAj{{CB`{c}}}}CCb}}}{CAlLf}}``````````````````````````````````{{{CAh{c}}}Eh{CAfLf}}{{}CCd}{cb{}}00000{{CCdCCd}CCd}{{CCdCCd}n}10{CCdGd}021{ce{}{}}00000`{{{CAh{c}}}Ej{CAfLf}}{CCdCCd}{{ce}n{}{}}1{{{CAh{c}}BhBh}Ej{CAfLf}}{{CCdCCd}Ah}48:0{{CCfCCf}Ah}{{CCdc}n{{Ib{}{{I`{CCd}}}}}}{{{CAh{c}}}CCd{CAfLf}}{{CCdAj}Al}0000{{CCfAj}Al}0{{{CAh{c}}Aj}AlLf}{cc{}}00{Gd{{Cd{CCd}}}}{GdCCd}00{{c{Cd{{Gb{BhBh}}}}}{{j{{CAh{c}}CCf}}}{CAfLf}}{c{{CAh{c}}}{CAfLf}}{cCCd{{Ib{}{{I`{CCd}}}}}}{Bn{{Cd{CCd}}}}{{{CAh{c}}}Gd{CAfLf}}{{{CAh{c}}}{{Gb{GdGdAh}}}{CAfLf}}{{CCdCCd}n}{{CCdCCd}CCd}{{CCdCCd}Ah}{ce{}{}}00{CCdc{}}{CCdAh}0{CCd{{Il{CCd}}}}{CCd{{In{CCd}}}}{{{CAh{c}}}Ej{CAfLf}}{CCdCCd}{{{CAh{c}}Fn}{{J`{Gd}}}{CAfLf}}{{{CAh{c}}Fn}{{j{{Cd{CCh}}CCf}}}{CAfLf}}{{{CAh{c}}}{{J`{Gd}}}{CAfLf}}4{{{CAh{c}}}{{J`{Gd}}}{CAlLf}}{{{CAh{c}}Fn}{{J`{Gd}}}{CAlLf}}4>{{{CAh{c}}}Eh{CAfLf}}{{CCdCCdAh}n}{{{CAh{c}}Eh}{{CAh{c}}}{CAlLf}}{{{CAh{c}}Ej}{{CAh{c}}}{CAlLf}}0{{{CAh{c}}CCd}{{CAh{c}}}{CAlLf}}{{{CAh{c}}GdAh}{{CAh{c}}}{CAlLf}}3222<{{CCdCCd}CCd}{{CCdCCd}n}1{ce{}{}}{cEd{}}2{c{{j{e}}}{}{}}00000{cEf{}}005{{{CAh{c}}}Ej{CAfLf}}0{{cEhEhCCdEj{Cd{Ej}}Ej{Cd{{Gb{eFn}}}}}{{j{{CAj{{CAh{c}}}}CCf}}}{CAlLf}{CAbCCjLf}}{{cEjEjEhEhCCdEj{Cd{Ej}}Ej{Cd{{Gb{eFn}}}}{Cd{{Gb{BhBh}}}}}{{j{{CAh{c}}CCf}}}{CAlLf}{CAbCCjLf}}`````````````{cb{}}0007777`{{{CAn{c}}}Ej{CAfLf}}{{{CAn{c}}BhBh}Ej{CAfLf}}1{{CClCCl}Ah}{{CClAj}Al}0{{{CAn{c}}Aj}AlLf}{cc{}}0{{c{Cd{{Gb{BhBh}}}}}{{j{{CAn{c}}CCl}}}{CAfLf}}{c{{CAn{c}}}{CAfLf}}??7{{{CAn{c}}}{{J`{Gd}}}{CAfLf}}{{{CAn{c}}}{{J`{Gd}}}{CAlLf}}{{{CAn{c}}Ej}{{CAn{c}}}{CAlLf}}000:{cEd{}}{c{{j{e}}}{}{}}000{cEf{}}0{{c{J`{Gd}}}{{j{{CAj{{CAn{c}}}}CCl}}}{CAlLf}}`````````????{ce{}{}}000{CCnCCn}{{ce}n{}{}}``{{CD`CD`}Ah}{{CCnCCn}Ah}{{CD`Aj}Al}{{CCnAj}Al}{cc{}}0`77{{{CAh{c}}}CCn{CAfLf}}{CCn{{Gb{EhEhCCd}}}}{{{BEn{Eh}}{BEn{Eh}}}Ah}0:====<<````````````````````````````````````````{{CDbEh}n}{{}CDd}{{}CDf}{cb{}}00000000000{{CDdCDd}CDd}{{CDfCDf}CDf}{{CDdCDd}n}{{CDfCDf}n}3210{CDdGd}0{CDfEj}05432{ce{}{}}00000000000{CDbAh}{{CDbCDd}n}{CDdCDd}{CDfCDf}{CDbCDb}{{ce}n{}{}}00{CDbn}43{{CDb{BEn{Eh}}Ej}{{BEn{Eh}}}}{{CDdCDd}Ah}{{CDfCDf}Ah}{CDbCD`}{{CDdCDd}CDd}{{CDfCDf}CDf}`<{{}CDd}{{}CDf}865{{CDhCDh}Ah}{{CDjCDj}Ah}{{CDlCDl}Ah}{{CDdc}n{{Ib{}{{I`{CDd}}}}}}{{CDfc}n{{Ib{}{{I`{CDf}}}}}}{CDbAh}0`0{CDb{{BEn{Eh}}}}`{{CDbCDd}Ah}{{CDdAj}Al}0000{{CDfAj}Al}0000{{CDhAj}Al}0{{CDjAj}Al}0{{CDlAj}Al}0{{CDbAj}Al}{cc{}}0000{CCfCDl}1{Gd{{Cd{CDd}}}}{Ej{{Cd{CDf}}}}{GdCDd}0{EjCDf}010{cCDd{{Ib{}{{I`{CDd}}}}}}{cCDf{{Ib{}{{I`{CDf}}}}}}{Bn{{Cd{CDd}}}}{Bn{{Cd{CDf}}}}{CDb{{BEn{Eh}}}}`{{CDdCDd}n}{{CDfCDf}n}{{CDdCDd}CDd}{{CDfCDf}CDf}{{CDdCDd}Ah}{{CDfCDf}Ah}{ce{}{}}00000{CDdc{}}{CDfc{}}{CDdAh}{CDfAh}{CDbAh}2100{{CDb{CAh{c}}}Ah{CAfLf}}{{{CAh{c}}}Ah{CAfLf}}{CDd{{Il{CDd}}}}{CDf{{Il{CDf}}}}{CDd{{In{CDd}}}}{CDf{{In{CDf}}}}{CDbEj}`{CDbCCn}`{CDdCDd}{CDfCDf}{{{CAh{c}}}{{j{EjCDh}}}{CAfLf}}{{{CAh{c}}EhCDnCCh}{{j{CDbCDh}}}{CAfLf}}`{{CDb{CAh{c}}{J`{Gd}}D`}{{j{{Gb{{Cd{CE`}}CDf}}CDj}}}{CAfLf}}{CDb{{BEn{Eh}}}}`{{CDbEj}Eh}{{CDdCDd}n}{{CDfCDf}n}{CDbn}{{CDb{CAh{c}}}n{CAfLf}}{{CDb{CAh{c}}CDf}{{j{{Gb{{Cd{CE`}}CDf}}CDj}}}{CAfLf}}{CDbAh}``{{CDbD`}Ah}````{{CDdCDdAh}n}{{CDfCDfAh}n}{{CDbCDd}n}{CDl{{Cd{Dl}}}}`{{CDdCDd}CDd}{{CDfCDf}CDf}<;10777{ce{}{}}00{cEd{}}00>={c{{j{e}}}{}{}}00000000000{cEf{}}0000054{{CDb{J`{Gd}}Ej}{{j{{CAj{{CAh{{J`{Gd}}}}}}CDl}}}}{{CDb{J`{Gd}}Ej{CEb{c}}D`}{{j{{Cd{{CAj{{CAh{{J`{Gd}}}}}}}}CDl}}}{CAbCCjLf}}{{CDb{J`{Gd}}Ej{BEn{Eh}}{BEn{Eh}}CCd{Cd{{Gb{cFn}}}}}{{j{{CAj{{CAh{{J`{Gd}}}}}}CDl}}}{CAbCCjLf}}`````{cb{}}077{{CEdCEf}CEh}{CEjCDb}``{{CEjAj}Al}{cc{}}`;{CEjAh}0`{{{CAh{c}}CDnCDnCCh}{{j{CEjCDh}}}{CAfLf}}{{{CAh{c}}}{{j{CEjCDh}}}{CAfLf}}{CEjCD`}{{{J`{Gd}}c}CEh{{AGl{CEl}{{AGb{CEh}}}}}}``{{CEj{CAh{c}}e}n{CAfLf}{{AGl{CEl}{{AGb{CEh}}}}}}```??>{{CEj{J`{Gd}}Ej}{{Cd{{CAj{{CAh{{J`{Gd}}}}}}}}}}```````````````````````````{{CEnCF`CEj}n}<<<<<<<<<<<<<<{ce{}{}}0000000000000{{CEnCF`CD`}Ah}{{CEnD`CF`}n}{CF`CF`}{{ce}n{}{}}`{{CEnCF`{CAh{c}}}n{CAfLf}}{{CEnCF`CCn}n}{{CFbCFb}Ah}{{CFdCFd}Ah}{{CFfCFf}Ah}{{CFhCFh}Ah}{{CF`CF`}Ah}{CEn{{Cd{CF`}}}}{CEnn}{{CFbAj}Al}{{CFdAj}Al}{{CFfAj}Al}0{{CFhAj}Al}0{{CF`Aj}Al}{{CEnAj}Al}{{CFjAj}Al}{cc{}}00{CCfCFf}{CCfCFh}2{CCbCFh}333{{CF`c}nFf}{ce{}{}}000000{CEnBh}`{CEnEj}`{CEnFn}`0`{{BhEj}CF`}{{BhEjCE`CE`}CEn}{CEnCD`}`{{CEn{CB`{c}}e}{{j{CFbCFf}}}{CAfLf}{{AGl{CEl}{{AGb{CEh}}}}}}``{{CEnCF`}n}`{{CEnBh}n}{CFf{{Cd{Dl}}}}{CFh{{Cd{Dl}}}};{cEd{}}0{c{{j{e}}}{}{}}0000000000000{cEf{}}000000{{CEn{J`{Gd}}}{{j{{Gb{{Cd{CE`}}CFd}}CFh}}}}````````````````````````````{cb{}}000`{ce{}{}}000{CFl{{j{nBKj}}}}{BKh{{j{nBKj}}}}`{{BKhEh}{{j{EhBKj}}}}1`{{BKjAj}Al}0{{BKhAj}Al}{cc{}}066{BKjAh}{{Eh{Ab{BIj}}{Ab{CFn}}{Cd{AKl}}}{{j{BKhBKj}}}}{BKhEh}``{BKh{{j{EhBKj}}}}{BKh{{j{{Cd{{BKd{c}}}}BKj}}}Lf}`{{BKh{CG`{c}}}{{j{n{Gb{BKjc}}}}}Lf}`{{BKhAKl}{{j{nBKj}}}}{{BKh{Ab{BIj}}}{{j{nBKj}}}}{{BKh{Ab{CFn}}}{{j{nBKj}}}}```55{cEd{}}{c{{j{e}}}{}{}}000{cEf{}}0````````````````````````````````````````````````````````````````````````````````````````````````````````````````{cb{}}000000000000000000000000000000000{{{CGb{c}}}{}{}}{{{CGb{c}}Fn}{{J`{c}}}{}}{CGd{{J`{c}}}{}}210{ce{}{}}000000000000000000000000000000000```{CGfCGf}{CGhCGh}{CGjCGj}{CGlCGl}{CGnCGn}{CH`CH`}{CHbCHb}{CHdCHd}{CHfCHf}{CHhCHh}{CFlCFl}{CHjCHj}{CHlCHl}{CHnCHn}{CI`CI`}{{ce}n{}{}}00000000000000```{{}{{CGb{c}}}Aj}{{}CGf}{{}CGh}{{}CGj}{{}CGl}{{}CGn}{{}CH`}{{}CHb}{{}CHd}{{}CHf}{{}CHh}{{}CFl}{{}CHj}{{}CHl}{{}CGd}{{}CHn}{{}CI`}`{{CHdCHd}Ah}{{CHfCHf}Ah}{{CHhCHh}Ah}{{CFlCFl}Ah}{{CHjCHj}Ah}{{CHlCHl}Ah}``````````{{{CGb{c}}Aj}Al{}}{{CHdAj}Al}{{CHfAj}Al}{{CHhAj}Al}{{CFlAj}Al}{{CHjAj}Al}{{CHlAj}Al}{{CGdAj}Al}{cc{}}00000000000000{CFnCHn}11```{ce{}{}}0000000000000000``````````````````{CGdFn}`{{}Fn}`{{}{{CGb{c}}}{}}```````````````````````````````{{CGdFn}n}``````````````444444444444444{c{{j{e}}}{}{}}000000000000000000000000000000000{cEf{}}0000000000000000```````````{cb{}}0007777{CIbCIb}{{ce}n{}{}}`{{{CG`{c}}}CIdLf}``{{{CG`{c}}Aj}Al{}}{{CIbAj}Al}>>{{CIdc}{{CG`{c}}}Lf}=={{{CG`{c}}}CIfLf}```{{CIdFnEhD`c}{{CG`{c}}}Lf}``?::::99{{{CG`{c}}}cLf}``1`99{ce{}{}}0{{{BKd{c}}}EhLf}{{{BKd{c}}Aj}AlLf}{cc{}}3{{{BKd{c}}g}{{BKd{e}}}LfLf{{AGl{c}{{AGb{e}}}}}}{CHd{{BKd{c}}}Lf}`{{{BKd{c}}}{{j{EhBb}}}Lf}{c{{j{e}}}{}{}}0{cEf{}}{{{BKd{c}}}cLf}``{cb{}}0::{{CIfAj}Al}8;{CGfCIf}554{CIfcLf}```````````3333===={CIhEh}```{CIhn}{{CIjAj}Al}0{{CIhAj}Al}{CIlCIj}{AOlCIj}{cc{}}0`{ce{}{}}0{{AKlCFl}{{j{CIhCIj}}}}{CIh{{j{{Cd{{BKd{c}}}}CIj}}}Lf}`{CIj{{Cd{Dl}}}}`{cEd{}}{c{{j{e}}}{}{}}000{cEf{}}0`````{cb{}}077{{CIlAj}Al}098{{FnAKlCIn}{{j{CJ`CIl}}}}5443```````22229999`{CJbn}{{CJdAj}Al}0{{CJbAj}Al}{AOlCJd}{CIlCJd}{BbCJd}{cc{}}0`{ce{}{}}0`{{AKlCFl}{{j{{Gb{CJ`CJ`}}CJd}}}}{{AKlCFl}{{j{CJbCJd}}}}{CJb{{j{EhCJd}}}}{{CJbCIf}{{j{n{Gb{CJdc}}}}}Lf}``{CJd{{Cd{Dl}}}}`{{CJbEh}{{j{EhCJd}}}}`{cEd{}}`{c{{j{e}}}{}{}}000{cEf{}}0````{cb{}}0::{{CFnAj}Al}<;332``````````````````````````````````{{CJfD`}n}22{CJhBn}=={CJhCJh}{{ce}n{}{}}{{CJhCJh}Gj}{CJfD`}`{c{{j{CJh}}}Al}{{CJhCJh}Ah}{{CJhCJj}Ah}`{CJlD`}4{{CJhAj}{{j{nCJn}}}}0{cc{}}{Bn{{j{CJh}}}}{{CJhc}nFf}``{ce{}{}}{{}{{`{{Ld{}{{I`{CJh}}}}}}}}`{{Bn{Cd{Ed}}}n}```{{}CJh}```{{CJhCJj}{{Cd{Gj}}}}{{CJhCJh}{{Cd{Gj}}}}{{CJhc}jAAf}````{{CJlD`}n}{CJhCJj}8{cEd{}}`{c{{j{e}}}{}{}}0{cEf{}}{{CK`D`}D`}````````````````````{cb{}}000000000000000================{CKbCKb}{CKdCKd}{{ce}n{}{}}0{c{{j{CKb}}}Al}{c{{j{CKd}}}Al}{{CKfCKh}Ah}{{CKbCKb}Ah}{{CKdCKd}Ah}{{CKjCKj}Ah}`{CKfn}{{CKlAj}Al}0{{CKnAj}Al}{{CL`Aj}Al}{{CLbAj}Al}{{CKfAj}Al}{{CKbAj}Al}{{CKdAj}Al}{{CKjAj}Al}0`{cc{}}0000000{Bn{{j{CKdc}}}{}}{CKf{{j{nCLd}}}}{ce{}{}}0000000`{{CKfCLf}n}```{{CKbc}jAAf}{{CKdc}jAAf}`````33{cEd{}}0{c{{j{e}}}{}{}}000000000000000{cEf{}}0000000{{CKfCKb}{{j{nCKl}}}}``````````````````````````````````````{{CJfD`}n}{{CLhD`}n}``{cb{}}0000000000000000000000000000000000000000000000000000000````::::::::::::::::::::::::::::::::::::::::::::::::::::::::``{CJfD`}{CLhD`}```{{}CLh}{{}CK`}{{}CLj}{{}CLl}{{}CLn}{{}CM`}{{}CMb}{{}CMd}{{}CMf}{{}CMh}{{}CMj}{{}CMl}{{}CMn}{{}CN`}{{}CNb}{{}CNd}{{}CNf}{{}CNh}{{}CNj}{{}CNl}{{}CNn}{{}CO`}{{}COb}{{}COd}```{{{COf{ce}}}g{COhLf}{FhAL`Lf}{}}``````{COjn}``````````{CJlD`}{CK`D`}{CJfD`}{CLhD`}{{{COf{ce}}Aj}Al{LfCOh}{LfFhAL`}}{{COlAj}Al}0{{CLhAj}Al}{{CK`Aj}Al}{{COnAj}Al}{{CLjAj}Al}{{CLlAj}Al}{{CLnAj}Al}{{CM`Aj}Al}{{CMbAj}Al}{{CMdAj}Al}{{CMfAj}Al}{{CMhAj}Al}{{CMjAj}Al}{{CMlAj}Al}{{COjAj}Al}{{CMnAj}Al}{{CN`Aj}Al}{{CNbAj}Al}{{CNdAj}Al}{{CNfAj}Al}{{CNhAj}Al}{{CNjAj}Al}{{CNlAj}Al}{{CNnAj}Al}{{CO`Aj}Al}{{CObAj}Al}{{COdAj}Al}{cc{}}000000000000000000000000000``{CJfn}0{{{COf{ce}}e}{{j{nCOl}}}{COhLf}{FhAL`Lf}}`{ce{}{}}000000000000000000000000000````````````````````````````````{c{{COf{ce}}}{COhLf}{FhAL`Lf}}{{}CLh}{{}CK`}{{{Cd{D`}}{Cd{D`}}{Cd{D`}}}COn}{{}CLj}{{}CLl}{{}CLn}{{}CM`}{{}CMb}{{}CMd}{{}CMf}{{}CMh}{{}CMj}{{}CMl}{CMnCOj}{{}CMn}{{}CN`}{{}CNb}{{}CNd}{{}COd}````````5{COnn}0```````{{CLhc}jAAf}{{CK`c}jAAf}{{CLjc}jAAf}{{CLlc}jAAf}{{CLnc}jAAf}{{CM`c}jAAf}{{CMbc}jAAf}{{CMdc}jAAf}{{CMfc}jAAf}{{CMhc}jAAf}{{CMjc}jAAf}{{CMlc}jAAf}{{CMnc}jAAf}{{CN`c}jAAf}{{CNbc}jAAf}{{CNdc}jAAf}{{CNfc}jAAf}{{CNhc}jAAf}{{CNjc}jAAf}{{CNlc}jAAf}{{CNnc}jAAf}{{CO`c}jAAf}{{CObc}jAAf}{{COdc}jAAf}```````````{{CJlD`}n}{{CK`D`}n}```{cEd{}}{c{{j{e}}}{}{}}0000000000000000000000000000000000000000000000000000000````{cEf{}}000000000000000000000000000`````````````{{{COf{ce}}}{{j{AhCOl}}}{COhLf}{FhAL`Lf}}````````{cb{}}0{ce{}{}}0{{D`CEdCEf}CEh}{{{Eb{{Cb{Bj}}}}CEl}CEh}`{{DbAj}Al}0{cc{}}4{{DdDd}n}``{{BjCElDf}CEh}{{BjCEl}CEh}100{EdEd}=``<<;``````````````9999999988888888{Bj{{j{nDh}}}}{AJbAJb}{{ce}n{}{}}``{BjDd}{{}Bj}{{}AJb}{FnBj}{c{{j{AJb}}}Al}{{AJbAJb}Ah}{{BjAj}Al}{{AJbAj}Al}0{{DjAj}Al}{{DhAj}Al}0{Dd{{j{EdDh}}}}{cc{}}0{AHjAJb}1{DlDj}2{DnDh}{{BjEh}{{j{EdDn}}}}{{BjEdDj}{{j{EdDh}}}}{ce{}{}}000`{{BjBn}{{j{AhDn}}}}{{BjDd}{{j{nDh}}}}0{{AJbc}jAAf}{{BjBn}n}{{BjFn}n}{{BjAJb}{{j{nDh}}}}{Dh{{Cd{Dl}}}}7{cEd{}}0`{c{{j{e}}}{}{}}0000000{cEf{}}000{BjAJb}`````````````````{cb{}}00000<<<<<<{{}Bh}{{BA`{CBb{{J`{Gd}}}}}Ah}{{BA`{J`{Gd}}}Ah}1{{DA`DA`}Ah}{{DAbDAb}Ah}{{DA`Aj}Al}0{{DAbAj}Al}0{{BA`Aj}Al}{CBdDA`}{CC`DA`}{cc{}}0{CC`DAb}{CCfDAb}{CFhDAb}{CCbDAb}4{ce{}{}}00{BA`Bh}`>``{{BnBhEjCE`CE`{Eb{{Cb{Bj}}}}}BA`}{{{Cd{Bh}}{Eb{{Cb{Bj}}}}}BA`}`{{BA`{J`{Gd}}Ej}{{j{{CAj{{CBb{{J`{Gd}}}}}}CC`}}}}`{{ce}{{j{BA`g}}}{}{}{}}{BA`c{}}{{BA`Bh}n}{DA`{{Cd{Dl}}}}{DAb{{Cd{Dl}}}}`{cEd{}}0{c{{j{e}}}{}{}}00000{cEf{}}00{{BA`{J`{Gd}}}{{j{{Cd{CE`}}DA`}}}}{{BA`{J`{Gd}}}{{Cd{CE`}}}}{{BA`{J`{Gd}}}{{j{{Cd{CE`}}DAb}}}}`{cb{}}0{ce{}{}}0{DAdDAd}{{ce}n{}{}}{{cEnEj}{{F`{DAd}}}Fb}{{DAdAj}Al}{cc{}}5````{{DAdcEnEj}{{F`{n}}}Fh}`6<<;{{}Ej}``````````````````````888888{Bn{{j{DAfDn}}}}{DAf{{j{EdDn}}}}999999{DAh{{j{nDn}}}}{EhAh}`{EhD`}{BIj{{j{DAjDn}}}}{{DAhEh}{{j{DAfDn}}}}{{DAh{AB`{Gd}}{J`{Gd}}{J`{Gd}}}{{j{D`Dn}}}}{c{{j{DAf}}}Al}{{DAhD`{J`{Gd}}}{{j{{Gb{{AB`{Gd}}{AB`{Gd}}}}Dn}}}}`{{DAfDAf}Ah}{{DAhAj}Al}{{DnAj}Al}0{{DAfAj}Al}{cc{}}{BbDn}{DAlDn}22{{DAhEh}{{j{EdDn}}}}{ce{}{}}00{{DAhBn}Ah}`{{}{{j{DAhDn}}}}{{{AB`{Gd}}{AB`{Gd}}{AB`{Gd}}}DAf}``{{DAfc}jAAf}{{DAhBn}n}{Dn{{Cd{Dl}}}}`{cEd{}}{c{{j{e}}}{}{}}00000{cEf{}}00````{cb{}}0::{{}Df}{{DfDf}Ah}{{DfAj}Al}{cc{}}>{{DfEd}n}{{DfEh}n}8{{{AGf{EdEd}}}{{j{DfDAn}}}}98{Df{{Cd{Ed}}}}`{Df{{Cd{Eh}}}}````````````````````````````````````````````````````````````9999999999999999999999``{ce{}{}}000000000000000000000{DdDd}{DB`DB`}{{ce}n{}{}}0`{{dDdDBbEn}{{j{nDBd}}}}{EjDBf}{EjAFb}{EjAh}{{}Dd}{{}Df}{{cEnEj}{{F`{Dd}}}Fb}{{cEnEj}{{F`{Df}}}Fb}`{{DdDd}Ah}{{DBhDBh}Ah}{{DdAj}Al}{{DfAj}Al}{{DB`Aj}Al}{{DhAj}Al}0{{DBdAj}Al}0{{DBhAj}Al}0{{DBjAj}Al}0{{DBlAj}Al}0{{DBnAj}Al}0{{DC`Aj}Al}0{{DCbAj}Al}0{cc{}}{MfDd}111111{MlDBj}{DBnDBj}{DBlDBj}{DBhDBj}5{DCbDBl}{DC`DBl}7{DCdDBn}{DCfDC`}{BbDC`}:{BfDCb};{BbDCb}{DCfDCb}{{DChDCjAh}{{j{ChDC`}}}}{{DChDCjAhAh}{{j{{Gb{Ch{Cd{Mj}}}}DCb}}}}{ce{}{}}0000000000```{{ClKnMhDClEnMf}{{j{{Eb{{Cb{d}}}}DBj}}}}{{DdcEnEj}{{F`{n}}}Fh}{{Ddc}jAAf}{{DfcEnEj}{{F`{n}}}Fh}{{DB`c}jAAf}``{{dDChDCn}{{j{nDBd}}}}{{DChEn}{{j{DfDBn}}}}{Df{{j{nDBh}}}}{{DfDChEjEn}{{j{nDBd}}}}{DBj{{Cd{Dl}}}}{DBl{{Cd{Dl}}}}{DBn{{Cd{Dl}}}}{DC`{{Cd{Dl}}}}{DCb{{Cd{Dl}}}}>>{cEd{}}0000000{c{{j{e}}}{}{}}000000000000000000000{cEf{}}0000000000{Dfn}`{{}Ej}0`````````````````````{{BAbDD`}n}{cb{}}00000000000{BAbAKl}{cBDf{}}0{DDbn}{BAb{{Cd{DDb}}}}`{ce{}{}}00000000000{DDbD`}`0{DDdDDd}{DDbDDb}{{ce}n{}{}}0{{BAbD`DDf}Ah}{{}BAb}{{BAbBAb}Ah}{{DDdDDd}Ah}{{DDbDDb}Ah}{BAb{{j{nDDh}}}}{{BAbAj}Al}{{DDhAj}Al}0{{DDdAj}Al}{{DDbAj}Al}{{DDfAj}Al}{{ElAj}Al}{{DDbD`}n}{cc{}}00000{{D`D`}D`}{DDbD`}`{ce{}{}}00000{BAbAh}`{{BAbD`DDf}n}{{D`D`D`D`D`D`}{{AKb{BAb}}}}{{D`D`D`}{{Cd{DDb}}}}5`{BAb{{Cd{DDb}}}}````{{DDbD`}DDd}`7{{ce}{{j{BAbg}}}{}{}{}}{{ce}{{j{DDbg}}}{}{}{}}{BAbc{}}{DDbc{}}```::{cEd{}}{c{{j{e}}}{}{}}00000000000{cEf{}}00000{{BAbElEl}n}``{cb{}}000`????`{DDjDDj}{DDlDDl}{{ce}n{}{}}0{{cEnEj}{{F`{DDj}}}Fb}{{cEnEj}{{F`{DDl}}}Fb}`{{DDjAj}Al}{{DDlAj}Al}{cc{}}0{ce{}{}}0```{{DDjcEnEj}{{F`{n}}}Fh}{{DDlcEnEj}{{F`{n}}}Fh}`22>>>>=={{}Ej}0`````````````````<<<<<<``````{Mf{{Cd{Ol}}}}{MfDBf}`555555{{MfDBf}{{j{nDDn}}}}{{MfDE`}{{j{nDEb}}}}{{MfDEd}{{j{nDEf}}}}`{{}DEh}{{}Mf}{c{{j{DEh}}}Al}``{{DEhDEh}Ah}{{DEjAj}Al}0{{DEhAj}Al}{{MfAj}Al}{AJ`DEj}{DEfDEj}{DEbDEj}{DElDEj}{AF`DEj}{BbDEj}{CKlDEj}{DEnDEj}{DF`DEj}{DhDEj}{cc{}}{OdDEj}{DFbDEj}{DDnDEj}3{MfDEh}{DFdMf}5{{BnClFn{Cd{Bn}}}{{j{MfDEj}}}}{ce{}{}}00{Mf{{B`{Bj}}}}````{Mf{{Cd{DFf}}}}`{Mf{{Eb{{Cb{Bj}}}}}}```{{DEhc}jAAf}{{MfDFh}{{j{nDF`}}}}{{MfBHn}{{j{nDFb}}}}{{MfDBf}n}{{MfN`}n}{{MfDFfBn}{{j{nAJ`}}}}{{MfDFf}{{j{nAJ`}}}}{{MfAJbBn}{{j{nAJ`}}}}{{MfAh}n}{{MfDFj}{{j{nDEl}}}}{DEj{{Cd{Dl}}}}{cEd{}}{MfAh}{c{{j{e}}}{}{}}00000{cEf{}}00{{MfAIb}n}{{MfDFl}{{j{nOd}}}}`````````````````````````````````````````````````````````````````````````````````{cb{}}0000000000000{DFn{{j{DG`DGb}}}}`{ce{}{}}0000000000000{{MhKnCl{DGf{DGd}}{DGj{DGh}}NdAhFn{Cd{Bn}}}{{j{{Gb{Mf{Eb{{Cb{d}}}}}}DGl}}}}`{{DGnDBb}{{j{DG`DGb}}}}{{DH`DH`}Ah}{{DG`DG`}Ah}``{DGn{{j{DG`DGb}}}}{{DFnAj}Al}{{DH`Aj}Al}{{DGbAj}Al}0{{DG`Aj}Al}{{DHbAj}Al}0{{DGlAj}Al}0{{DGnAj}Al}{cc{}}0{DEbDGb}1{DhDGb}{CKlDGb}{DHbDGb}{DFbDGb}{DEfDGb}{L`DGb}{AJ`DGb}{DEnDGb}{OdDGb}{DF`DGb}{DBdDGb}{DDnDGb}{DElDGb}{NhDGb}{AnDGb}{cc{}}{AnDHb}{DBjDHb}22{DhDGl}3{DHd{{j{DG`DGb}}}}{{DFnDH`}{{j{DG`DGb}}}}{{DGnDH`}{{j{DG`DGb}}}}{{DFnBHn}{{j{DG`DGb}}}}{{DFnDEd}{{j{DG`DGb}}}}`{ce{}{}}000000{{DFnDCl}{{j{DG`DHb}}}}{DHd{{B`{Bj}}}}{DFn{{B`{Bj}}}}{DGn{{B`{Bj}}}}{{MhClMfKn}DFn}{{Mf{Eb{{Cb{d}}}}}DGn}{{DHdDd}{{j{DG`DGb}}}}{DGn{{j{DG`DGb}}}}10`0{{DFnDFh}{{j{DG`DGb}}}}{{DFnDBf}{{j{DG`DGb}}}}{{DFnN`}{{j{DG`DGb}}}}{{DFnDE`}{{j{DG`DGb}}}}{{DFnDFf}{{j{DG`DGb}}}}{{DFnDFj}{{j{DG`DGb}}}}{DGb{{Cd{Dl}}}}{DHb{{Cd{Dl}}}}{DFn{{j{DG`DGb}}}}{cEd{}}00{c{{j{e}}}{}{}}0000000000000{cEf{}}000000{{DGnDHf}{{j{DG`DGb}}}}{{DGnDHh}{{j{DG`DGb}}}}{{DFnDFl}{{j{DG`DGb}}}}```{{}Mh}``{{DHjDHl}n}{ln}`1{{}{{DHn{n}}}}{{DHjDHlDI`}n}0000000````{cb{}}0{DIbAKl}{cBDf{}}0{ce{}{}}0{{DIbAj}Al}{cc{}}2{{DIb{J`{Gd}}}{{AKb{Fn}}}}{c{{j{e}}}{}{}}0{cEf{}}``````888888555555{{}DId}{{}DFd}{{}DIf}{{DIdAj}Al}{{DFdAj}Al}{{DIfAj}Al}999`;;;{{{Cd{Bn}}}Ed}654{{DFdN`}n}999999888{{DFdDBf}DFd}{DIdDId}{DIfDIf}{{DIdBn}DId}{{DFdDIh}DFd}{{}{{Gb{DIjEd}}}}{{{Cd{Bn}}AhAh}{{Gb{{Eb{{Cb{d}}}}Kn}}}}{{{Cd{Bn}}}{{Gb{{Eb{{Cb{d}}}}Kn}}}}00```````````````{cb{}}000{ce{}{}}000{DIlEn}{DIn{{AGf{DJ`Ej}}}}{cc{}}033{c{{j{e}}}{}{}}000{cEf{}}0```666666````555555{DJbDJb}{DJdDJd}{{ce}n{}{}}0{{}DJb}{{}DJd}{c{{j{DJb}}}Al}{c{{j{DJd}}}Al}``{{DJbDJb}Ah}{{DJdDJd}Ah}{{DJbAj}Al}{{DJdAj}Al}{{DJfAj}Al}{DDbDJb}??{BAbDJd}{cc{}}{{{Cd{DJd}}}DJf}{{{Cd{DJb}}}El}`{ce{}{}}00{DJd{{Cd{DJd}}}}`````{DCh{{j{BIjBb}}}}```{{DJbc}jAAf}{{DJdc}jAAf}``44{c{{j{e}}}{}{}}000{DJd{{j{BAbc}}}{}}11{cEf{}}00````````````````````{cb{}}0000000008888888888{DFhDFh}{DJhDJh}{DJjDJj}{{ce}n{}{}}00{{}DFh}{{}DJl}`{c{{j{DFh}}}Al}{c{{j{DJh}}}Al}{c{{j{DJj}}}Al}{{DFhDFh}Ah}{{DJhDJh}Ah}{{DJjDJj}Ah}{{DF`Aj}Al}0{{DFhAj}Al}{{DJhAj}Al}{{DJjAj}Al}{{DJlAj}Al}{cc{}}{BbDF`}{hDF`}{fDFh}3333{DJl{{Cd{{Eb{{Cb{Kl}}}}}}}}{DJl{{j{DFhDF`}}}}`{ce{}{}}0000{{}DJl}``{{DFhc}jAAf}{{DJhc}jAAf}{{DJjc}jAAf}{{DJlDFh}{{j{nDF`}}}}{{DJl{Eb{{Cb{Kl}}}}}n}``666{cEd{}}{c{{j{e}}}{}{}}000000000{cEf{}}0000`````````{cb{}}0000000`::::::::`{DBfDBf}{{ce}n{}{}}``{{}DBf}{{}DJn}{c{{j{DBf}}}Al}{{cEnEj}{{F`{DBf}}}Fb}{{DBfDBf}Ah}{{DBfAj}Al}{{DDnAj}Al}0{{DJnAj}Al}{{OlAj}Al}{cc{}}{DIdDBf}111``{ce{}{}}000``{DBf{{j{OlDDn}}}}{{DBfcEnEj}{{F`{n}}}Fh}{{DBfc}jAAf}3{cEd{}}{c{{j{e}}}{}{}}0000000{cEf{}}000{{}Ej}```````````````{{DK`{Eb{{Cb{BHj}}}}}n}{{DK`{Eb{{Cb{BIf}}}}}n}{cb{}}000000000::::::::::`{DK`{{Ab{BHn}}}}{{}BHn}{{}DHf}{{}DK`}{c{{j{BHn}}}Al}{c{{j{DHf}}}Al}```{{BHnBHn}Ah}{{DHfDHf}Ah}`{{DFbAj}Al}0{{BHnAj}Al}{{DHfAj}Al}{{LbAj}Al}{{DK`Aj}Al}{cc{}}{BHhBHn}1{BInBHn}222{{DK`Bn}{{Cd{Fn}}}}{DK`Ah}{{DK`BHn}{{j{nDFb}}}}{ce{}{}}0000``{{}DK`}`````{{BHnc}jAAf}`{cEd{}}{c{{j{e}}}{}{}}000000000{cEf{}}0000``````{cb{}}00000666666{{DKbDE`}{{j{{Eb{{Cb{Lj}}}}DEb}}}}{DE`DE`}{{ce}n{}{}}{DKb{{Cd{DE`}}}}{{}DE`}{{}DKb}{c{{j{DE`}}}Al}{{DE`DE`}Ah}{{DE`Aj}Al}{{DEbAj}Al}0{{DKbAj}Al}{LjDE`}{cc{}}0{BFdDEb}{BbDEb}2{DKb{{Cd{{Eb{{Cb{Lj}}}}}}}}{{DKbDE`}{{j{nDEb}}}}{ce{}{}}00<`{{DE`c}jAAf}{{DKb{Eb{{Cb{Lj}}}}}n}{DEb{{Cd{Dl}}}}3{cEd{}}{c{{j{e}}}{}{}}00000{cEf{}}00``````{cb{}}0007777{DKdDKd}{ClCl}{{ce}n{}{}}0{{}DKd}{{}Cl}{{DKdDKd}Ah}{{ClCl}Ah}{{DKdAj}Al}0{{ClAj}Al}{cc{}}0`{ce{}{}}0{{DKdc}jAAf}{{Clc}jAAf}`22{cEd{}}{c{{j{e}}}{}{}}000{cEf{}}0````````````{cb{}}000000066666666{DIhDIh}{DFlDFl}{MnMn}{{ce}n{}{}}00```{{}DIh}{{}Mn}{c{{j{DIh}}}Al}{c{{j{DFl}}}Al}{c{{j{e}}}Al{DKfAn{DKh{Ah}}Lf}}{c{{j{e}}}Al{DKfDKj{DKh{Gd}}Lf}}{{OdOd}Ah}{{DIhDIh}Ah}{{DFlDFl}Ah}{{MnMn}Ah}{{OdAj}Al}0{{DIhAj}Al}0{{DFlAj}Al}{{MnAj}Al}{cc{}}{DIfDIh}1{MnDIh}{DIhDFl}33{ce{}{}}000{DFlAh}```{{DIhc}jAAf}{{DFlc}jAAf}{{MnN`}n}```444{cEd{}}0```{c{{j{e}}}{}{}}0000000{cEf{}}000{{MnDFl}{{j{nOd}}}}```````{cb{}}0009999{DKlDKl}{{ce}n{}{}}{c{{j{DKl}}}Al}{{DKlDKl}Ah}{{DKlAj}Al}{{DEnAj}Al}0{cc{}}0{DKl{{j{nDEn}}}}{ce{}{}}0`{{DKlc}jAAf}1>====<<```````::::1111{DFfDFf}9{c{{j{DFf}}}Al}{{DFfDFf}Ah}{{DFfAj}Al}{{AJ`Aj}Al}08866{DFf{{Cd{Bh}}}}`{DFf{{Ab{Ed}}}}`{{DFfc}jAAf}9{cEd{}}{c{{j{e}}}{}{}}000{cEf{}}0{DFfAJb}```````````{{DKn{Eb{{Cb{Ll}}}}}n}{cb{}}0000000????????{{DKnDEd}{{j{{Eb{{Cb{Ll}}}}DEf}}}}{DHhDHh}{{ce}n{}{}}{DKn{{Ab{DEd}}}}{DEd{{j{LlDEf}}}}{{}DKn}{c{{j{DEd}}}Al}{c{{j{DHh}}}Al}{{DEdDEd}Ah}{{DHhDHh}Ah}{{DEdAj}Al}{{DHhAj}Al}{{DEfAj}Al}0{{DKnAj}Al}{cc{}}{LlDEd}1{AnDEf}{BbDEf}3{BDhDEf}{BdDEf}5````{ce{}{}}000{DKn{{DL`{{Eb{{Cb{Ll}}}}}}}}{DKn{{DLb{{Eb{{Cb{Ll}}}}}}}}`{{}DKn}``{{DEdc}jAAf}{DEf{{Cd{Dl}}}}5{cEd{}}{c{{j{e}}}{}{}}0000000``{cEf{}}000```````````````{cb{}}00000000000000000``999999999999999999`{DJ`DJ`}{DCnDCn}{{ce}n{}{}}0{{DJ`DJ`}Gj}0{{}DCn}{c{{j{DJ`}}}Al}{c{{j{DCn}}}Al}{c{{j{DLd}}}Al}{c{{j{DBb}}}Al}{c{{j{DLf}}}Al}{c{{j{DLh}}}Al}{c{{j{DLj}}}Al}{c{{j{DLl}}}Al}``{{DJ`DJ`}Ah}{{DCnDCn}Ah}{{DLdDLd}Ah}{{DBbDBb}Ah}{{DClDCl}Ah}{{DLhDLh}Ah}{{DJ`Aj}{{j{nCJn}}}}0{{DCnAj}Al}{{DLdAj}Al}{{DBbAj}Al}{{DClAj}Al}{{DLfAj}Al}{{DLhAj}Al}{{DLjAj}Al}{{DLlAj}Al}{cc{}}00000000{Bn{{j{DJ`}}}}{{DJ`c}nFf}{ce{}{}}00000000``````{{D`D`D`}DJ`}{Bn{{j{DJ`DLn}}}}{{DJ`DJ`}{{Cd{Gj}}}}````{{DJ`c}jAAf}{{DCnc}jAAf}{{DLjc}jAAf}{{DLlc}jAAf}`````77{cEd{}}{c{{j{e}}}{}{}}00000000000000000{cEf{}}00000000`````````{cb{}}0000000;;;;;;;;{DFjDFj}{{ce}n{}{}}{DM`{{Cd{DFj}}}}{DFj{{j{{M`{Ln}}DEl}}}}{{}DM`}{c{{j{DFj}}}Al}{{DFjDFj}Ah}{{DElAj}Al}0{{DFjAj}Al}{{DMbAj}Al}{{DM`Aj}Al}{AInDEl}{cc{}}{AIdDEl}1{DMbDFj}22{DM`{{Cd{{Eb{{Cb{{M`{Ln}}}}}}}}}}``{{DM`DFj}{{j{nDEl}}}}{ce{}{}}000=``{{DFjc}jAAf}{{DM`{Eb{{Cb{{M`{Ln}}}}}}}n}2{cEd{}}{c{{j{e}}}{}{}}0000000{cEf{}}000``````````````````````````````````````````````{{{DMf{}{{DMd{c}}}}DMh}AhDMj}{{{BEl{}{{DMl{c}}{DMn{e}}}}G`}AhDMf{{DN`{c}}}}{DNb{{Eb{BIj}}}}{cb{}}00000000{HdBNn}111111111{Hd{{J`{Gd}}}}{{{DMf{}{{DMd{c}}}}}{{Cd{{J`{Gd}}}}}DMj}{{{CJ`{c}}}GdDMj}21{{{DMf{}{{DMd{c}}}}}{{j{BNnAOh}}}DMj}`{{G`D`}G`}{{DMhD`}DMh}{{{DMf{}{{DMd{c}}}}}cDMj}{{{CJ`{c}}}cDMj}```32{ce{}{}}00000000000000000{{{DNd{c}}}{{j{{CJ`{c}}DNf}}}DMj}{{{Cd{DNb}}FnBDfBDf}{{j{{CJ`{c}}DNf}}}DNh}{{GdFnBDfBDf}{{j{{CJ`{c}}DNf}}}DNh}{{{DMf{}{{DMd{c}}}}DMh}{{Cd{DMh}}}DMj}{{{BEl{}{{DMl{c}}{DMn{e}}}}G`}{{Cd{G`}}}DMf{{DN`{c}}}}{{{BEl{}{{DMl{c}}{DMn{e}}}}G`Fn}AhDMf{{DN`{c}}}}{{DNjc}{{Cd{DNj}}}{}}{{G`D`}{{Cd{G`}}}}{{DMhD`}{{Cd{DMh}}}}2{{{DMf{}{{DMd{c}}}}DMhFn}{{Cd{DMh}}}DMj}{{{BEl{}{{DMl{c}}{DMn{e}}}}G`Fn}{{Cd{G`}}}DMf{{DN`{c}}}}{{DNjDNj}{{Cd{c}}}{}}{{G`G`}{{Cd{D`}}}}{{DMhDMh}{{Cd{D`}}}}765{DNlDNl}{G`G`}{DMhDMh}{DNbDNb}{{ce}n{}{}}000{{G`G`}Gj}{{DMhDMh}Gj}{Fn{{j{DNnDCf}}}}{{}DNl}{{}G`}{{}DMh}{{}DCj}{DO`DCj}{ChDCj}{{cEnEj}{{F`{DOb}}}Fb}{{cEnEj}{{F`{DCj}}}Fb}{{DMjFn}Ah}{{DNlFn}Ah}{{{CJ`{c}}}n{}}{{DO`c}{{j{nDCf}}}AOn}{{Chc}{{j{nDCf}}}AOn}{{DO`cCf}{{j{nDCf}}}{AOnOj}}{{ChcCf}{{j{nDCf}}}{AOnOj}}{{G`G`}Ah}{{DMhDMh}Ah}{{DObDOb}Ah}{{DCjDCj}Ah}{{{CJ`{c}}{CJ`{e}}}AhDMjDMj}{DNbBIj}`{{{DMf{}{{DMd{c}}}}}{{Cd{DNb}}}DMj}{{{CJ`{c}}}{{Cd{DNb}}}DMj}```{{{BEl{}{{DMl{c}}{DMn{e}}}}G`}{{Cd{c}}}DMf{{DN`{c}}}}{{{CJ`{c}}}BDfDMj}```{{DNlAj}{{j{nCJn}}}}{{G`Aj}{{j{nCJn}}}}{{DMhAj}{{j{nCJn}}}}{{DNbAj}{{j{nCJn}}}}{{{CJ`{c}}Aj}{{j{nCJn}}}Lf}{{DCfAj}Al}0{{DObAj}Al}{{DCjAj}Al}{cc{}}00000000{{{Eb{BIj}}D`}DNb}{{DNbFn}{{j{{CJ`{c}}DNf}}}DNh}{{{J`{Gd}}}{{Cd{Hd}}}}{{{J`{{Gb{G`Fn}}}}Ah}{{j{DO`DCf}}}}{{{J`{{Gb{G`Fn}}}}Ah}{{j{ChDCf}}}}{{{Ab{{Gb{DNbG`Fn}}}}AhAh}{{j{DO`DCf}}}}{{{Ab{{Gb{DNbG`Fn}}}}AhAh}{{j{ChDCf}}}}4{{{Cd{BIj}}DCjAh}{{j{DO`DCf}}}}{{{Cd{BIj}}DCjAh}{{j{ChDCf}}}}{DNl{{Ab{D`}}}}{{{DMf{}{{DMd{c}}}}DMh}{{j{GdAOh}}}DMj}{{{BEl{}{{DMl{c}}{DMn{e}}}}G`}{{j{GdAOh}}}DMf{{DN`{c}}}}{{{DMf{}{{DMd{c}}}}DMhFn}{{j{BNnAOh}}}DMj}{{{BEl{}{{DMl{c}}{DMn{e}}}}G`Fn}{{j{BNnAOh}}}DMf{{DN`{c}}}}{{{CJ`{c}}FnFn}{{j{BNnAOl}}}DMj}````{ce{}{}}00000000{{DNlFn}Ah}0{{{DMf{}{{DMd{c}}}}}{{Cd{Ah}}}DMj}{{{CJ`{c}}}{{Cd{Ah}}}DMj}{{{BEl{}{{DMl{c}}{DMn{e}}}}}{}DMf{{DN`{c}}}}{{{DMf{}{{DMd{c}}}}}G`DMj}{{{BEl{}{{DMl{c}}{DMn{e}}}}}G`DMf{{DN`{c}}}}{{{DMf{}{{DMd{c}}}}}{}DMj}{DNlFn}{{{CJ`{c}}}FnDMj}{{{DOf{}{{DOd{c}}}}eDOh}{{j{gc}}}{}{}DOj}`{{{BEl{}{{DMl{c}}{DMn{e}}}}gik}gDMf{{DN`{c}}}{}{{DOl{{Gb{Fnc}}}{{AGb{g}}}}}{{DOl{gg}{{AGb{g}}}}}}`{{DMjFnFn}n}{{DO`G`Fn}n}{{DNlFnFn}n}{{ChG`Fn}n}{{DNjc}c{}}{cDNj{}}{Fn{{DNd{c}}}{DMjAj}}{{FnFn}DNl}{D`G`}{D`DMh}{{BIjD`}DNb}{Fn{{j{{CJ`{c}}DNf}}}DNh}{{Fnc}{{DNd{c}}}DMj}{{{BEl{}{{DMl{c}}{DMn{e}}}}}FnDMf{{DN`{c}}}}`{{DNjc}{{Gb{DNjAh}}}{}}{{G`D`}{{Gb{G`Ah}}}}{{DMhD`}{{Gb{DMhAh}}}}210{{{CJ`{c}}}AhDMj}```{{G`G`}{{Cd{Gj}}}}{{DMhDMh}{{Cd{Gj}}}}{{{CJ`{c}}}BDfDMj}````{DNjc{}}{G`D`}{DMhD`}{{{DOf{}{{DOd{c}}}}{J`{Gd}}e}{{j{Fnc}}}{}{}}{{{DOf{}{{DOd{c}}}}egFn}{{j{nc}}}{}{}Fb}{{{BEl{}{{DMl{c}}{DMn{e}}}}G`gFn}{{j{nAOh}}}DMf{{DN`{c}}}Oh}{{{DOf{}{{DOd{c}}}}egFn}{{j{Fnc}}}{}{}Fb}{{{DOf{}{{DOd{c}}}}e}{{j{gc}}}{}{}Hd}{{{DOf{}{{DOd{c}}}}{J`{Gd}}e}{{j{nc}}}{}{}}{{{BEl{}{{DMl{c}}{DMn{e}}}}G`gFn}{{j{FnAOh}}}DMf{{DN`{c}}}Oh}``{DNln}{{DObcEnEj}{{F`{n}}}Fh}{{DCjcEnEj}{{F`{n}}}Fh}{{DNlFnFn}n}{{{CJ`{c}}Ah}nDMj}{{{CJ`{c}}}FnDMj}`````{{DMjFn}c{}}{{DNlFn}}{DNbD`}`{{{DMf{}{{DMd{c}}}}}G`DMj}{{{DOf{}{{DOd{c}}}}egDOh}{{j{nc}}}{}DOj{}}{ce{}{}}000{{{DMf{}{{DMd{c}}}}G`}{{Cd{DMh}}}DMj}{{{BEl{}{{DMl{c}}{DMn{e}}}}G`}{{Cd{{Gb{cDMh}}}}}DMf{{DN`{c}}}}{cEd{}}{{{BEl{}{{DMl{c}}{DMn{e}}}}FnG`g}{{j{FnAOh}}}DMf{{DN`{c}}}{{AGd{FnFnDMhc}{{AGb{{j{FnAOh}}}}}}}}{c{{j{e}}}{}{}}00000000000000000{cEf{}}00000000{{DNjc}DNj{}}{{G`D`}G`}{{DMhD`}DMh}2{{DNjDNj}c{}}321{{}Ej}0{{BIjAh}{{j{DO`DCf}}}}{{BIjAh}{{j{ChDCf}}}}{{{DNd{c}}DNb}{{DNd{c}}}DMj}{{{DNd{c}}Ah}{{DNd{c}}}DMj}{FnDNl}{{{DNd{c}}BDf}{{DNd{c}}}DMj}0{{{DNd{c}}Gd}{{DNd{c}}}DMj}{{{BEl{}{{DMl{c}}{DMn{e}}}}i}{{j{ng}}}DMf{{DN`{c}}}{}{{DOl{Fnc}{{AGb{{j{ng}}}}}}}}{{{BEl{}{{DMl{c}}{DMn{e}}}}i}{{j{ng}}}DMf{{DN`{c}}}{}{{AGd{Fnc}{{AGb{{j{ng}}}}}}}}{{FnAh}{{j{DO`DCf}}}}{{FnAh}{{j{ChDCf}}}}{{{DOf{}{{DOd{c}}}}{J`{Gd}}e}{{j{Fnc}}}{}{}}{{{DOf{}{{DOd{c}}}}egFn}{{j{nc}}}{}{}Fh}{{{BEl{}{{DMl{c}}{DMn{e}}}}G`gFn}{{j{nAOh}}}DMf{{DN`{c}}}AOn}{{{DOf{}{{DOd{c}}}}eg}{{j{nc}}}{}Hd{}}{{{DOf{}{{DOd{c}}}}{J`{Gd}}e}{{j{nc}}}{}{}}{{{DOf{}{{DOd{c}}}}egFn}{{j{Fnc}}}{}{}Fh}{{{BEl{}{{DMl{c}}{DMn{e}}}}G`gFn}{{j{FnAOh}}}DMf{{DN`{c}}}AOn}```{{DNjc}{{Cd{DNj}}}{}}0{{DNjDNj}{{Cd{c}}}{}}1{{DNjc}c{}}{cDNj{}}{{}c{}}{{DNjc}{{Gb{DNjAh}}}{}}0{DNjc{}}{{DNjc}DNj{}}0{{DNjDNj}c{}}14`````````````````````````````````````{cb{}}00000000000000000{ce{}{}}00000000000000000{DOnDOn}{E`E`}{{ce}n{}{}}0`{Dnn}{Ebn}{Dn{{j{EdBf}}}}{{E`E`}Ah}```{{Dnl}{{Ef{Dn}}}}`{{EhAj}Al}{{BhAj}Al}0{{EjAj}Al}{{BdAj}Al}0{{DnAj}Al}{{DOnAj}Al}{{EbAj}Al}{{BjAj}Al}0{{E`Aj}Al}{cc{}}00{BbBd}11111{BfBj}2{Dn{{j{nBh}}}}{ce{}{}}00000000`{{GdNbNd}{{j{DnBh}}}}{{{DGj{DOn}}{DGf{Eh}}{El{n}}}Eb}{Dn{{Ef{Dn}}}}{{}n}5{Eb{{DGf{Eh}}}}```{{DnEn}n}{Dn{{j{E`Bh}}}}{c{{j{nBh}}}{{AGl{Dn}}}}5{{EbDOn}{{j{nBj}}}}{{DnAJj}n}`{{Dn{Eb{E`}}{Eb{EA`}}}{{j{EbBd}}}};;{cEd{}}00{c{{j{e}}}{}{}}00000000000000000{cEf{}}00000000```````````````````````````````````````````````````````{cb{}}00000000000????????????{DjDj}{{ce}n{}{}}{{EAbChG`Ej}{{j{nEAd}}}}`{{DjEj}{{F`{n}}}}`{EjEAf}{Ej{{Cd{Eh}}}}{{cEnEj}{{F`{Dj}}}Fb}{EAb{{j{A`EAh}}}}{{EAhEAh}Ah}{{O`O`}Ah}{{OfOf}Ah}{{EAdEAd}Ah}`{{EAhAj}Al}0{{O`Aj}Al}0{{OfAj}Al}0{{EAdAj}Al}0{{EAbAj}Al}{{DjAj}Al}{cc{}}{HnEAh}{ABnEAh}{IdEAh}{BfO`}4{BfOf}5{GnEAd}{HnEAd}{JjEAd}{JfEAd}{ACdEAd}{BfEAd}{JhEAd}{IdEAd}==={EAb{{j{ACfEAh}}}}{{EAb{J`{Eh}}}{{j{{Ab{EAf}}EAh}}}}{{EAb{J`{Eh}}}{{j{{AGf{EhD`}}EAh}}}}{EAb{{j{EhO`}}}}`{ce{}{}}00000{{EAbEh}{{j{AhO`}}}}`````{{GdNb}{{j{EAbEAh}}}}``{{EAbDj}{{j{nEAh}}}}{{EAbEd}{{j{E`Bh}}}}{EAb{{j{DjEAh}}}}`{{DjcEnEj}{{F`{n}}}Fh}{{EAbAJj}n}{{EAbEh}{{j{nOf}}}}{EAh{{Cd{Dl}}}}{Of{{Cd{Dl}}}}{EAd{{Cd{Dl}}}}`;{cEd{}}000{c{{j{e}}}{}{}}00000000000`{cEf{}}00000`{{}Ej}`````````````````````````````{cb{}}0000000{ce{}{}}0000000{{Ih{J`{Eh}}}{{j{nEh}}}}`{{{J`{Nf}}}{{Ab{Eh}}}}{{}EAj}{Ej{{Ab{Nf}}}}{{cEnEj}{{F`{EAj}}}Fb}{{EAlEAl}Ah}{{NnNn}Ah}{NbAFj}`{{EAlAj}Al}0{{NnAj}Al}0{{NbAj}Al}{{EAjAj}Al}{HnEAl}{cc{}}000>>>>````{{NbChAh}{{j{nEAl}}}}{NbIj}`{{{Ab{Nf}}}{{j{NbEAl}}}}```{{NbEAj}{{j{nNn}}}}{Nb{{j{EAjEAl}}}}{{EAjcEnEj}{{F`{n}}}Fh}5{Nb{{j{nEAl}}}}{EAl{{Cd{Dl}}}}{NbACf}`{cEd{}}0{c{{j{e}}}{}{}}0000000{cEf{}}000{{}Ej}","c":[11424,11427,11577,11615,11617,11693,11694,11698,11702],"p":[[10,"Any",12176],[5,"Vmm",0],[5,"BalloonConfig",3309],[6,"BalloonError",3229],[6,"Result",12177],[6,"FcExitCode",0],[1,"unit"],[5,"CpuConfiguration",1678],[5,"Vec",12178],[6,"DumpCpuConfigError",0],[5,"EmulateSerialInitError",0],[1,"bool"],[5,"Formatter",12179],[8,"Result",12179],[6,"VmmError",0],[6,"StartVcpusError",0],[5,"Error",12180],[5,"StartThreadedError",11722],[5,"Error",12181],[6,"VcpuError",11722],[5,"VcpuSendEventError",11722],[6,"DeviceType",205],[1,"str"],[6,"BusDevice",2871],[5,"Mutex",12182],[6,"Option",12183],[8,"DirtyBitmap",0],[8,"GuestMemoryMmap",11362],[5,"EventOps",12184],[5,"InstanceInfo",10827],[5,"BalloonStats",3309],[1,"u64"],[5,"Events",12184],[5,"VmInfo",9556],[5,"MicrovmState",9556],[6,"MicrovmStateError",9556],[5,"VcpuState",11896],[10,"Error",12185],[5,"Vcpu",11722],[8,"BpfProgram",12186],[5,"Arc",12187],[5,"String",12188],[5,"TypeId",12176],[1,"u32"],[1,"u16"],[6,"BucketUpdate",9801],[5,"VersionMap",12189],[8,"VersionizeResult",12190],[10,"Read",12191],[5,"InitrdConfig",205],[10,"Hasher",12192],[10,"Write",12191],[5,"boot_params",12193],[6,"ConfigurationError",253],[1,"usize"],[5,"GuestAddress",11362],[1,"tuple"],[1,"u8"],[6,"MptableError",361],[5,"CpuModel",294],[6,"Ordering",12194],[5,"kvm_segment",12195],[6,"InterruptError",328],[5,"kvm_lapic_state",12195],[5,"VcpuFd",12196],[10,"ByteValued",11362],[5,"mpf_intel",703],[5,"ArchCapaMSRFlags",407],[5,"MsrRange",407],[5,"kvm_msr_entry",12195],[6,"MsrError",407],[17,"Item"],[10,"IntoIterator",12197],[6,"Error",12198],[6,"GetCpuidError",2060],[5,"Kvm",12199],[8,"MsrList",12200],[5,"Iter",12201],[5,"IterNames",12201],[1,"slice"],[5,"kvm_sregs",12195],[6,"RegsError",538],[5,"SetupFpuError",538],[5,"SetupRegistersError",538],[6,"SetupSpecialRegistersError",538],[5,"mpc_table",703],[5,"mpc_cpu",703],[5,"mpc_bus",703],[5,"mpc_ioapic",703],[5,"mpc_intsrc",703],[5,"mpc_lintsrc",703],[5,"mpc_oemtable",703],[5,"Cmdline",12202],[5,"Balloon",3309],[8,"EventManager",0],[6,"StartMicrovmError",1471],[6,"BlockDeviceType",10673],[10,"Iterator",12203],[10,"Debug",12179],[5,"TimestampUs",12204],[5,"Entropy",5070],[5,"Net",3907],[5,"VsockMuxer",6663],[5,"Vsock",6346],[10,"VirtioDevice",3596],[10,"MutEventSubscriber",12205],[5,"VmResources",9972],[8,"BpfThreadMap",12206],[5,"Uffd",12207],[6,"BuildMicrovmFromSnapshotError",1471],[5,"VmConfig",10870],[5,"CustomCpuTemplate",2318],[5,"Vm",12074],[5,"EventFd",12208],[6,"KvmCapability",1575],[6,"CpuConfigurationError",1678],[6,"GetCpuTemplateError",1575],[6,"Error",12202],[6,"RestoreStateError",12074],[5,"GetTscError",11896],[6,"InstallationError",12206],[6,"VmConfigError",10870],[5,"SetTscError",11896],[10,"ReadVolatile",12209],[10,"Seek",12191],[5,"BootConfig",10601],[5,"Stdin",12210],[5,"Stdout",12210],[5,"RegisterValueFilter",1575],[10,"Numeric",1575],[6,"CpuTemplateType",1575],[10,"Clone",12211],[10,"Default",12212],[10,"Deserializer",12213],[10,"PartialEq",12194],[10,"GetCpuTemplate",1575],[6,"Cow",12214],[10,"Hash",12192],[10,"Serializer",12215],[10,"LowerHex",12179],[6,"Cpuid",1719],[5,"AmdCpuid",1907],[10,"CpuidTrait",1719],[1,"array"],[5,"MissingBrandStringLeaves",1719],[5,"CpuidKey",1719],[5,"KvmCpuidFlags",1719],[5,"CpuidEntry",1719],[5,"CpuidRegisters",1719],[5,"CpuidResult",12216],[6,"CpuidTryFromKvmCpuid",1719],[5,"BTreeMap",12217],[5,"IntelCpuid",2080],[6,"NormalizeCpuidError",2180],[8,"CpuId",12200],[6,"ExtendedCacheFeaturesError",2180],[6,"ExtendedTopologyError",2180],[6,"FeatureInformationError",2180],[6,"VendorIdError",2180],[6,"NormalizeCpuidError",1959],[6,"PassthroughCacheTopologyError",1959],[6,"FeatureEntryError",1959],[6,"ExtendedApicIdError",1959],[6,"ExtendedCacheTopologyError",1959],[5,"HashSet",12218],[6,"NormalizeCpuidError",2117],[6,"DeterministicCacheError",2117],[6,"DefaultBrandStringError",2117],[6,"GetMaxCpusPerPackageError",2180],[5,"CheckedAssignError",2180],[5,"Range",12219],[6,"CpuidRegister",2318],[5,"CpuidRegisterModifier",2318],[5,"CpuidLeafModifier",2318],[5,"RegisterModifier",2318],[5,"Error",12220],[6,"StaticCpuTemplate",2434],[6,"LegacyDeviceError",2482],[5,"PortIODeviceManager",2482],[6,"BusError",2871],[5,"VmFd",12221],[5,"MMIODeviceInfo",2526],[6,"MmioError",2526],[5,"MMIODeviceManager",2526],[17,"Output"],[10,"FnMut",12222],[5,"HashMap",12223],[5,"BootTimer",3172],[5,"MmioTransport",3814],[10,"FnOnce",12222],[5,"ConnectedBalloonState",2601],[5,"ConnectedVirtioBlockState",2601],[5,"ConnectedVhostUserBlockState",2601],[5,"ConnectedNetState",2601],[5,"ConnectedVsockState",2601],[5,"ConnectedEntropyState",2601],[6,"MmdsVersionState",2601],[5,"DeviceStates",2601],[5,"MMIODevManagerConstructorArgs",2601],[6,"DevicePersistError",2601],[6,"SharedDeviceType",2601],[6,"VsockError",6098],[6,"NetPersistError",4683],[6,"VirtioBlockError",5480],[6,"EntropyPersistError",5170],[6,"VhostUserBlockError",5297],[6,"VsockUnixBackendError",6618],[6,"MmdsConfigError",11001],[6,"MmdsVersion",9262],[6,"DeviceError",2842],[5,"NetDeviceMetrics",4627],[5,"BusRange",2871],[5,"Bus",2871],[5,"I8042Device",2990],[8,"SerialDevice",3073],[5,"EventFdTrigger",2952],[8,"Result",12180],[6,"I8042Error",2990],[5,"I8042DeviceMetrics",2990],[5,"SerialEventsWrapper",3073],[5,"SerialWrapper",3073],[8,"RawFd",12224],[10,"AsRawFd",12224],[10,"Send",12225],[6,"SerialOut",3073],[5,"SerialDeviceMetrics",3073],[6,"RawIOError",3073],[10,"Trigger",12226],[10,"SerialEvents",12227],[10,"RawIOHandler",3073],[10,"AsAny",3188],[6,"ActivateError",3188],[6,"RemoveRegionError",3229],[5,"ConfigSpace",3309],[5,"BalloonStat",3309],[5,"AtomicU32",12228],[5,"Queue",4939],[5,"BalloonDeviceMetrics",3468],[5,"BalloonConfigSpaceState",3489],[5,"BalloonStatsState",3489],[5,"BalloonState",3489],[5,"BalloonConstructorArgs",3489],[6,"CacheType",3573],[6,"DeviceState",3596],[6,"IrqType",3596],[5,"IrqTrigger",3596],[5,"virtio_net_hdr_v1",3694],[5,"IoVecBuffer",3756],[5,"iovec",12229],[6,"IoVecError",3756],[5,"IoVecBufferMut",3756],[6,"Error",12230],[5,"DescriptorChain",4939],[6,"Error",12231],[10,"WriteVolatile",12209],[5,"MutexGuard",12182],[6,"NetQueue",3853],[6,"NetError",3853],[5,"ConfigSpace",3907],[5,"Ipv4Addr",12232],[5,"Mmds",9262],[6,"FrontendError",3907],[5,"MacAddr",12233],[5,"MmdsNetworkStack",9349],[5,"RateLimiter",9801],[5,"Tap",4764],[5,"sock_filter",4033],[5,"sock_fprog",4033],[5,"sockaddr",4186],[5,"sync_serial_settings",4186],[5,"te1_settings",4186],[5,"raw_hdlc_proto",4186],[5,"fr_proto",4186],[5,"fr_proto_pvc",4186],[5,"fr_proto_pvc_info",4186],[5,"cisco_proto",4186],[5,"ifmap",4186],[5,"if_settings",4186],[20,"if_settings__bindgen_ty_1",4186],[5,"ifreq",4186],[20,"ifreq__bindgen_ty_1",4186],[20,"ifreq__bindgen_ty_2",4186],[5,"ifconf",4186],[20,"ifconf__bindgen_ty_1",4186],[5,"NetMetricsPerDevice",4627],[5,"NetConfigSpaceState",4683],[5,"NetState",4683],[5,"NetConstructorArgs",4683],[6,"PersistError",4831],[8,"c_ulong",12234],[1,"i32"],[6,"TapError",4764],[5,"IfReqBuilder",4764],[1,"i16"],[8,"c_uint",12234],[8,"c_int",12234],[5,"VirtioDeviceState",4831],[5,"QueueState",4831],[5,"MmioTransportState",4831],[5,"MmioTransportConstructorArgs",4831],[6,"QueueError",4939],[10,"GuestMemory",11362],[5,"Wrapping",12235],[5,"Descriptor",4939],[5,"DescriptorIterator",4939],[6,"EntropyError",5070],[5,"Unspecified",12236],[5,"EntropyDeviceMetrics",5148],[5,"EntropyState",5170],[5,"EntropyConstructorArgs",5170],[5,"VhostUserHandleImpl",5222],[10,"VhostUserHandleBackend",5222],[6,"VhostUserError",5222],[5,"UnixStream",12237],[5,"VhostUserConfigFlags",12238],[5,"VhostUserConfig",12238],[8,"VhostUserConfigPayload",12238],[6,"Error",12239],[5,"VhostUserProtocolFeatures",12238],[5,"VhostUserHeaderFlag",12238],[5,"VhostUserMemoryRegionInfo",12240],[5,"VringConfigData",12240],[5,"VhostUserBlockImpl",5322],[5,"VhostUserBlockConfig",5322],[8,"VhostUserBlock",5322],[5,"Frontend",12241],[5,"BlockDeviceConfig",10673],[5,"VhostUserBlockState",5411],[5,"VhostUserBlockConstructorArgs",5411],[5,"VhostUserDeviceMetrics",5448],[5,"VirtioBlock",5523],[5,"BlockDeviceMetrics",5839],[5,"File",12242],[6,"FileEngineType",5523],[5,"VirtioBlockConfig",5523],[5,"DiskProperties",5523],[6,"FileEngineTypeState",5885],[6,"Error",12243],[6,"FileEngine",5654],[6,"BlockIoError",5654],[5,"UserDataOk",5654],[6,"FileEngineOk",5654],[5,"UserDataError",5654],[5,"AsyncFileEngine",5741],[5,"WrappedUserData",5741],[5,"Cqe",8335],[6,"AsyncIoError",5741],[5,"IoUring",7773],[6,"IoUringError",7773],[5,"SyncFileEngine",5804],[6,"SyncIoError",5804],[5,"BlockMetricsPerDevice",5839],[5,"VirtioBlockState",5885],[5,"VirtioBlockConstructorArgs",5885],[6,"RequestType",5945],[5,"RequestHeader",5945],[5,"Request",5945],[5,"PendingRequest",5945],[6,"IoErr",5945],[5,"FinishedRequest",5945],[6,"ProcessingResult",5945],[6,"Status",5945],[10,"VsockEpollListener",6098],[5,"EventSet",12244],[10,"VsockChannel",6098],[5,"VsockPacket",6439],[6,"ConnState",6174],[6,"PendingRx",6174],[5,"PendingRxSet",6174],[6,"VsockCsmError",6174],[5,"VsockConnection",6255],[10,"VsockConnectionBackend",6255],[5,"Instant",12245],[5,"TxBuf",6306],[5,"VolatileSlice",12231],[10,"BitmapSlice",11362],[10,"VsockBackend",6098],[5,"VsockDeviceMetrics",6404],[5,"VsockPacketHeader",6439],[6,"VsockPacketBuffer",6439],[5,"VsockState",6519],[5,"VsockFrontendState",6519],[6,"VsockBackendState",6519],[5,"VsockUdsState",6519],[5,"VsockConstructorArgs",6519],[5,"VsockUdsConstructorArgs",6519],[5,"ConnMapKey",6663],[6,"EpollListener",6663],[6,"MuxerRx",6663],[5,"MuxerKillQItem",6761],[5,"MuxerKillQ",6761],[5,"MuxerRxQ",6798],[10,"ByteBuffer",6821],[6,"ChecksumProto",6837],[10,"NetworkBytes",6954],[5,"TcpSegment",7106],[5,"Incomplete",6837],[10,"NetworkBytesMut",6954],[5,"UdpDatagram",7250],[5,"IPv4Packet",7026],[5,"EthernetFrame",6978],[6,"Error",6882],[5,"EthIPv4ArpFrame",6882],[5,"InnerBytes",6954],[17,"Target"],[10,"Deref",12246],[10,"DerefMut",12246],[6,"Error",6978],[6,"Error",7026],[5,"Flags",7106],[6,"Error",7106],[5,"NonZeroU16",12247],[10,"Sized",12225],[6,"Error",7250],[6,"RstConfig",7301],[6,"NextSegmentStatus",7301],[5,"Connection",7342],[5,"ConnStatusFlags",7342],[5,"RecvStatusFlags",7342],[6,"PassiveOpenError",7342],[6,"RecvError",7342],[6,"WriteNextError",7342],[5,"NonZeroU64",12247],[5,"NonZeroUsize",12247],[8,"PayloadSource",7342],[6,"StatusCode",12248],[5,"Body",12249],[5,"Response",12248],[5,"Endpoint",7597],[5,"Request",12250],[5,"TcpIPv4Handler",7631],[5,"ConnectionTuple",7631],[6,"RecvEvent",7631],[6,"WriteEvent",7631],[6,"RecvError",7631],[6,"WriteNextError",7631],[6,"RecvSegmentOutcome",7631],[5,"io_uring_params",7848],[6,"Restriction",8478],[5,"Operation",8288],[5,"__IncompleteArrayField",7848],[5,"io_uring_probe",7848],[5,"io_uring_sqe",7848],[20,"io_uring_sqe__bindgen_ty_1",7848],[20,"io_uring_sqe__bindgen_ty_2",7848],[20,"io_uring_sqe__bindgen_ty_3",7848],[20,"io_uring_sqe__bindgen_ty_4",7848],[5,"io_uring_sqe__bindgen_ty_4__bindgen_ty_1",7848],[20,"io_uring_sqe__bindgen_ty_4__bindgen_ty_1__bindgen_ty_1",7848],[5,"io_uring_cqe",7848],[5,"io_sqring_offsets",7848],[5,"io_cqring_offsets",7848],[5,"io_uring_files_update",7848],[5,"io_uring_probe_op",7848],[5,"io_uring_restriction",7848],[20,"io_uring_restriction__bindgen_ty_1",7848],[6,"OpCode",8288],[8,"FixedFd",8288],[5,"Sqe",8353],[5,"CompletionQueue",8372],[6,"CQueueError",8372],[6,"MmapError",8413],[1,"i64"],[5,"MmapRegion",11362],[5,"SubmissionQueue",8430],[6,"SQueueError",8430],[10,"IncMetric",8710],[6,"Level",8491],[6,"LevelFilter",12251],[10,"StoreMetric",8710],[5,"Error",12179],[5,"SharedStoreMetric",8710],[5,"LoggerConfig",8577],[6,"LevelFilter",8577],[5,"Logger",8577],[5,"Metadata",12251],[5,"LevelFilterFromStrError",8577],[5,"LoggerUpdateError",8577],[5,"LogFilter",8577],[5,"LogFormat",8577],[5,"LoggerConfiguration",8577],[8,"LoggerInitError",8577],[5,"Record",12251],[5,"SharedIncMetric",8710],[5,"ApiServerMetrics",8710],[5,"GetRequestsMetrics",8710],[5,"PutRequestsMetrics",8710],[5,"PatchRequestsMetrics",8710],[5,"DeprecatedApiMetrics",8710],[5,"LoggerSystemMetrics",8710],[5,"MmdsMetrics",8710],[5,"PerformanceMetrics",8710],[5,"SeccompMetrics",8710],[5,"SignalMetrics",8710],[5,"LatencyAggregateMetrics",8710],[5,"VcpuMetrics",8710],[5,"VmmMetrics",8710],[5,"SerializeToUtcTimestampMs",8710],[5,"BlockMetricsSerializeProxy",8710],[5,"NetMetricsSerializeProxy",8710],[5,"VhostUserMetricsSerializeProxy",8710],[5,"BalloonMetricsSerializeProxy",8710],[5,"EntropyMetricsSerializeProxy",8710],[5,"VsockMetricsSerializeProxy",8710],[5,"LegacyDevMetricsSerializeProxy",8710],[5,"FirecrackerMetrics",8710],[5,"Metrics",8710],[10,"Serialize",12215],[5,"LatencyMetricsRecorder",8710],[6,"MetricsError",8710],[5,"ProcessTimeReporter",8710],[6,"Version",12249],[6,"Error",9228],[6,"Value",12252],[5,"TokenHeaders",9533],[6,"Error",9262],[6,"OutputFormat",9262],[6,"MediaType",12253],[6,"Error",9453],[6,"WriteArpFrameError",9349],[6,"WritePacketError",9349],[5,"MmdsNetworkStackState",9431],[5,"Token",9453],[5,"TokenAuthority",9453],[8,"Aes256Gcm",12254],[8,"Error",12255],[6,"RequestError",12249],[5,"GuestRegionUffdMapping",9556],[5,"CreateSnapshotParams",11125],[6,"CreateSnapshotError",9556],[5,"BootSourceConfig",10601],[6,"SnapShotStateSanityCheckError",9556],[6,"RestoreFromSnapshotError",9556],[6,"RestoreFromSnapshotGuestMemoryError",9556],[6,"SnapshotStateFromFileError",9556],[6,"GuestMemoryFromFileError",9556],[6,"GuestMemoryFromUffdError",9556],[6,"Error",12256],[6,"MemoryError",11362],[5,"Path",12257],[5,"GuestMemoryState",11362],[5,"LoadSnapshotParams",11125],[6,"SnapshotType",11125],[6,"TimerState",12258],[5,"TokenBucket",9801],[6,"BucketReduction",9801],[6,"TokenType",9801],[6,"Error",9801],[5,"TokenBucketState",9931],[5,"RateLimiterState",9931],[6,"BootSourceConfigError",10601],[5,"EntropyDeviceConfig",10770],[6,"EntropyDeviceError",10770],[5,"NetworkInterfaceConfig",11042],[6,"NetworkInterfaceError",11042],[5,"VmmConfig",9972],[6,"ResourcesError",9972],[6,"VsockConfigError",11284],[6,"MetricsConfigError",10967],[6,"BalloonConfigError",10496],[6,"DriveError",10673],[5,"MockVmResources",10334],[5,"MmdsConfig",11001],[5,"BalloonDeviceConfig",10496],[5,"VsockDeviceConfig",11284],[5,"MachineConfigUpdate",10870],[5,"PrebootApiController",10084],[6,"VmmData",10084],[6,"VmmActionError",10084],[8,"ApiRequest",10084],[5,"Receiver",12259],[8,"ApiResponse",10084],[5,"Sender",12259],[6,"BuildMicrovmFromRequestsError",10084],[5,"RuntimeApiController",10084],[6,"VmmAction",10084],[6,"LoadSnapshotError",10084],[10,"MmdsRequestHandler",10084],[5,"BlockDeviceUpdateConfig",10673],[5,"NetworkInterfaceUpdateConfig",11042],[8,"c_int",12229],[5,"siginfo_t",12260],[8,"Result",12181],[6,"c_void",12261],[5,"MockSerialInput",10319],[5,"MockBootSourceConfig",10334],[5,"MockVmConfig",10334],[5,"MachineConfig",10870],[5,"TempDir",12262],[5,"VERSION_MAP",10389],[5,"FC_VERSION_TO_SNAP_VERSION",10389],[5,"Version",11125],[5,"TokenBucketConfig",10424],[5,"RateLimiterConfig",10424],[5,"RateLimiterUpdate",10424],[5,"BalloonUpdateConfig",10496],[5,"BalloonUpdateStatsConfig",10496],[5,"BalloonBuilder",10496],[5,"BootSource",10601],[5,"BlockBuilder",10673],[5,"EntropyDeviceBuilder",10770],[6,"VmState",10827],[10,"Deserialize",12213],[10,"From",12263],[10,"PartialOrd",12194],[5,"MetricsConfig",10967],[5,"NetBuilder",11042],[5,"Iter",12264],[5,"IterMut",12264],[6,"MemBackendType",11125],[5,"LoadSnapshotConfig",11125],[5,"MemBackendConfig",11125],[6,"VmState",11125],[5,"Vm",11125],[5,"Error",12265],[5,"VsockBuilder",11284],[5,"VsockAndUnixPath",11284],[17,"B"],[10,"GuestMemoryRegion",11362],[5,"MemoryRegionAddress",11362],[10,"Bitmap",11362],[17,"R"],[17,"I"],[10,"GuestMemoryIterator",12230],[5,"FileOffset",11362],[5,"MmapRegionBuilder",11362],[6,"Error",12266],[10,"NewBitmap",12267],[10,"Address",11362],[5,"AtomicBitmap",11362],[5,"Memfd",12268],[10,"GuestMemoryExtension",11362],[5,"GuestMemoryRegionState",11362],[17,"E"],[10,"Bytes",11362],[6,"Ordering",12228],[10,"AtomicAccess",12269],[10,"Fn",12222],[6,"VcpuEvent",11722],[6,"VcpuEmulation",11722],[5,"VcpuHandle",11722],[6,"VcpuExit",12196],[5,"StateMachine",12270],[6,"VcpuResponse",11722],[5,"VcpuConfig",11722],[5,"JoinHandle",12271],[8,"BpfProgramRef",12206],[5,"Barrier",12272],[5,"KvmVcpu",11896],[6,"KvmVcpuConfigureError",11896],[8,"Msrs",12200],[6,"KvmVcpuError",11896],[5,"VmState",12074],[6,"VmError",12074],[8,"IoVecVec",3756],[8,"VhostUserHandle",5222],[5,"VhostUserMetricsPerDevice",5448],[15,"PartialTransfer",6092],[15,"IoErr",6094],[15,"Ok",6094],[15,"Unsupported",6094],[8,"MuxerConnection",6618],[15,"Connection",6757],[15,"RstPkt",6759],[8,"ProbeWrapper",8366],[8,"FcLineWriter",8491],[8,"MutexBalloon",10496],[8,"MutexVsockUnix",11284],[8,"GuestMmapRegion",11362],[8,"GuestRegionMmap",11362],[10,"AddressValue",11704],[8,"VcpuCell",11722]],"b":[[106,"impl-Display-for-VmmError"],[107,"impl-Debug-for-VmmError"],[108,"impl-Debug-for-EmulateSerialInitError"],[109,"impl-Display-for-EmulateSerialInitError"],[110,"impl-Display-for-StartVcpusError"],[111,"impl-Debug-for-StartVcpusError"],[112,"impl-Display-for-DumpCpuConfigError"],[113,"impl-Debug-for-DumpCpuConfigError"],[120,"impl-From%3CStartThreadedError%3E-for-StartVcpusError"],[121,"impl-From%3CError%3E-for-StartVcpusError"],[122,"impl-From%3CVcpuError%3E-for-DumpCpuConfigError"],[123,"impl-From%3CVcpuSendEventError%3E-for-DumpCpuConfigError"],[231,"impl-Display-for-DeviceType"],[232,"impl-Debug-for-DeviceType"],[276,"impl-Debug-for-ConfigurationError"],[277,"impl-Display-for-ConfigurationError"],[341,"impl-Display-for-InterruptError"],[342,"impl-Debug-for-InterruptError"],[397,"impl-Display-for-MptableError"],[398,"impl-Debug-for-MptableError"],[464,"impl-Flags-for-ArchCapaMSRFlags"],[465,"impl-ArchCapaMSRFlags"],[483,"impl-Debug-for-MsrError"],[484,"impl-Display-for-MsrError"],[486,"impl-UpperHex-for-ArchCapaMSRFlags"],[487,"impl-LowerHex-for-ArchCapaMSRFlags"],[488,"impl-Octal-for-ArchCapaMSRFlags"],[489,"impl-Binary-for-ArchCapaMSRFlags"],[491,"impl-From%3CError%3E-for-MsrError"],[492,"impl-From%3CGetCpuidError%3E-for-MsrError"],[496,"impl-ArchCapaMSRFlags"],[497,"impl-Flags-for-ArchCapaMSRFlags"],[589,"impl-Display-for-RegsError"],[590,"impl-Debug-for-RegsError"],[591,"impl-Display-for-SetupFpuError"],[592,"impl-Debug-for-SetupFpuError"],[593,"impl-Display-for-SetupRegistersError"],[594,"impl-Debug-for-SetupRegistersError"],[595,"impl-Display-for-SetupSpecialRegistersError"],[596,"impl-Debug-for-SetupSpecialRegistersError"],[1534,"impl-Debug-for-StartMicrovmError"],[1535,"impl-Display-for-StartMicrovmError"],[1536,"impl-Debug-for-BuildMicrovmFromSnapshotError"],[1537,"impl-Display-for-BuildMicrovmFromSnapshotError"],[1539,"impl-From%3CCpuConfigurationError%3E-for-StartMicrovmError"],[1540,"impl-From%3CGetCpuTemplateError%3E-for-StartMicrovmError"],[1541,"impl-From%3CError%3E-for-StartMicrovmError"],[1542,"impl-From%3CStartVcpusError%3E-for-BuildMicrovmFromSnapshotError"],[1543,"impl-From%3CVcpuError%3E-for-BuildMicrovmFromSnapshotError"],[1544,"impl-From%3CRestoreStateError%3E-for-BuildMicrovmFromSnapshotError"],[1545,"impl-From%3CGetTscError%3E-for-BuildMicrovmFromSnapshotError"],[1546,"impl-From%3CEmulateSerialInitError%3E-for-BuildMicrovmFromSnapshotError"],[1547,"impl-From%3CInstallationError%3E-for-BuildMicrovmFromSnapshotError"],[1548,"impl-From%3CError%3E-for-BuildMicrovmFromSnapshotError"],[1549,"impl-From%3CVmConfigError%3E-for-BuildMicrovmFromSnapshotError"],[1551,"impl-From%3CSetTscError%3E-for-BuildMicrovmFromSnapshotError"],[1552,"impl-From%3CStartMicrovmError%3E-for-BuildMicrovmFromSnapshotError"],[1553,"impl-From%3CMicrovmStateError%3E-for-BuildMicrovmFromSnapshotError"],[1621,"impl-Deserialize%3C\'de%3E-for-KvmCapability"],[1622,"impl-Versionize-for-KvmCapability"],[1629,"impl-Debug-for-GetCpuTemplateError"],[1630,"impl-Display-for-GetCpuTemplateError"],[1646,"impl-Versionize-for-KvmCapability"],[1647,"impl-Serialize-for-KvmCapability"],[1701,"impl-Debug-for-CpuConfigurationError"],[1702,"impl-Display-for-CpuConfigurationError"],[1826,"impl-Debug-for-MissingBrandStringLeaves"],[1827,"impl-Display-for-MissingBrandStringLeaves"],[1828,"impl-Debug-for-CpuidTryFromKvmCpuid"],[1829,"impl-Display-for-CpuidTryFromKvmCpuid"],[2015,"impl-Display-for-NormalizeCpuidError"],[2016,"impl-Debug-for-NormalizeCpuidError"],[2017,"impl-Display-for-PassthroughCacheTopologyError"],[2018,"impl-Debug-for-PassthroughCacheTopologyError"],[2019,"impl-Display-for-FeatureEntryError"],[2020,"impl-Debug-for-FeatureEntryError"],[2021,"impl-Debug-for-ExtendedCacheTopologyError"],[2022,"impl-Display-for-ExtendedCacheTopologyError"],[2023,"impl-Debug-for-ExtendedApicIdError"],[2024,"impl-Display-for-ExtendedApicIdError"],[2026,"impl-From%3CExtendedApicIdError%3E-for-NormalizeCpuidError"],[2027,"impl-From%3CFeatureEntryError%3E-for-NormalizeCpuidError"],[2028,"impl-From%3CPassthroughCacheTopologyError%3E-for-NormalizeCpuidError"],[2029,"impl-From%3CExtendedCacheTopologyError%3E-for-NormalizeCpuidError"],[2069,"impl-Debug-for-GetCpuidError"],[2070,"impl-Display-for-GetCpuidError"],[2154,"impl-Debug-for-NormalizeCpuidError"],[2155,"impl-Display-for-NormalizeCpuidError"],[2156,"impl-Display-for-DeterministicCacheError"],[2157,"impl-Debug-for-DeterministicCacheError"],[2158,"impl-Debug-for-DefaultBrandStringError"],[2159,"impl-Display-for-DefaultBrandStringError"],[2250,"impl-Display-for-NormalizeCpuidError"],[2251,"impl-Debug-for-NormalizeCpuidError"],[2252,"impl-Display-for-VendorIdError"],[2253,"impl-Debug-for-VendorIdError"],[2254,"impl-Display-for-FeatureInformationError"],[2255,"impl-Debug-for-FeatureInformationError"],[2256,"impl-Debug-for-GetMaxCpusPerPackageError"],[2257,"impl-Display-for-GetMaxCpusPerPackageError"],[2258,"impl-Debug-for-ExtendedTopologyError"],[2259,"impl-Display-for-ExtendedTopologyError"],[2260,"impl-Debug-for-ExtendedCacheFeaturesError"],[2261,"impl-Display-for-ExtendedCacheFeaturesError"],[2262,"impl-Debug-for-CheckedAssignError"],[2263,"impl-Display-for-CheckedAssignError"],[2264,"impl-From%3CExtendedTopologyError%3E-for-NormalizeCpuidError"],[2266,"impl-From%3CVendorIdError%3E-for-NormalizeCpuidError"],[2267,"impl-From%3CNormalizeCpuidError%3E-for-NormalizeCpuidError"],[2268,"impl-From%3CFeatureInformationError%3E-for-NormalizeCpuidError"],[2269,"impl-From%3CExtendedCacheFeaturesError%3E-for-NormalizeCpuidError"],[2270,"impl-From%3CNormalizeCpuidError%3E-for-NormalizeCpuidError"],[2419,"impl-TryFrom%3C%26str%3E-for-CustomCpuTemplate"],[2421,"impl-TryFrom%3C%26%5Bu8%5D%3E-for-CustomCpuTemplate"],[2449,"impl-Deserialize%3C\'de%3E-for-StaticCpuTemplate"],[2450,"impl-Versionize-for-StaticCpuTemplate"],[2452,"impl-Display-for-StaticCpuTemplate"],[2453,"impl-Debug-for-StaticCpuTemplate"],[2455,"impl-From%3C%26CpuTemplateType%3E-for-StaticCpuTemplate"],[2456,"impl-From%3C%26Option%3CCpuTemplateType%3E%3E-for-StaticCpuTemplate"],[2459,"impl-Versionize-for-StaticCpuTemplate"],[2460,"impl-Serialize-for-StaticCpuTemplate"],[2504,"impl-Display-for-LegacyDeviceError"],[2505,"impl-Debug-for-LegacyDeviceError"],[2508,"impl-From%3CError%3E-for-LegacyDeviceError"],[2509,"impl-From%3CBusError%3E-for-LegacyDeviceError"],[2561,"impl-Debug-for-MmioError"],[2562,"impl-Display-for-MmioError"],[2724,"impl-Debug-for-DevicePersistError"],[2725,"impl-Display-for-DevicePersistError"],[2737,"impl-From%3CVsockError%3E-for-DevicePersistError"],[2739,"impl-From%3CNetPersistError%3E-for-DevicePersistError"],[2740,"impl-From%3CVirtioBlockError%3E-for-DevicePersistError"],[2741,"impl-From%3CEntropyPersistError%3E-for-DevicePersistError"],[2742,"impl-From%3CVhostUserBlockError%3E-for-DevicePersistError"],[2743,"impl-From%3CMmioError%3E-for-DevicePersistError"],[2744,"impl-From%3CVsockUnixBackendError%3E-for-DevicePersistError"],[2745,"impl-From%3CBalloonError%3E-for-DevicePersistError"],[2746,"impl-From%3CMmdsConfigError%3E-for-DevicePersistError"],[2859,"impl-Debug-for-DeviceError"],[2860,"impl-Display-for-DeviceError"],[2908,"impl-Display-for-BusError"],[2909,"impl-Debug-for-BusError"],[3036,"impl-Debug-for-I8042Error"],[3037,"impl-Display-for-I8042Error"],[3117,"impl-Display-for-RawIOError"],[3118,"impl-Debug-for-RawIOError"],[3209,"impl-Display-for-ActivateError"],[3210,"impl-Debug-for-ActivateError"],[3289,"impl-Display-for-BalloonError"],[3290,"impl-Debug-for-BalloonError"],[3291,"impl-Display-for-RemoveRegionError"],[3292,"impl-Debug-for-RemoveRegionError"],[3583,"impl-Versionize-for-CacheType"],[3584,"impl-Deserialize%3C\'de%3E-for-CacheType"],[3589,"impl-Versionize-for-CacheType"],[3590,"impl-Serialize-for-CacheType"],[3779,"impl-Display-for-IoVecError"],[3780,"impl-Debug-for-IoVecError"],[3888,"impl-Display-for-NetError"],[3889,"impl-Debug-for-NetError"],[3944,"impl-Debug-for-FrontendError"],[3945,"impl-Display-for-FrontendError"],[4721,"impl-Display-for-NetPersistError"],[4722,"impl-Debug-for-NetPersistError"],[4727,"impl-From%3CPersistError%3E-for-NetPersistError"],[4728,"impl-From%3CNetError%3E-for-NetPersistError"],[4729,"impl-From%3CError%3E-for-NetPersistError"],[4799,"impl-Debug-for-TapError"],[4800,"impl-Display-for-TapError"],[4884,"impl-Display-for-PersistError"],[4885,"impl-Debug-for-PersistError"],[4989,"impl-Debug-for-QueueError"],[4990,"impl-Display-for-QueueError"],[5094,"impl-Debug-for-EntropyError"],[5095,"impl-Display-for-EntropyError"],[5098,"impl-From%3CGuestMemoryError%3E-for-EntropyError"],[5099,"impl-From%3CUnspecified%3E-for-EntropyError"],[5100,"impl-From%3CError%3E-for-EntropyError"],[5133,"impl-VirtioDevice-for-Entropy"],[5134,"impl-Entropy"],[5194,"impl-Debug-for-EntropyPersistError"],[5195,"impl-Display-for-EntropyPersistError"],[5198,"impl-From%3CEntropyError%3E-for-EntropyPersistError"],[5199,"impl-From%3CError%3E-for-EntropyPersistError"],[5200,"impl-From%3CPersistError%3E-for-EntropyPersistError"],[5254,"impl-Display-for-VhostUserError"],[5255,"impl-Debug-for-VhostUserError"],[5313,"impl-Display-for-VhostUserBlockError"],[5314,"impl-Debug-for-VhostUserBlockError"],[5511,"impl-Display-for-VirtioBlockError"],[5512,"impl-Debug-for-VirtioBlockError"],[5703,"impl-Display-for-BlockIoError"],[5704,"impl-Debug-for-BlockIoError"],[5770,"impl-Debug-for-AsyncIoError"],[5771,"impl-Display-for-AsyncIoError"],[5821,"impl-Debug-for-SyncIoError"],[5822,"impl-Display-for-SyncIoError"],[6030,"impl-From%3CGuestMemoryError%3E-for-IoErr"],[6031,"impl-From%3C(u32,+u32)%3E-for-IoErr"],[6032,"impl-From%3CBlockIoError%3E-for-IoErr"],[6146,"impl-Debug-for-VsockError"],[6147,"impl-Display-for-VsockError"],[6221,"impl-Display-for-VsockCsmError"],[6222,"impl-Debug-for-VsockCsmError"],[6636,"impl-Debug-for-VsockUnixBackendError"],[6637,"impl-Display-for-VsockUnixBackendError"],[6856,"impl-Incomplete%3CTcpSegment%3C\'a,+T%3E%3E"],[6857,"impl-Incomplete%3CUdpDatagram%3C\'a,+T%3E%3E"],[6880,"impl-Incomplete%3CIPv4Packet%3C\'a,+T%3E%3E"],[6881,"impl-Incomplete%3CEthernetFrame%3C\'a,+T%3E%3E"],[6915,"impl-Display-for-Error"],[6916,"impl-Debug-for-Error"],[7000,"impl-Display-for-Error"],[7001,"impl-Debug-for-Error"],[7065,"impl-Debug-for-Error"],[7066,"impl-Display-for-Error"],[7152,"impl-Flags"],[7153,"impl-Flags-for-Flags"],[7176,"impl-UpperHex-for-Flags"],[7177,"impl-LowerHex-for-Flags"],[7178,"impl-Binary-for-Flags"],[7179,"impl-Octal-for-Flags"],[7180,"impl-Debug-for-Flags"],[7181,"impl-Display-for-Error"],[7182,"impl-Debug-for-Error"],[7188,"impl-Flags-for-Flags"],[7189,"impl-Flags"],[7276,"impl-Debug-for-Error"],[7277,"impl-Display-for-Error"],[7405,"impl-ConnStatusFlags"],[7406,"impl-Flags-for-ConnStatusFlags"],[7407,"impl-RecvStatusFlags"],[7408,"impl-Flags-for-RecvStatusFlags"],[7461,"impl-UpperHex-for-ConnStatusFlags"],[7462,"impl-Octal-for-ConnStatusFlags"],[7463,"impl-Binary-for-ConnStatusFlags"],[7464,"impl-LowerHex-for-ConnStatusFlags"],[7465,"impl-Debug-for-ConnStatusFlags"],[7466,"impl-Debug-for-RecvStatusFlags"],[7467,"impl-UpperHex-for-RecvStatusFlags"],[7468,"impl-LowerHex-for-RecvStatusFlags"],[7469,"impl-Octal-for-RecvStatusFlags"],[7470,"impl-Binary-for-RecvStatusFlags"],[7471,"impl-Debug-for-PassiveOpenError"],[7472,"impl-Display-for-PassiveOpenError"],[7473,"impl-Display-for-RecvError"],[7474,"impl-Debug-for-RecvError"],[7475,"impl-Display-for-WriteNextError"],[7476,"impl-Debug-for-WriteNextError"],[7487,"impl-Flags-for-ConnStatusFlags"],[7488,"impl-ConnStatusFlags"],[7489,"impl-RecvStatusFlags"],[7490,"impl-Flags-for-RecvStatusFlags"],[7703,"impl-Display-for-RecvError"],[7704,"impl-Debug-for-RecvError"],[7705,"impl-Display-for-WriteNextError"],[7706,"impl-Debug-for-WriteNextError"],[7714,"impl-From%3CError%3E-for-WriteNextError"],[7716,"impl-From%3CError%3E-for-WriteNextError"],[7816,"impl-Debug-for-IoUringError"],[7817,"impl-Display-for-IoUringError"],[8390,"impl-Display-for-CQueueError"],[8391,"impl-Debug-for-CQueueError"],[8393,"impl-From%3CMmapError%3E-for-CQueueError"],[8394,"impl-From%3CVolatileMemoryError%3E-for-CQueueError"],[8421,"impl-Display-for-MmapError"],[8422,"impl-Debug-for-MmapError"],[8447,"impl-Display-for-SQueueError"],[8448,"impl-Debug-for-SQueueError"],[8450,"impl-From%3CVolatileMemoryError%3E-for-SQueueError"],[8451,"impl-From%3CMmapError%3E-for-SQueueError"],[8452,"impl-From%3CError%3E-for-SQueueError"],[8537,"impl-PartialEq-for-Level"],[8538,"impl-PartialEq%3CLevelFilter%3E-for-Level"],[8542,"impl-Debug-for-Level"],[8543,"impl-Display-for-Level"],[8560,"impl-PartialOrd%3CLevelFilter%3E-for-Level"],[8561,"impl-PartialOrd-for-Level"],[8640,"impl-Debug-for-LoggerUpdateError"],[8641,"impl-Display-for-LoggerUpdateError"],[8648,"impl-Display-for-LevelFilterFromStrError"],[8649,"impl-Debug-for-LevelFilterFromStrError"],[8925,"impl-Display-for-MetricsError"],[8926,"impl-Debug-for-MetricsError"],[9243,"impl-Debug-for-Error"],[9244,"impl-Display-for-Error"],[9304,"impl-Debug-for-MmdsVersion"],[9305,"impl-Display-for-MmdsVersion"],[9307,"impl-Display-for-Error"],[9308,"impl-Debug-for-Error"],[9384,"impl-Display-for-WriteArpFrameError"],[9385,"impl-Debug-for-WriteArpFrameError"],[9386,"impl-Display-for-WritePacketError"],[9387,"impl-Debug-for-WritePacketError"],[9389,"impl-From%3CError%3E-for-WriteArpFrameError"],[9390,"impl-From%3CError%3E-for-WriteArpFrameError"],[9393,"impl-From%3CError%3E-for-WritePacketError"],[9394,"impl-From%3CError%3E-for-WritePacketError"],[9395,"impl-From%3CWriteNextError%3E-for-WritePacketError"],[9396,"impl-From%3CError%3E-for-WritePacketError"],[9501,"impl-Debug-for-Error"],[9502,"impl-Display-for-Error"],[9505,"impl-From%3CError%3E-for-Error"],[9506,"impl-From%3CBox%3CErrorKind%3E%3E-for-Error"],[9680,"impl-Debug-for-MicrovmStateError"],[9681,"impl-Display-for-MicrovmStateError"],[9682,"impl-Display-for-CreateSnapshotError"],[9683,"impl-Debug-for-CreateSnapshotError"],[9684,"impl-Display-for-SnapShotStateSanityCheckError"],[9685,"impl-Debug-for-SnapShotStateSanityCheckError"],[9686,"impl-Display-for-RestoreFromSnapshotError"],[9687,"impl-Debug-for-RestoreFromSnapshotError"],[9688,"impl-Display-for-RestoreFromSnapshotGuestMemoryError"],[9689,"impl-Debug-for-RestoreFromSnapshotGuestMemoryError"],[9690,"impl-Debug-for-SnapshotStateFromFileError"],[9691,"impl-Display-for-SnapshotStateFromFileError"],[9692,"impl-Display-for-GuestMemoryFromFileError"],[9693,"impl-Debug-for-GuestMemoryFromFileError"],[9694,"impl-Display-for-GuestMemoryFromUffdError"],[9695,"impl-Debug-for-GuestMemoryFromUffdError"],[9704,"impl-From%3CBuildMicrovmFromSnapshotError%3E-for-RestoreFromSnapshotError"],[9705,"impl-From%3CSnapshotStateFromFileError%3E-for-RestoreFromSnapshotError"],[9706,"impl-From%3CRestoreFromSnapshotGuestMemoryError%3E-for-RestoreFromSnapshotError"],[9707,"impl-From%3CSnapShotStateSanityCheckError%3E-for-RestoreFromSnapshotError"],[9709,"impl-From%3CGuestMemoryFromUffdError%3E-for-RestoreFromSnapshotGuestMemoryError"],[9710,"impl-From%3CGuestMemoryFromFileError%3E-for-RestoreFromSnapshotGuestMemoryError"],[9713,"impl-From%3CMemoryError%3E-for-GuestMemoryFromFileError"],[9714,"impl-From%3CError%3E-for-GuestMemoryFromFileError"],[9716,"impl-From%3CError%3E-for-GuestMemoryFromUffdError"],[9718,"impl-From%3CError%3E-for-GuestMemoryFromUffdError"],[9719,"impl-From%3CMemoryError%3E-for-GuestMemoryFromUffdError"],[9737,"impl-Versionize-for-VmInfo"],[9738,"impl-Serialize-for-VmInfo"],[9865,"impl-Display-for-Error"],[9866,"impl-Debug-for-Error"],[10020,"impl-Debug-for-ResourcesError"],[10021,"impl-Display-for-ResourcesError"],[10024,"impl-From%3CMmdsConfigError%3E-for-ResourcesError"],[10025,"impl-From%3CNetworkInterfaceError%3E-for-ResourcesError"],[10026,"impl-From%3CEntropyDeviceError%3E-for-ResourcesError"],[10027,"impl-From%3CVsockConfigError%3E-for-ResourcesError"],[10028,"impl-From%3CError%3E-for-ResourcesError"],[10029,"impl-From%3CError%3E-for-ResourcesError"],[10030,"impl-From%3CLoggerUpdateError%3E-for-ResourcesError"],[10031,"impl-From%3CMetricsConfigError%3E-for-ResourcesError"],[10032,"impl-From%3CBalloonConfigError%3E-for-ResourcesError"],[10033,"impl-From%3CError%3E-for-ResourcesError"],[10035,"impl-From%3CVmConfigError%3E-for-ResourcesError"],[10036,"impl-From%3CDriveError%3E-for-ResourcesError"],[10037,"impl-From%3CBootSourceConfigError%3E-for-ResourcesError"],[10202,"impl-Debug-for-VmmActionError"],[10203,"impl-Display-for-VmmActionError"],[10205,"impl-Display-for-LoadSnapshotError"],[10206,"impl-Debug-for-LoadSnapshotError"],[10207,"impl-Debug-for-BuildMicrovmFromRequestsError"],[10208,"impl-Display-for-BuildMicrovmFromRequestsError"],[10212,"impl-From%3CEntropyDeviceError%3E-for-VmmActionError"],[10214,"impl-From%3CError%3E-for-VmmActionError"],[10215,"impl-From%3CLoggerUpdateError%3E-for-VmmActionError"],[10216,"impl-From%3CLoadSnapshotError%3E-for-VmmActionError"],[10217,"impl-From%3CDriveError%3E-for-VmmActionError"],[10218,"impl-From%3CNetworkInterfaceError%3E-for-VmmActionError"],[10219,"impl-From%3CStartMicrovmError%3E-for-VmmActionError"],[10220,"impl-From%3CMmdsConfigError%3E-for-VmmActionError"],[10221,"impl-From%3CMetricsConfigError%3E-for-VmmActionError"],[10222,"impl-From%3CVmConfigError%3E-for-VmmActionError"],[10223,"impl-From%3CBalloonConfigError%3E-for-VmmActionError"],[10224,"impl-From%3CCreateSnapshotError%3E-for-VmmActionError"],[10225,"impl-From%3CBootSourceConfigError%3E-for-VmmActionError"],[10226,"impl-From%3CVsockConfigError%3E-for-VmmActionError"],[10227,"impl-From%3CCpuConfigurationError%3E-for-VmmActionError"],[10228,"impl-From%3CVmmError%3E-for-VmmActionError"],[10230,"impl-From%3CVmmError%3E-for-LoadSnapshotError"],[10231,"impl-From%3CRestoreFromSnapshotError%3E-for-LoadSnapshotError"],[10550,"impl-Debug-for-BalloonConfigError"],[10551,"impl-Display-for-BalloonConfigError"],[10557,"impl-From%3CError%3E-for-BalloonConfigError"],[10558,"impl-From%3CBalloonError%3E-for-BalloonConfigError"],[10634,"impl-Deserialize%3C\'de%3E-for-BootSourceConfig"],[10635,"impl-Versionize-for-BootSourceConfig"],[10638,"impl-Debug-for-BootSourceConfigError"],[10639,"impl-Display-for-BootSourceConfigError"],[10656,"impl-Versionize-for-BootSourceConfig"],[10657,"impl-Serialize-for-BootSourceConfig"],[10723,"impl-Debug-for-DriveError"],[10724,"impl-Display-for-DriveError"],[10730,"impl-From%3CVhostUserBlockConfig%3E-for-BlockDeviceConfig"],[10732,"impl-From%3CVirtioBlockConfig%3E-for-BlockDeviceConfig"],[10797,"impl-Display-for-EntropyDeviceError"],[10798,"impl-Debug-for-EntropyDeviceError"],[10803,"impl-From%3CEntropyError%3E-for-EntropyDeviceError"],[10804,"impl-From%3CError%3E-for-EntropyDeviceError"],[10849,"impl-Debug-for-VmState"],[10850,"impl-Display-for-VmState"],[10916,"impl-Debug-for-VmConfigError"],[10917,"impl-Display-for-VmConfigError"],[10918,"impl-Debug-for-MachineConfig"],[10919,"impl-Display-for-MachineConfig"],[10923,"impl-From%3CMockVmConfig%3E-for-MachineConfig"],[10925,"impl-From%3C%26VmConfig%3E-for-MachineConfig"],[10984,"impl-Display-for-MetricsConfigError"],[10985,"impl-Debug-for-MetricsConfigError"],[11021,"impl-Debug-for-MmdsConfigError"],[11022,"impl-Display-for-MmdsConfigError"],[11081,"impl-Debug-for-NetworkInterfaceError"],[11082,"impl-Display-for-NetworkInterfaceError"],[11087,"impl-From%3CVmmError%3E-for-NetworkInterfaceError"],[11088,"impl-From%3CError%3E-for-NetworkInterfaceError"],[11090,"impl-From%3CTapError%3E-for-NetworkInterfaceError"],[11091,"impl-From%3CNetError%3E-for-NetworkInterfaceError"],[11202,"impl-Display-for-Version"],[11203,"impl-Debug-for-Version"],[11316,"impl-Debug-for-VsockConfigError"],[11317,"impl-Display-for-VsockConfigError"],[11321,"impl-From%3CVsockUnixBackendError%3E-for-VsockConfigError"],[11323,"impl-From%3CVsockError%3E-for-VsockConfigError"],[11523,"impl-Debug-for-MemoryError"],[11524,"impl-Display-for-MemoryError"],[11810,"impl-Debug-for-VcpuError"],[11811,"impl-Display-for-VcpuError"],[11813,"impl-Display-for-StartThreadedError"],[11814,"impl-Debug-for-StartThreadedError"],[11818,"impl-Display-for-VcpuSendEventError"],[11819,"impl-Debug-for-VcpuSendEventError"],[11986,"impl-Debug-for-KvmVcpuError"],[11987,"impl-Display-for-KvmVcpuError"],[11988,"impl-Debug-for-GetTscError"],[11989,"impl-Display-for-GetTscError"],[11990,"impl-Debug-for-SetTscError"],[11991,"impl-Display-for-SetTscError"],[11992,"impl-Debug-for-KvmVcpuConfigureError"],[11993,"impl-Display-for-KvmVcpuConfigureError"],[11997,"impl-From%3CMsrError%3E-for-KvmVcpuError"],[11998,"impl-From%3CCpuidTryFromKvmCpuid%3E-for-KvmVcpuError"],[11999,"impl-From%3CError%3E-for-KvmVcpuError"],[12004,"impl-From%3CInterruptError%3E-for-KvmVcpuConfigureError"],[12005,"impl-From%3CMsrError%3E-for-KvmVcpuConfigureError"],[12006,"impl-From%3CSetupSpecialRegistersError%3E-for-KvmVcpuConfigureError"],[12007,"impl-From%3CSetupFpuError%3E-for-KvmVcpuConfigureError"],[12008,"impl-From%3CNormalizeCpuidError%3E-for-KvmVcpuConfigureError"],[12009,"impl-From%3CError%3E-for-KvmVcpuConfigureError"],[12010,"impl-From%3CSetupRegistersError%3E-for-KvmVcpuConfigureError"],[12011,"impl-From%3CError%3E-for-KvmVcpuConfigureError"],[12127,"impl-Debug-for-VmError"],[12128,"impl-Display-for-VmError"],[12129,"impl-Display-for-RestoreStateError"],[12130,"impl-Debug-for-RestoreStateError"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
