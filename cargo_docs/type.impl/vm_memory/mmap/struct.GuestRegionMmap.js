(function() {var type_impls = {
"vmm":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-GuestRegionMmap%3CB%3E\" class=\"impl\"><a href=\"#impl-GuestRegionMmap%3CB%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;B&gt; GuestRegionMmap&lt;B&gt;<div class=\"where\">where\n    B: <a class=\"trait\" href=\"vmm/vstate/memory/trait.Bitmap.html\" title=\"trait vmm::vstate::memory::Bitmap\">Bitmap</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new</a>(\n    mapping: <a class=\"struct\" href=\"vmm/vstate/memory/struct.MmapRegion.html\" title=\"struct vmm::vstate::memory::MmapRegion\">MmapRegion</a>&lt;B&gt;,\n    guest_base: <a class=\"struct\" href=\"vmm/vstate/memory/struct.GuestAddress.html\" title=\"struct vmm::vstate::memory::GuestAddress\">GuestAddress</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;GuestRegionMmap&lt;B&gt;, Error&gt;</h4></section></summary><div class=\"docblock\"><p>Create a new memory-mapped memory region for the guestâ€™s physical memory.</p>\n</div></details></div></details>",0,"vmm::vstate::memory::GuestRegionMmap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-GuestRegionMmap%3CB%3E\" class=\"impl\"><a href=\"#impl-GuestRegionMmap%3CB%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;B&gt; GuestRegionMmap&lt;B&gt;<div class=\"where\">where\n    B: NewBitmap,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_range\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">from_range</a>(\n    addr: <a class=\"struct\" href=\"vmm/vstate/memory/struct.GuestAddress.html\" title=\"struct vmm::vstate::memory::GuestAddress\">GuestAddress</a>,\n    size: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n    file: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"vmm/vstate/memory/struct.FileOffset.html\" title=\"struct vmm::vstate::memory::FileOffset\">FileOffset</a>&gt;\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;GuestRegionMmap&lt;B&gt;, Error&gt;</h4></section></summary><div class=\"docblock\"><p>Create a new memory-mapped memory region from guestâ€™s physical memory, size and file.</p>\n</div></details></div></details>",0,"vmm::vstate::memory::GuestRegionMmap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Bytes%3CMemoryRegionAddress%3E-for-GuestRegionMmap%3CB%3E\" class=\"impl\"><a href=\"#impl-Bytes%3CMemoryRegionAddress%3E-for-GuestRegionMmap%3CB%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;B&gt; <a class=\"trait\" href=\"vmm/vstate/memory/trait.Bytes.html\" title=\"trait vmm::vstate::memory::Bytes\">Bytes</a>&lt;<a class=\"struct\" href=\"vmm/vstate/memory/struct.MemoryRegionAddress.html\" title=\"struct vmm::vstate::memory::MemoryRegionAddress\">MemoryRegionAddress</a>&gt; for GuestRegionMmap&lt;B&gt;<div class=\"where\">where\n    B: <a class=\"trait\" href=\"vmm/vstate/memory/trait.Bitmap.html\" title=\"trait vmm::vstate::memory::Bitmap\">Bitmap</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.write\" class=\"method trait-impl\"><a href=\"#method.write\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"vmm/vstate/memory/trait.Bytes.html#tymethod.write\" class=\"fn\">write</a>(&amp;self, buf: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>], addr: <a class=\"struct\" href=\"vmm/vstate/memory/struct.MemoryRegionAddress.html\" title=\"struct vmm::vstate::memory::MemoryRegionAddress\">MemoryRegionAddress</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, Error&gt;</h4></section></summary><div class=\"docblock\"><h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<ul>\n<li>Write a slice at guest address 0x1200.</li>\n</ul>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>res = gm\n    .write(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>], GuestAddress(<span class=\"number\">0x1200</span>))\n    .expect(<span class=\"string\">\"Could not write to guest memory\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">5</span>, res);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read\" class=\"method trait-impl\"><a href=\"#method.read\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"vmm/vstate/memory/trait.Bytes.html#tymethod.read\" class=\"fn\">read</a>(\n    &amp;self,\n    buf: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>],\n    addr: <a class=\"struct\" href=\"vmm/vstate/memory/struct.MemoryRegionAddress.html\" title=\"struct vmm::vstate::memory::MemoryRegionAddress\">MemoryRegionAddress</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, Error&gt;</h4></section></summary><div class=\"docblock\"><h5 id=\"examples-1\"><a href=\"#examples-1\">Examples</a></h5>\n<ul>\n<li>Read a slice of length 16 at guestaddress 0x1200.</li>\n</ul>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>buf = <span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">0u8</span>; <span class=\"number\">16</span>];\n<span class=\"kw\">let </span>res = gm\n    .read(buf, GuestAddress(<span class=\"number\">0x1200</span>))\n    .expect(<span class=\"string\">\"Could not read from guest memory\"</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">16</span>, res);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_from\" class=\"method trait-impl\"><a href=\"#method.read_from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"vmm/vstate/memory/trait.Bytes.html#tymethod.read_from\" class=\"fn\">read_from</a>&lt;F&gt;(\n    &amp;self,\n    addr: <a class=\"struct\" href=\"vmm/vstate/memory/struct.MemoryRegionAddress.html\" title=\"struct vmm::vstate::memory::MemoryRegionAddress\">MemoryRegionAddress</a>,\n    src: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut F</a>,\n    count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, Error&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/io/trait.Read.html\" title=\"trait std::io::Read\">Read</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">ðŸ‘Ž</span><span>Deprecated: Use <code>.read_volatile_from</code> or the functions of the <code>ReadVolatile</code> trait instead</span></div></span></summary><div class=\"docblock\"><h5 id=\"examples-2\"><a href=\"#examples-2\">Examples</a></h5>\n<ul>\n<li>Read bytes from /dev/urandom</li>\n</ul>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>file = File::open(Path::new(<span class=\"string\">\"/dev/urandom\"</span>)).expect(<span class=\"string\">\"Could not open /dev/urandom\"</span>);\n\ngm.read_from(addr, <span class=\"kw-2\">&amp;mut </span>file, <span class=\"number\">128</span>)\n    .expect(<span class=\"string\">\"Could not read from /dev/urandom into guest memory\"</span>);\n\n<span class=\"kw\">let </span>read_addr = addr.checked_add(<span class=\"number\">8</span>).expect(<span class=\"string\">\"Could not compute read address\"</span>);\n<span class=\"kw\">let </span>rand_val: u32 = gm\n    .read_obj(read_addr)\n    .expect(<span class=\"string\">\"Could not read u32 val from /dev/urandom\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_exact_from\" class=\"method trait-impl\"><a href=\"#method.read_exact_from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"vmm/vstate/memory/trait.Bytes.html#tymethod.read_exact_from\" class=\"fn\">read_exact_from</a>&lt;F&gt;(\n    &amp;self,\n    addr: <a class=\"struct\" href=\"vmm/vstate/memory/struct.MemoryRegionAddress.html\" title=\"struct vmm::vstate::memory::MemoryRegionAddress\">MemoryRegionAddress</a>,\n    src: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut F</a>,\n    count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, Error&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/io/trait.Read.html\" title=\"trait std::io::Read\">Read</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">ðŸ‘Ž</span><span>Deprecated: Use <code>.read_exact_volatile_from</code> or the functions of the <code>ReadVolatile</code> trait instead</span></div></span></summary><div class=\"docblock\"><h5 id=\"examples-3\"><a href=\"#examples-3\">Examples</a></h5>\n<ul>\n<li>Read bytes from /dev/urandom</li>\n</ul>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>file = File::open(Path::new(<span class=\"string\">\"/dev/urandom\"</span>)).expect(<span class=\"string\">\"Could not open /dev/urandom\"</span>);\n\ngm.read_exact_from(addr, <span class=\"kw-2\">&amp;mut </span>file, <span class=\"number\">128</span>)\n    .expect(<span class=\"string\">\"Could not read from /dev/urandom into guest memory\"</span>);\n\n<span class=\"kw\">let </span>read_addr = addr.checked_add(<span class=\"number\">8</span>).expect(<span class=\"string\">\"Could not compute read address\"</span>);\n<span class=\"kw\">let </span>rand_val: u32 = gm\n    .read_obj(read_addr)\n    .expect(<span class=\"string\">\"Could not read u32 val from /dev/urandom\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_to\" class=\"method trait-impl\"><a href=\"#method.write_to\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"vmm/vstate/memory/trait.Bytes.html#tymethod.write_to\" class=\"fn\">write_to</a>&lt;F&gt;(\n    &amp;self,\n    addr: <a class=\"struct\" href=\"vmm/vstate/memory/struct.MemoryRegionAddress.html\" title=\"struct vmm::vstate::memory::MemoryRegionAddress\">MemoryRegionAddress</a>,\n    dst: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut F</a>,\n    count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, Error&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html\" title=\"trait std::io::Write\">Write</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">ðŸ‘Ž</span><span>Deprecated: Use <code>.write_volatile_to</code> or the functions of the <code>WriteVolatile</code> trait instead</span></div></span></summary><div class=\"docblock\"><p>Writes data from the region to a writable object.</p>\n<h5 id=\"examples-4\"><a href=\"#examples-4\">Examples</a></h5>\n<ul>\n<li>Write 128 bytes to a /dev/null file</li>\n</ul>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>file = OpenOptions::new()\n    .write(<span class=\"bool-val\">true</span>)\n    .open(<span class=\"string\">\"/dev/null\"</span>)\n    .expect(<span class=\"string\">\"Could not open /dev/null\"</span>);\n\ngm.write_to(start_addr, <span class=\"kw-2\">&amp;mut </span>file, <span class=\"number\">128</span>)\n    .expect(<span class=\"string\">\"Could not write to file from guest memory\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_all_to\" class=\"method trait-impl\"><a href=\"#method.write_all_to\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"vmm/vstate/memory/trait.Bytes.html#tymethod.write_all_to\" class=\"fn\">write_all_to</a>&lt;F&gt;(\n    &amp;self,\n    addr: <a class=\"struct\" href=\"vmm/vstate/memory/struct.MemoryRegionAddress.html\" title=\"struct vmm::vstate::memory::MemoryRegionAddress\">MemoryRegionAddress</a>,\n    dst: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut F</a>,\n    count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, Error&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html\" title=\"trait std::io::Write\">Write</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">ðŸ‘Ž</span><span>Deprecated: Use <code>.write_all_volatile_to</code> or the functions of the <code>WriteVolatile</code> trait instead</span></div></span></summary><div class=\"docblock\"><p>Writes data from the region to a writable object.</p>\n<h5 id=\"examples-5\"><a href=\"#examples-5\">Examples</a></h5>\n<ul>\n<li>Write 128 bytes to a /dev/null file</li>\n</ul>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>file = OpenOptions::new()\n    .write(<span class=\"bool-val\">true</span>)\n    .open(<span class=\"string\">\"/dev/null\"</span>)\n    .expect(<span class=\"string\">\"Could not open /dev/null\"</span>);\n\ngm.write_all_to(start_addr, <span class=\"kw-2\">&amp;mut </span>file, <span class=\"number\">128</span>)\n    .expect(<span class=\"string\">\"Could not write to file from guest memory\"</span>);</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.E\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.E\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"vmm/vstate/memory/trait.Bytes.html#associatedtype.E\" class=\"associatedtype\">E</a> = Error</h4></section></summary><div class='docblock'>Associated error codes</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_slice\" class=\"method trait-impl\"><a href=\"#method.write_slice\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"vmm/vstate/memory/trait.Bytes.html#tymethod.write_slice\" class=\"fn\">write_slice</a>(\n    &amp;self,\n    buf: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>],\n    addr: <a class=\"struct\" href=\"vmm/vstate/memory/struct.MemoryRegionAddress.html\" title=\"struct vmm::vstate::memory::MemoryRegionAddress\">MemoryRegionAddress</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, Error&gt;</h4></section></summary><div class='docblock'>Writes the entire content of a slice into the container at <code>addr</code>. <a href=\"vmm/vstate/memory/trait.Bytes.html#tymethod.write_slice\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_slice\" class=\"method trait-impl\"><a href=\"#method.read_slice\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"vmm/vstate/memory/trait.Bytes.html#tymethod.read_slice\" class=\"fn\">read_slice</a>(\n    &amp;self,\n    buf: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>],\n    addr: <a class=\"struct\" href=\"vmm/vstate/memory/struct.MemoryRegionAddress.html\" title=\"struct vmm::vstate::memory::MemoryRegionAddress\">MemoryRegionAddress</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, Error&gt;</h4></section></summary><div class='docblock'>Reads data from the container at <code>addr</code> to fill an entire slice. <a href=\"vmm/vstate/memory/trait.Bytes.html#tymethod.read_slice\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.store\" class=\"method trait-impl\"><a href=\"#method.store\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"vmm/vstate/memory/trait.Bytes.html#tymethod.store\" class=\"fn\">store</a>&lt;T&gt;(\n    &amp;self,\n    val: T,\n    addr: <a class=\"struct\" href=\"vmm/vstate/memory/struct.MemoryRegionAddress.html\" title=\"struct vmm::vstate::memory::MemoryRegionAddress\">MemoryRegionAddress</a>,\n    order: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, Error&gt;<div class=\"where\">where\n    T: AtomicAccess,</div></h4></section></summary><div class='docblock'>Atomically store a value at the specified address.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.load\" class=\"method trait-impl\"><a href=\"#method.load\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"vmm/vstate/memory/trait.Bytes.html#tymethod.load\" class=\"fn\">load</a>&lt;T&gt;(\n    &amp;self,\n    addr: <a class=\"struct\" href=\"vmm/vstate/memory/struct.MemoryRegionAddress.html\" title=\"struct vmm::vstate::memory::MemoryRegionAddress\">MemoryRegionAddress</a>,\n    order: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, Error&gt;<div class=\"where\">where\n    T: AtomicAccess,</div></h4></section></summary><div class='docblock'>Atomically load a value from the specified address.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_obj\" class=\"method trait-impl\"><a href=\"#method.write_obj\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"vmm/vstate/memory/trait.Bytes.html#method.write_obj\" class=\"fn\">write_obj</a>&lt;T&gt;(&amp;self, val: T, addr: A) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, Self::<a class=\"associatedtype\" href=\"vmm/vstate/memory/trait.Bytes.html#associatedtype.E\" title=\"type vmm::vstate::memory::Bytes::E\">E</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"vmm/vstate/memory/trait.ByteValued.html\" title=\"trait vmm::vstate::memory::ByteValued\">ByteValued</a>,</div></h4></section></summary><div class='docblock'>Writes an object into the container at <code>addr</code>. <a href=\"vmm/vstate/memory/trait.Bytes.html#method.write_obj\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_obj\" class=\"method trait-impl\"><a href=\"#method.read_obj\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"vmm/vstate/memory/trait.Bytes.html#method.read_obj\" class=\"fn\">read_obj</a>&lt;T&gt;(&amp;self, addr: A) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, Self::<a class=\"associatedtype\" href=\"vmm/vstate/memory/trait.Bytes.html#associatedtype.E\" title=\"type vmm::vstate::memory::Bytes::E\">E</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"vmm/vstate/memory/trait.ByteValued.html\" title=\"trait vmm::vstate::memory::ByteValued\">ByteValued</a>,</div></h4></section></summary><div class='docblock'>Reads an object from the container at <code>addr</code>. <a href=\"vmm/vstate/memory/trait.Bytes.html#method.read_obj\">Read more</a></div></details></div></details>","Bytes<MemoryRegionAddress>","vmm::vstate::memory::GuestRegionMmap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-GuestRegionMmap%3CB%3E\" class=\"impl\"><a href=\"#impl-Debug-for-GuestRegionMmap%3CB%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for GuestRegionMmap&lt;B&gt;<div class=\"where\">where\n    B: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","vmm::vstate::memory::GuestRegionMmap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-GuestMemoryRegion-for-GuestRegionMmap%3CB%3E\" class=\"impl\"><a href=\"#impl-GuestMemoryRegion-for-GuestRegionMmap%3CB%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;B&gt; <a class=\"trait\" href=\"vmm/vstate/memory/trait.GuestMemoryRegion.html\" title=\"trait vmm::vstate::memory::GuestMemoryRegion\">GuestMemoryRegion</a> for GuestRegionMmap&lt;B&gt;<div class=\"where\">where\n    B: <a class=\"trait\" href=\"vmm/vstate/memory/trait.Bitmap.html\" title=\"trait vmm::vstate::memory::Bitmap\">Bitmap</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.B\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.B\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"vmm/vstate/memory/trait.GuestMemoryRegion.html#associatedtype.B\" class=\"associatedtype\">B</a> = B</h4></section></summary><div class='docblock'>Type used for dirty memory tracking.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method trait-impl\"><a href=\"#method.len\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"vmm/vstate/memory/trait.GuestMemoryRegion.html#tymethod.len\" class=\"fn\">len</a>(&amp;self) -&gt; &lt;<a class=\"struct\" href=\"vmm/vstate/memory/struct.GuestAddress.html\" title=\"struct vmm::vstate::memory::GuestAddress\">GuestAddress</a> as <a class=\"trait\" href=\"vmm/vstate/memory/address/trait.AddressValue.html\" title=\"trait vmm::vstate::memory::address::AddressValue\">AddressValue</a>&gt;::<a class=\"associatedtype\" href=\"vmm/vstate/memory/address/trait.AddressValue.html#associatedtype.V\" title=\"type vmm::vstate::memory::address::AddressValue::V\">V</a></h4></section></summary><div class='docblock'>Returns the size of the region.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.start_addr\" class=\"method trait-impl\"><a href=\"#method.start_addr\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"vmm/vstate/memory/trait.GuestMemoryRegion.html#tymethod.start_addr\" class=\"fn\">start_addr</a>(&amp;self) -&gt; <a class=\"struct\" href=\"vmm/vstate/memory/struct.GuestAddress.html\" title=\"struct vmm::vstate::memory::GuestAddress\">GuestAddress</a></h4></section></summary><div class='docblock'>Returns the minimum (inclusive) address managed by the region.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitmap\" class=\"method trait-impl\"><a href=\"#method.bitmap\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"vmm/vstate/memory/trait.GuestMemoryRegion.html#tymethod.bitmap\" class=\"fn\">bitmap</a>(&amp;self) -&gt; &amp;&lt;GuestRegionMmap&lt;B&gt; as <a class=\"trait\" href=\"vmm/vstate/memory/trait.GuestMemoryRegion.html\" title=\"trait vmm::vstate::memory::GuestMemoryRegion\">GuestMemoryRegion</a>&gt;::<a class=\"associatedtype\" href=\"vmm/vstate/memory/trait.GuestMemoryRegion.html#associatedtype.B\" title=\"type vmm::vstate::memory::GuestMemoryRegion::B\">B</a></h4></section></summary><div class='docblock'>Borrow the associated <code>Bitmap</code> object.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_host_address\" class=\"method trait-impl\"><a href=\"#method.get_host_address\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"vmm/vstate/memory/trait.GuestMemoryRegion.html#method.get_host_address\" class=\"fn\">get_host_address</a>(&amp;self, addr: <a class=\"struct\" href=\"vmm/vstate/memory/struct.MemoryRegionAddress.html\" title=\"struct vmm::vstate::memory::MemoryRegionAddress\">MemoryRegionAddress</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut </a><a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>, Error&gt;</h4></section></summary><div class='docblock'>Returns the host virtual address corresponding to the region address. <a href=\"vmm/vstate/memory/trait.GuestMemoryRegion.html#method.get_host_address\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.file_offset\" class=\"method trait-impl\"><a href=\"#method.file_offset\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"vmm/vstate/memory/trait.GuestMemoryRegion.html#method.file_offset\" class=\"fn\">file_offset</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;<a class=\"struct\" href=\"vmm/vstate/memory/struct.FileOffset.html\" title=\"struct vmm::vstate::memory::FileOffset\">FileOffset</a>&gt;</h4></section></summary><div class='docblock'>Returns information regarding the file and offset backing this memory region.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_slice\" class=\"method trait-impl\"><a href=\"#method.get_slice\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"vmm/vstate/memory/trait.GuestMemoryRegion.html#method.get_slice\" class=\"fn\">get_slice</a>(\n    &amp;self,\n    offset: <a class=\"struct\" href=\"vmm/vstate/memory/struct.MemoryRegionAddress.html\" title=\"struct vmm::vstate::memory::MemoryRegionAddress\">MemoryRegionAddress</a>,\n    count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;VolatileSlice&lt;'_, &lt;B as WithBitmapSlice&lt;'_&gt;&gt;::S&gt;, Error&gt;</h4></section></summary><div class='docblock'>Returns a <a href=\"struct.VolatileSlice.html\"><code>VolatileSlice</code></a> of <code>count</code> bytes starting at\n<code>offset</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_hugetlbfs\" class=\"method trait-impl\"><a href=\"#method.is_hugetlbfs\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"vmm/vstate/memory/trait.GuestMemoryRegion.html#method.is_hugetlbfs\" class=\"fn\">is_hugetlbfs</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>&gt;</h4></section></summary><div class='docblock'>Show if the region is based on the <code>HugeTLBFS</code>.\nReturns Some(true) if the region is backed by hugetlbfs.\nNone represents that no information is available. <a href=\"vmm/vstate/memory/trait.GuestMemoryRegion.html#method.is_hugetlbfs\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.last_addr\" class=\"method trait-impl\"><a href=\"#method.last_addr\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"vmm/vstate/memory/trait.GuestMemoryRegion.html#method.last_addr\" class=\"fn\">last_addr</a>(&amp;self) -&gt; <a class=\"struct\" href=\"vmm/vstate/memory/struct.GuestAddress.html\" title=\"struct vmm::vstate::memory::GuestAddress\">GuestAddress</a></h4></section></summary><div class='docblock'>Returns the maximum (inclusive) address managed by the region.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.check_address\" class=\"method trait-impl\"><a href=\"#method.check_address\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"vmm/vstate/memory/trait.GuestMemoryRegion.html#method.check_address\" class=\"fn\">check_address</a>(\n    &amp;self,\n    addr: <a class=\"struct\" href=\"vmm/vstate/memory/struct.MemoryRegionAddress.html\" title=\"struct vmm::vstate::memory::MemoryRegionAddress\">MemoryRegionAddress</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"vmm/vstate/memory/struct.MemoryRegionAddress.html\" title=\"struct vmm::vstate::memory::MemoryRegionAddress\">MemoryRegionAddress</a>&gt;</h4></section></summary><div class='docblock'>Returns the given address if it is within this region.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.address_in_range\" class=\"method trait-impl\"><a href=\"#method.address_in_range\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"vmm/vstate/memory/trait.GuestMemoryRegion.html#method.address_in_range\" class=\"fn\">address_in_range</a>(&amp;self, addr: <a class=\"struct\" href=\"vmm/vstate/memory/struct.MemoryRegionAddress.html\" title=\"struct vmm::vstate::memory::MemoryRegionAddress\">MemoryRegionAddress</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns <code>true</code> if the given address is within this region.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_offset\" class=\"method trait-impl\"><a href=\"#method.checked_offset\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"vmm/vstate/memory/trait.GuestMemoryRegion.html#method.checked_offset\" class=\"fn\">checked_offset</a>(\n    &amp;self,\n    base: <a class=\"struct\" href=\"vmm/vstate/memory/struct.MemoryRegionAddress.html\" title=\"struct vmm::vstate::memory::MemoryRegionAddress\">MemoryRegionAddress</a>,\n    offset: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"vmm/vstate/memory/struct.MemoryRegionAddress.html\" title=\"struct vmm::vstate::memory::MemoryRegionAddress\">MemoryRegionAddress</a>&gt;</h4></section></summary><div class='docblock'>Returns the address plus the offset if it is in this region.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_region_addr\" class=\"method trait-impl\"><a href=\"#method.to_region_addr\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"vmm/vstate/memory/trait.GuestMemoryRegion.html#method.to_region_addr\" class=\"fn\">to_region_addr</a>(&amp;self, addr: <a class=\"struct\" href=\"vmm/vstate/memory/struct.GuestAddress.html\" title=\"struct vmm::vstate::memory::GuestAddress\">GuestAddress</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"vmm/vstate/memory/struct.MemoryRegionAddress.html\" title=\"struct vmm::vstate::memory::MemoryRegionAddress\">MemoryRegionAddress</a>&gt;</h4></section></summary><div class='docblock'>Tries to convert an absolute address to a relative address within this region. <a href=\"vmm/vstate/memory/trait.GuestMemoryRegion.html#method.to_region_addr\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_slice\" class=\"method trait-impl\"><a href=\"#method.as_slice\" class=\"anchor\">Â§</a><h4 class=\"code-header\">unsafe fn <a href=\"vmm/vstate/memory/trait.GuestMemoryRegion.html#method.as_slice\" class=\"fn\">as_slice</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">ðŸ‘Ž</span><span>Deprecated: It is impossible to use this function for accessing memory of a running virtual machine without violating aliasing rules </span></div></span><div class='docblock'>Returns a slice corresponding to the data in the region. <a href=\"vmm/vstate/memory/trait.GuestMemoryRegion.html#method.as_slice\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_slice\" class=\"method trait-impl\"><a href=\"#method.as_mut_slice\" class=\"anchor\">Â§</a><h4 class=\"code-header\">unsafe fn <a href=\"vmm/vstate/memory/trait.GuestMemoryRegion.html#method.as_mut_slice\" class=\"fn\">as_mut_slice</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>]&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">ðŸ‘Ž</span><span>Deprecated: It is impossible to use this function for accessing memory of a running virtual machine without violating aliasing rules </span></div></span><div class='docblock'>Returns a mutable slice corresponding to the data in the region. <a href=\"vmm/vstate/memory/trait.GuestMemoryRegion.html#method.as_mut_slice\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_volatile_slice\" class=\"method trait-impl\"><a href=\"#method.as_volatile_slice\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"vmm/vstate/memory/trait.GuestMemoryRegion.html#method.as_volatile_slice\" class=\"fn\">as_volatile_slice</a>(\n    &amp;self\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;VolatileSlice&lt;'_, &lt;Self::<a class=\"associatedtype\" href=\"vmm/vstate/memory/trait.GuestMemoryRegion.html#associatedtype.B\" title=\"type vmm::vstate::memory::GuestMemoryRegion::B\">B</a> as WithBitmapSlice&lt;'_&gt;&gt;::S&gt;, Error&gt;</h4></section></summary><div class='docblock'>Gets a slice of memory for the entire region that supports volatile access. <a href=\"vmm/vstate/memory/trait.GuestMemoryRegion.html#method.as_volatile_slice\">Read more</a></div></details></div></details>","GuestMemoryRegion","vmm::vstate::memory::GuestRegionMmap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-__Deref-for-GuestRegionMmap%3CB%3E\" class=\"impl\"><a href=\"#impl-__Deref-for-GuestRegionMmap%3CB%3E\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;B&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a> for GuestRegionMmap&lt;B&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Target\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target\" class=\"anchor\">Â§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#associatedtype.Target\" class=\"associatedtype\">Target</a> = <a class=\"struct\" href=\"vmm/vstate/memory/struct.MmapRegion.html\" title=\"struct vmm::vstate::memory::MmapRegion\">MmapRegion</a>&lt;B&gt;</h4></section></summary><div class='docblock'>The resulting type after dereferencing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref\" class=\"method trait-impl\"><a href=\"#method.deref\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html#tymethod.deref\" class=\"fn\">deref</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"vmm/vstate/memory/struct.MmapRegion.html\" title=\"struct vmm::vstate::memory::MmapRegion\">MmapRegion</a>&lt;B&gt;</h4></section></summary><div class='docblock'>Dereferences the value.</div></details></div></details>","Deref","vmm::vstate::memory::GuestRegionMmap"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()