(function() {var type_impls = {
"vmm":[["<section id=\"impl-StructuralPartialEq-for-GuestAddress\" class=\"impl\"><a href=\"#impl-StructuralPartialEq-for-GuestAddress\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"struct\" href=\"vmm/vstate/memory/struct.GuestAddress.html\" title=\"struct vmm::vstate::memory::GuestAddress\">GuestAddress</a></h3></section>","StructuralPartialEq","vmm::vstate::memory::GuestUsize"],["<section id=\"impl-Eq-for-GuestAddress\" class=\"impl\"><a href=\"#impl-Eq-for-GuestAddress\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"vmm/vstate/memory/struct.GuestAddress.html\" title=\"struct vmm::vstate::memory::GuestAddress\">GuestAddress</a></h3></section>","Eq","vmm::vstate::memory::GuestUsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-GuestAddress\" class=\"impl\"><a href=\"#impl-Clone-for-GuestAddress\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"vmm/vstate/memory/struct.GuestAddress.html\" title=\"struct vmm::vstate::memory::GuestAddress\">GuestAddress</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"vmm/vstate/memory/struct.GuestAddress.html\" title=\"struct vmm::vstate::memory::GuestAddress\">GuestAddress</a></h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","vmm::vstate::memory::GuestUsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Bytes%3CGuestAddress%3E-for-T\" class=\"impl\"><a href=\"#impl-Bytes%3CGuestAddress%3E-for-T\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"vmm/vstate/memory/trait.Bytes.html\" title=\"trait vmm::vstate::memory::Bytes\">Bytes</a>&lt;<a class=\"struct\" href=\"vmm/vstate/memory/struct.GuestAddress.html\" title=\"struct vmm::vstate::memory::GuestAddress\">GuestAddress</a>&gt; for T<div class=\"where\">where\n    T: <a class=\"trait\" href=\"vmm/vstate/memory/trait.GuestMemory.html\" title=\"trait vmm::vstate::memory::GuestMemory\">GuestMemory</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_slice\" class=\"method trait-impl\"><a href=\"#method.write_slice\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"vmm/vstate/memory/trait.Bytes.html#tymethod.write_slice\" class=\"fn\">write_slice</a>(&amp;self, buf: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>], addr: <a class=\"struct\" href=\"vmm/vstate/memory/struct.GuestAddress.html\" title=\"struct vmm::vstate::memory::GuestAddress\">GuestAddress</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, Error&gt;</h4></section></summary><div class=\"docblock\"><h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<ul>\n<li>Write a slice at guestaddress 0x1000. (uses the <code>backend-mmap</code> feature)</li>\n</ul>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>gm.write_slice(<span class=\"kw-2\">&amp;</span>[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>], start_addr)\n    .expect(<span class=\"string\">\"Could not write slice to guest memory\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_slice\" class=\"method trait-impl\"><a href=\"#method.read_slice\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"vmm/vstate/memory/trait.Bytes.html#tymethod.read_slice\" class=\"fn\">read_slice</a>(&amp;self, buf: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>], addr: <a class=\"struct\" href=\"vmm/vstate/memory/struct.GuestAddress.html\" title=\"struct vmm::vstate::memory::GuestAddress\">GuestAddress</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, Error&gt;</h4></section></summary><div class=\"docblock\"><h5 id=\"examples-1\"><a href=\"#examples-1\">Examples</a></h5>\n<ul>\n<li>Read a slice of length 16 at guestaddress 0x1000. (uses the <code>backend-mmap</code> feature)</li>\n</ul>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>start_addr = GuestAddress(<span class=\"number\">0x1000</span>);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>gm = GuestMemoryMmap::&lt;()&gt;::from_ranges(<span class=\"kw-2\">&amp;</span><span class=\"macro\">vec!</span>[(start_addr, <span class=\"number\">0x400</span>)])\n    .expect(<span class=\"string\">\"Could not create guest memory\"</span>);\n<span class=\"kw\">let </span>buf = <span class=\"kw-2\">&amp;mut </span>[<span class=\"number\">0u8</span>; <span class=\"number\">16</span>];\n\ngm.read_slice(buf, start_addr)\n    .expect(<span class=\"string\">\"Could not read slice from guest memory\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_from\" class=\"method trait-impl\"><a href=\"#method.read_from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"vmm/vstate/memory/trait.Bytes.html#tymethod.read_from\" class=\"fn\">read_from</a>&lt;F&gt;(\n    &amp;self,\n    addr: <a class=\"struct\" href=\"vmm/vstate/memory/struct.GuestAddress.html\" title=\"struct vmm::vstate::memory::GuestAddress\">GuestAddress</a>,\n    src: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut F</a>,\n    count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, Error&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/io/trait.Read.html\" title=\"trait std::io::Read\">Read</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">๐</span><span>Deprecated: Use <code>.read_volatile_from</code> or the functions of the <code>ReadVolatile</code> trait instead</span></div></span></summary><div class=\"docblock\"><h5 id=\"examples-2\"><a href=\"#examples-2\">Examples</a></h5>\n<ul>\n<li>Read bytes from /dev/urandom (uses the <code>backend-mmap</code> feature)</li>\n</ul>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>file = File::open(Path::new(<span class=\"string\">\"/dev/urandom\"</span>)).expect(<span class=\"string\">\"Could not open /dev/urandom\"</span>);\n\ngm.read_from(addr, <span class=\"kw-2\">&amp;mut </span>file, <span class=\"number\">128</span>)\n    .expect(<span class=\"string\">\"Could not read from /dev/urandom into guest memory\"</span>);\n\n<span class=\"kw\">let </span>read_addr = addr.checked_add(<span class=\"number\">8</span>).expect(<span class=\"string\">\"Could not compute read address\"</span>);\n<span class=\"kw\">let </span>rand_val: u32 = gm\n    .read_obj(read_addr)\n    .expect(<span class=\"string\">\"Could not read u32 val from /dev/urandom\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_to\" class=\"method trait-impl\"><a href=\"#method.write_to\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"vmm/vstate/memory/trait.Bytes.html#tymethod.write_to\" class=\"fn\">write_to</a>&lt;F&gt;(\n    &amp;self,\n    addr: <a class=\"struct\" href=\"vmm/vstate/memory/struct.GuestAddress.html\" title=\"struct vmm::vstate::memory::GuestAddress\">GuestAddress</a>,\n    dst: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut F</a>,\n    count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, Error&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html\" title=\"trait std::io::Write\">Write</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">๐</span><span>Deprecated: Use <code>.write_volatile_to</code> or the functions of the <code>WriteVolatile</code> trait instead</span></div></span></summary><div class=\"docblock\"><h5 id=\"examples-3\"><a href=\"#examples-3\">Examples</a></h5>\n<ul>\n<li>Write 128 bytes to /dev/null (uses the <code>backend-mmap</code> feature)</li>\n</ul>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>file = OpenOptions::new()\n    .write(<span class=\"bool-val\">true</span>)\n    .open(<span class=\"string\">\"/dev/null\"</span>)\n    .expect(<span class=\"string\">\"Could not open /dev/null\"</span>);\n\ngm.write_to(start_addr, <span class=\"kw-2\">&amp;mut </span>file, <span class=\"number\">128</span>)\n    .expect(<span class=\"string\">\"Could not write 128 bytes to the provided address\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_all_to\" class=\"method trait-impl\"><a href=\"#method.write_all_to\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"vmm/vstate/memory/trait.Bytes.html#tymethod.write_all_to\" class=\"fn\">write_all_to</a>&lt;F&gt;(\n    &amp;self,\n    addr: <a class=\"struct\" href=\"vmm/vstate/memory/struct.GuestAddress.html\" title=\"struct vmm::vstate::memory::GuestAddress\">GuestAddress</a>,\n    dst: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut F</a>,\n    count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, Error&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html\" title=\"trait std::io::Write\">Write</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">๐</span><span>Deprecated: Use <code>.write_all_volatile_to</code> or the functions of the <code>WriteVolatile</code> trait instead</span></div></span></summary><div class=\"docblock\"><h5 id=\"examples-4\"><a href=\"#examples-4\">Examples</a></h5>\n<ul>\n<li>Write 128 bytes to /dev/null (uses the <code>backend-mmap</code> feature)</li>\n</ul>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>file = OpenOptions::new()\n    .write(<span class=\"bool-val\">true</span>)\n    .open(<span class=\"string\">\"/dev/null\"</span>)\n    .expect(<span class=\"string\">\"Could not open /dev/null\"</span>);\n\ngm.write_all_to(start_addr, <span class=\"kw-2\">&amp;mut </span>file, <span class=\"number\">128</span>)\n    .expect(<span class=\"string\">\"Could not write 128 bytes to the provided address\"</span>);</code></pre></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.E\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.E\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"vmm/vstate/memory/trait.Bytes.html#associatedtype.E\" class=\"associatedtype\">E</a> = Error</h4></section></summary><div class='docblock'>Associated error codes</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write\" class=\"method trait-impl\"><a href=\"#method.write\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"vmm/vstate/memory/trait.Bytes.html#tymethod.write\" class=\"fn\">write</a>(&amp;self, buf: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>], addr: <a class=\"struct\" href=\"vmm/vstate/memory/struct.GuestAddress.html\" title=\"struct vmm::vstate::memory::GuestAddress\">GuestAddress</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, Error&gt;</h4></section></summary><div class='docblock'>Writes a slice into the container at <code>addr</code>. <a href=\"vmm/vstate/memory/trait.Bytes.html#tymethod.write\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read\" class=\"method trait-impl\"><a href=\"#method.read\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"vmm/vstate/memory/trait.Bytes.html#tymethod.read\" class=\"fn\">read</a>(&amp;self, buf: &amp;mut [<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>], addr: <a class=\"struct\" href=\"vmm/vstate/memory/struct.GuestAddress.html\" title=\"struct vmm::vstate::memory::GuestAddress\">GuestAddress</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, Error&gt;</h4></section></summary><div class='docblock'>Reads data from the container at <code>addr</code> into a slice. <a href=\"vmm/vstate/memory/trait.Bytes.html#tymethod.read\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_exact_from\" class=\"method trait-impl\"><a href=\"#method.read_exact_from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"vmm/vstate/memory/trait.Bytes.html#tymethod.read_exact_from\" class=\"fn\">read_exact_from</a>&lt;F&gt;(\n    &amp;self,\n    addr: <a class=\"struct\" href=\"vmm/vstate/memory/struct.GuestAddress.html\" title=\"struct vmm::vstate::memory::GuestAddress\">GuestAddress</a>,\n    src: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut F</a>,\n    count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, Error&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/io/trait.Read.html\" title=\"trait std::io::Read\">Read</a>,</div></h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">๐</span><span>Deprecated: Use <code>.read_exact_volatile_from</code> or the functions of the <code>ReadVolatile</code> trait instead</span></div></span><div class='docblock'>Reads exactly <code>count</code> bytes from an object and writes them into the container at <code>addr</code>. <a href=\"vmm/vstate/memory/trait.Bytes.html#tymethod.read_exact_from\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.store\" class=\"method trait-impl\"><a href=\"#method.store\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"vmm/vstate/memory/trait.Bytes.html#tymethod.store\" class=\"fn\">store</a>&lt;O&gt;(\n    &amp;self,\n    val: O,\n    addr: <a class=\"struct\" href=\"vmm/vstate/memory/struct.GuestAddress.html\" title=\"struct vmm::vstate::memory::GuestAddress\">GuestAddress</a>,\n    order: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, Error&gt;<div class=\"where\">where\n    O: AtomicAccess,</div></h4></section></summary><div class='docblock'>Atomically store a value at the specified address.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.load\" class=\"method trait-impl\"><a href=\"#method.load\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"vmm/vstate/memory/trait.Bytes.html#tymethod.load\" class=\"fn\">load</a>&lt;O&gt;(&amp;self, addr: <a class=\"struct\" href=\"vmm/vstate/memory/struct.GuestAddress.html\" title=\"struct vmm::vstate::memory::GuestAddress\">GuestAddress</a>, order: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/sync/atomic/enum.Ordering.html\" title=\"enum core::sync::atomic::Ordering\">Ordering</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;O, Error&gt;<div class=\"where\">where\n    O: AtomicAccess,</div></h4></section></summary><div class='docblock'>Atomically load a value from the specified address.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_obj\" class=\"method trait-impl\"><a href=\"#method.write_obj\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"vmm/vstate/memory/trait.Bytes.html#method.write_obj\" class=\"fn\">write_obj</a>&lt;T&gt;(&amp;self, val: T, addr: A) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, Self::<a class=\"associatedtype\" href=\"vmm/vstate/memory/trait.Bytes.html#associatedtype.E\" title=\"type vmm::vstate::memory::Bytes::E\">E</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"vmm/vstate/memory/trait.ByteValued.html\" title=\"trait vmm::vstate::memory::ByteValued\">ByteValued</a>,</div></h4></section></summary><div class='docblock'>Writes an object into the container at <code>addr</code>. <a href=\"vmm/vstate/memory/trait.Bytes.html#method.write_obj\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.read_obj\" class=\"method trait-impl\"><a href=\"#method.read_obj\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"vmm/vstate/memory/trait.Bytes.html#method.read_obj\" class=\"fn\">read_obj</a>&lt;T&gt;(&amp;self, addr: A) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;T, Self::<a class=\"associatedtype\" href=\"vmm/vstate/memory/trait.Bytes.html#associatedtype.E\" title=\"type vmm::vstate::memory::Bytes::E\">E</a>&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"vmm/vstate/memory/trait.ByteValued.html\" title=\"trait vmm::vstate::memory::ByteValued\">ByteValued</a>,</div></h4></section></summary><div class='docblock'>Reads an object from the container at <code>addr</code>. <a href=\"vmm/vstate/memory/trait.Bytes.html#method.read_obj\">Read more</a></div></details></div></details>","Bytes<GuestAddress>","vmm::vstate::memory::GuestUsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAnd%3Cu64%3E-for-GuestAddress\" class=\"impl\"><a href=\"#impl-BitAnd%3Cu64%3E-for-GuestAddress\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitAnd.html\" title=\"trait core::ops::bit::BitAnd\">BitAnd</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>&gt; for <a class=\"struct\" href=\"vmm/vstate/memory/struct.GuestAddress.html\" title=\"struct vmm::vstate::memory::GuestAddress\">GuestAddress</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitAnd.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"vmm/vstate/memory/struct.GuestAddress.html\" title=\"struct vmm::vstate::memory::GuestAddress\">GuestAddress</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand\" class=\"method trait-impl\"><a href=\"#method.bitand\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitAnd.html#tymethod.bitand\" class=\"fn\">bitand</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"vmm/vstate/memory/struct.GuestAddress.html\" title=\"struct vmm::vstate::memory::GuestAddress\">GuestAddress</a></h4></section></summary><div class='docblock'>Performs the <code>&amp;</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitAnd.html#tymethod.bitand\">Read more</a></div></details></div></details>","BitAnd<u64>","vmm::vstate::memory::GuestUsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddressValue-for-GuestAddress\" class=\"impl\"><a href=\"#impl-AddressValue-for-GuestAddress\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"vmm/vstate/memory/address/trait.AddressValue.html\" title=\"trait vmm::vstate::memory::address::AddressValue\">AddressValue</a> for <a class=\"struct\" href=\"vmm/vstate/memory/struct.GuestAddress.html\" title=\"struct vmm::vstate::memory::GuestAddress\">GuestAddress</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.V\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.V\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"vmm/vstate/memory/address/trait.AddressValue.html#associatedtype.V\" class=\"associatedtype\">V</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a></h4></section></summary><div class='docblock'>Type of the raw address value.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.zero\" class=\"method trait-impl\"><a href=\"#method.zero\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"vmm/vstate/memory/address/trait.AddressValue.html#method.zero\" class=\"fn\">zero</a>() -&gt; Self::<a class=\"associatedtype\" href=\"vmm/vstate/memory/address/trait.AddressValue.html#associatedtype.V\" title=\"type vmm::vstate::memory::address::AddressValue::V\">V</a></h4></section></summary><div class='docblock'>Return the value zero, coerced into the value type <code>Self::V</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.one\" class=\"method trait-impl\"><a href=\"#method.one\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"vmm/vstate/memory/address/trait.AddressValue.html#method.one\" class=\"fn\">one</a>() -&gt; Self::<a class=\"associatedtype\" href=\"vmm/vstate/memory/address/trait.AddressValue.html#associatedtype.V\" title=\"type vmm::vstate::memory::address::AddressValue::V\">V</a></h4></section></summary><div class='docblock'>Return the value zero, coerced into the value type <code>Self::V</code></div></details></div></details>","AddressValue","vmm::vstate::memory::GuestUsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-GuestAddress\" class=\"impl\"><a href=\"#impl-Debug-for-GuestAddress\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"vmm/vstate/memory/struct.GuestAddress.html\" title=\"struct vmm::vstate::memory::GuestAddress\">GuestAddress</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","vmm::vstate::memory::GuestUsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-GuestAddress\" class=\"impl\"><a href=\"#impl-PartialOrd-for-GuestAddress\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for <a class=\"struct\" href=\"vmm/vstate/memory/struct.GuestAddress.html\" title=\"struct vmm::vstate::memory::GuestAddress\">GuestAddress</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a href=\"#method.partial_cmp\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"vmm/vstate/memory/struct.GuestAddress.html\" title=\"struct vmm::vstate::memory::GuestAddress\">GuestAddress</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1125\">source</a></span><a href=\"#method.lt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1142\">source</a></span><a href=\"#method.le\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1158\">source</a></span><a href=\"#method.gt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1175\">source</a></span><a href=\"#method.ge\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","vmm::vstate::memory::GuestUsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-GuestAddress\" class=\"impl\"><a href=\"#impl-PartialEq-for-GuestAddress\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"vmm/vstate/memory/struct.GuestAddress.html\" title=\"struct vmm::vstate::memory::GuestAddress\">GuestAddress</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"vmm/vstate/memory/struct.GuestAddress.html\" title=\"struct vmm::vstate::memory::GuestAddress\">GuestAddress</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#242\">source</a></span><a href=\"#method.ne\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","vmm::vstate::memory::GuestUsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3Cu64%3E-for-GuestAddress\" class=\"impl\"><a href=\"#impl-BitOr%3Cu64%3E-for-GuestAddress\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitOr.html\" title=\"trait core::ops::bit::BitOr\">BitOr</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>&gt; for <a class=\"struct\" href=\"vmm/vstate/memory/struct.GuestAddress.html\" title=\"struct vmm::vstate::memory::GuestAddress\">GuestAddress</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">ยง</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"vmm/vstate/memory/struct.GuestAddress.html\" title=\"struct vmm::vstate::memory::GuestAddress\">GuestAddress</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor\" class=\"method trait-impl\"><a href=\"#method.bitor\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"vmm/vstate/memory/struct.GuestAddress.html\" title=\"struct vmm::vstate::memory::GuestAddress\">GuestAddress</a></h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"https://doc.rust-lang.org/nightly/core/ops/bit/trait.BitOr.html#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr<u64>","vmm::vstate::memory::GuestUsize"],["<section id=\"impl-Copy-for-GuestAddress\" class=\"impl\"><a href=\"#impl-Copy-for-GuestAddress\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for <a class=\"struct\" href=\"vmm/vstate/memory/struct.GuestAddress.html\" title=\"struct vmm::vstate::memory::GuestAddress\">GuestAddress</a></h3></section>","Copy","vmm::vstate::memory::GuestUsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-GuestAddress\" class=\"impl\"><a href=\"#impl-Default-for-GuestAddress\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"vmm/vstate/memory/struct.GuestAddress.html\" title=\"struct vmm::vstate::memory::GuestAddress\">GuestAddress</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"vmm/vstate/memory/struct.GuestAddress.html\" title=\"struct vmm::vstate::memory::GuestAddress\">GuestAddress</a></h4></section></summary><div class='docblock'>Returns the โdefault valueโ for a type. <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","vmm::vstate::memory::GuestUsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Address-for-GuestAddress\" class=\"impl\"><a href=\"#impl-Address-for-GuestAddress\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"vmm/vstate/memory/trait.Address.html\" title=\"trait vmm::vstate::memory::Address\">Address</a> for <a class=\"struct\" href=\"vmm/vstate/memory/struct.GuestAddress.html\" title=\"struct vmm::vstate::memory::GuestAddress\">GuestAddress</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method trait-impl\"><a href=\"#method.new\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"vmm/vstate/memory/trait.Address.html#tymethod.new\" class=\"fn\">new</a>(value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"vmm/vstate/memory/struct.GuestAddress.html\" title=\"struct vmm::vstate::memory::GuestAddress\">GuestAddress</a></h4></section></summary><div class='docblock'>Creates an address from a raw address value.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.raw_value\" class=\"method trait-impl\"><a href=\"#method.raw_value\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"vmm/vstate/memory/trait.Address.html#tymethod.raw_value\" class=\"fn\">raw_value</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a></h4></section></summary><div class='docblock'>Returns the raw value of the address.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_offset_from\" class=\"method trait-impl\"><a href=\"#method.checked_offset_from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"vmm/vstate/memory/trait.Address.html#tymethod.checked_offset_from\" class=\"fn\">checked_offset_from</a>(&amp;self, base: <a class=\"struct\" href=\"vmm/vstate/memory/struct.GuestAddress.html\" title=\"struct vmm::vstate::memory::GuestAddress\">GuestAddress</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>&gt;</h4></section></summary><div class='docblock'>Computes the offset from this address to the given base address. <a href=\"vmm/vstate/memory/trait.Address.html#tymethod.checked_offset_from\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_add\" class=\"method trait-impl\"><a href=\"#method.checked_add\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"vmm/vstate/memory/trait.Address.html#tymethod.checked_add\" class=\"fn\">checked_add</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"vmm/vstate/memory/struct.GuestAddress.html\" title=\"struct vmm::vstate::memory::GuestAddress\">GuestAddress</a>&gt;</h4></section></summary><div class='docblock'>Computes <code>self + other</code>, returning <code>None</code> if overflow occurred.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_add\" class=\"method trait-impl\"><a href=\"#method.overflowing_add\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"vmm/vstate/memory/trait.Address.html#tymethod.overflowing_add\" class=\"fn\">overflowing_add</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>) -&gt; (<a class=\"struct\" href=\"vmm/vstate/memory/struct.GuestAddress.html\" title=\"struct vmm::vstate::memory::GuestAddress\">GuestAddress</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class='docblock'>Computes <code>self + other</code>. <a href=\"vmm/vstate/memory/trait.Address.html#tymethod.overflowing_add\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_add\" class=\"method trait-impl\"><a href=\"#method.unchecked_add\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"vmm/vstate/memory/trait.Address.html#tymethod.unchecked_add\" class=\"fn\">unchecked_add</a>(&amp;self, offset: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"vmm/vstate/memory/struct.GuestAddress.html\" title=\"struct vmm::vstate::memory::GuestAddress\">GuestAddress</a></h4></section></summary><div class='docblock'>Computes <code>self + offset</code>. <a href=\"vmm/vstate/memory/trait.Address.html#tymethod.unchecked_add\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_sub\" class=\"method trait-impl\"><a href=\"#method.checked_sub\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"vmm/vstate/memory/trait.Address.html#tymethod.checked_sub\" class=\"fn\">checked_sub</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"vmm/vstate/memory/struct.GuestAddress.html\" title=\"struct vmm::vstate::memory::GuestAddress\">GuestAddress</a>&gt;</h4></section></summary><div class='docblock'>Subtracts two addresses, checking for underflow. If underflow happens, <code>None</code> is returned.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_sub\" class=\"method trait-impl\"><a href=\"#method.overflowing_sub\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"vmm/vstate/memory/trait.Address.html#tymethod.overflowing_sub\" class=\"fn\">overflowing_sub</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>) -&gt; (<a class=\"struct\" href=\"vmm/vstate/memory/struct.GuestAddress.html\" title=\"struct vmm::vstate::memory::GuestAddress\">GuestAddress</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class='docblock'>Computes <code>self - other</code>. <a href=\"vmm/vstate/memory/trait.Address.html#tymethod.overflowing_sub\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_sub\" class=\"method trait-impl\"><a href=\"#method.unchecked_sub\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"vmm/vstate/memory/trait.Address.html#tymethod.unchecked_sub\" class=\"fn\">unchecked_sub</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u64.html\">u64</a>) -&gt; <a class=\"struct\" href=\"vmm/vstate/memory/struct.GuestAddress.html\" title=\"struct vmm::vstate::memory::GuestAddress\">GuestAddress</a></h4></section></summary><div class='docblock'>Computes <code>self - other</code>. <a href=\"vmm/vstate/memory/trait.Address.html#tymethod.unchecked_sub\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mask\" class=\"method trait-impl\"><a href=\"#method.mask\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"vmm/vstate/memory/trait.Address.html#method.mask\" class=\"fn\">mask</a>(&amp;self, mask: Self::<a class=\"associatedtype\" href=\"vmm/vstate/memory/address/trait.AddressValue.html#associatedtype.V\" title=\"type vmm::vstate::memory::address::AddressValue::V\">V</a>) -&gt; Self::<a class=\"associatedtype\" href=\"vmm/vstate/memory/address/trait.AddressValue.html#associatedtype.V\" title=\"type vmm::vstate::memory::address::AddressValue::V\">V</a></h4></section></summary><div class='docblock'>Returns the bitwise and of the address with the given mask.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_offset_from\" class=\"method trait-impl\"><a href=\"#method.unchecked_offset_from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"vmm/vstate/memory/trait.Address.html#method.unchecked_offset_from\" class=\"fn\">unchecked_offset_from</a>(&amp;self, base: Self) -&gt; Self::<a class=\"associatedtype\" href=\"vmm/vstate/memory/address/trait.AddressValue.html#associatedtype.V\" title=\"type vmm::vstate::memory::address::AddressValue::V\">V</a></h4></section></summary><div class='docblock'>Computes the offset from this address to the given base address. <a href=\"vmm/vstate/memory/trait.Address.html#method.unchecked_offset_from\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_align_up\" class=\"method trait-impl\"><a href=\"#method.checked_align_up\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"vmm/vstate/memory/trait.Address.html#method.checked_align_up\" class=\"fn\">checked_align_up</a>(&amp;self, power_of_two: Self::<a class=\"associatedtype\" href=\"vmm/vstate/memory/address/trait.AddressValue.html#associatedtype.V\" title=\"type vmm::vstate::memory::address::AddressValue::V\">V</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class='docblock'>Returns self, aligned to the given power of two.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_align_up\" class=\"method trait-impl\"><a href=\"#method.unchecked_align_up\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"vmm/vstate/memory/trait.Address.html#method.unchecked_align_up\" class=\"fn\">unchecked_align_up</a>(&amp;self, power_of_two: Self::<a class=\"associatedtype\" href=\"vmm/vstate/memory/address/trait.AddressValue.html#associatedtype.V\" title=\"type vmm::vstate::memory::address::AddressValue::V\">V</a>) -&gt; Self</h4></section></summary><div class='docblock'>Returns self, aligned to the given power of two.\nOnly use this when the result is guaranteed not to overflow.</div></details></div></details>","Address","vmm::vstate::memory::GuestUsize"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-GuestAddress\" class=\"impl\"><a href=\"#impl-Ord-for-GuestAddress\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"vmm/vstate/memory/struct.GuestAddress.html\" title=\"struct vmm::vstate::memory::GuestAddress\">GuestAddress</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a href=\"#method.cmp\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"vmm/vstate/memory/struct.GuestAddress.html\" title=\"struct vmm::vstate::memory::GuestAddress\">GuestAddress</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#829-831\">source</a></span><a href=\"#method.max\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#849-851\">source</a></span><a href=\"#method.min\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#874-877\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","vmm::vstate::memory::GuestUsize"],["<section id=\"impl-StructuralEq-for-GuestAddress\" class=\"impl\"><a href=\"#impl-StructuralEq-for-GuestAddress\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.StructuralEq.html\" title=\"trait core::marker::StructuralEq\">StructuralEq</a> for <a class=\"struct\" href=\"vmm/vstate/memory/struct.GuestAddress.html\" title=\"struct vmm::vstate::memory::GuestAddress\">GuestAddress</a></h3></section>","StructuralEq","vmm::vstate::memory::GuestUsize"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()