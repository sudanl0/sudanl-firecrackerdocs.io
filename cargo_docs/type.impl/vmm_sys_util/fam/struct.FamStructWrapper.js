(function() {var type_impls = {
"vmm":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FamStructWrapper%3CT%3E\" class=\"impl\"><a href=\"#impl-FamStructWrapper%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; FamStructWrapper&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> + FamStruct,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new</a>(num_elements: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;FamStructWrapper&lt;T&gt;, Error&gt;</h4></section></summary><div class=\"docblock\"><p>Create a new FamStructWrapper with <code>num_elements</code> elements.</p>\n<p>The elements will be zero-initialized. The type of the elements will be\n<a href=\"trait.FamStruct.html#associatedtype.Entry\"><code>FamStruct::Entry</code></a>.</p>\n<h5 id=\"arguments\"><a href=\"#arguments\">Arguments</a></h5>\n<ul>\n<li><code>num_elements</code> - The number of elements in the FamStructWrapper.</li>\n</ul>\n<h5 id=\"errors\"><a href=\"#errors\">Errors</a></h5>\n<p>When <code>num_elements</code> is greater than the max possible len, it returns\n<code>Error::SizeLimitExceeded</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_entries\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">from_entries</a>(\n    entries: &amp;[&lt;T as FamStruct&gt;::Entry]\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;FamStructWrapper&lt;T&gt;, Error&gt;</h4></section></summary><div class=\"docblock\"><p>Create a new FamStructWrapper from a slice of elements.</p>\n<h5 id=\"arguments-1\"><a href=\"#arguments-1\">Arguments</a></h5>\n<ul>\n<li><code>entries</code> - The slice of <a href=\"trait.FamStruct.html#associatedtype.Entry\"><code>FamStruct::Entry</code></a>\nentries.</li>\n</ul>\n<h5 id=\"errors-1\"><a href=\"#errors-1\">Errors</a></h5>\n<p>When the size of <code>entries</code> is greater than the max possible len, it returns\n<code>Error::SizeLimitExceeded</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_raw\" class=\"method\"><h4 class=\"code-header\">pub unsafe fn <a class=\"fn\">from_raw</a>(content: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;) -&gt; FamStructWrapper&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Create a new FamStructWrapper from the raw content represented as <code>Vec&lt;T&gt;</code>.</p>\n<p>Sometimes we already have the raw content of an FAM struct represented as <code>Vec&lt;T&gt;</code>,\nand want to use the FamStructWrapper as accessors.</p>\n<h5 id=\"arguments-2\"><a href=\"#arguments-2\">Arguments</a></h5>\n<ul>\n<li><code>content</code> - The raw content represented as <code>Vec[T]</code>.</li>\n</ul>\n<h5 id=\"safety\"><a href=\"#safety\">Safety</a></h5>\n<p>This function is unsafe because the caller needs to ensure that the raw content is\ncorrectly layed out.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_raw\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">into_raw</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Consume the FamStructWrapper and return the raw content as <code>Vec&lt;T&gt;</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_fam_struct_ref\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_fam_struct_ref</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\"><p>Get a reference to the actual <a href=\"trait.FamStruct.html\"><code>FamStruct</code></a> instance.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_fam_struct\" class=\"method\"><h4 class=\"code-header\">pub unsafe fn <a class=\"fn\">as_mut_fam_struct</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section></summary><div class=\"docblock\"><p>Get a mut reference to the actual <a href=\"trait.FamStruct.html\"><code>FamStruct</code></a> instance.</p>\n<h5 id=\"safety-1\"><a href=\"#safety-1\">Safety</a></h5>\n<p>Callers must not use the reference returned to modify the <code>len</code> filed of the underlying\n<code>FamStruct</code>. See also the top-level documentation of [<code>FamStruct</code>].</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_fam_struct_ptr\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_fam_struct_ptr</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*const T</a></h4></section></summary><div class=\"docblock\"><p>Get a pointer to the <a href=\"trait.FamStruct.html\"><code>FamStruct</code></a> instance.</p>\n<p>The caller must ensure that the fam_struct outlives the pointer this\nfunction returns, or else it will end up pointing to garbage.</p>\n<p>Modifying the container referenced by this pointer may cause its buffer\nto be reallocated, which would also make any pointers to it invalid.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_fam_struct_ptr\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_mut_fam_struct_ptr</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut T</a></h4></section></summary><div class=\"docblock\"><p>Get a mutable pointer to the <a href=\"trait.FamStruct.html\"><code>FamStruct</code></a> instance.</p>\n<p>The caller must ensure that the fam_struct outlives the pointer this\nfunction returns, or else it will end up pointing to garbage.</p>\n<p>Modifying the container referenced by this pointer may cause its buffer\nto be reallocated, which would also make any pointers to it invalid.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_slice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_slice</a>(&amp;self) -&gt; &amp;[&lt;T as FamStruct&gt;::Entry]</h4></section></summary><div class=\"docblock\"><p>Get the elements slice.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_slice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_mut_slice</a>(&amp;mut self) -&gt; &amp;mut [&lt;T as FamStruct&gt;::Entry]</h4></section></summary><div class=\"docblock\"><p>Get the mutable elements slice.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">push</a>(&amp;mut self, entry: &lt;T as FamStruct&gt;::Entry) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, Error&gt;</h4></section></summary><div class=\"docblock\"><p>Append an element.</p>\n<h5 id=\"arguments-3\"><a href=\"#arguments-3\">Arguments</a></h5>\n<ul>\n<li><code>entry</code> - The element that will be appended to the end of the collection.</li>\n</ul>\n<h5 id=\"errors-2\"><a href=\"#errors-2\">Errors</a></h5>\n<p>When len is already equal to max possible len it returns Error::SizeLimitExceeded.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.retain\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">retain</a>&lt;P&gt;(&amp;mut self, f: P)<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(&amp;&lt;T as FamStruct&gt;::Entry) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Retain only the elements specified by the predicate.</p>\n<h5 id=\"arguments-4\"><a href=\"#arguments-4\">Arguments</a></h5>\n<ul>\n<li><code>f</code> - The function used to evaluate whether an entry will be kept or not.\nWhen <code>f</code> returns <code>true</code> the entry is kept.</li>\n</ul>\n</div></details></div></details>",0,"vmm::io_uring::probe::ProbeWrapper"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Versionize-for-FamStructWrapper%3CT%3E\" class=\"impl\"><a href=\"#impl-Versionize-for-FamStructWrapper%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; Versionize for FamStructWrapper&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> + FamStruct + Versionize + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,\n    &lt;T as FamStruct&gt;::Entry: Versionize,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a href=\"#method.serialize\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">serialize</a>&lt;W&gt;(\n    &amp;self,\n    writer: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut W</a>,\n    version_map: &amp;VersionMap,\n    app_version: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, VersionizeError&gt;<div class=\"where\">where\n    W: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/io/trait.Write.html\" title=\"trait std::io::Write\">Write</a>,</div></h4></section></summary><div class='docblock'>Serializes <code>self</code> to <code>target_verion</code> using the specficifed <code>writer</code> and\n<code>version_map</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a href=\"#method.deserialize\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">deserialize</a>&lt;R&gt;(\n    reader: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut R</a>,\n    version_map: &amp;VersionMap,\n    app_version: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;FamStructWrapper&lt;T&gt;, VersionizeError&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/io/trait.Read.html\" title=\"trait std::io::Read\">Read</a>,</div></h4></section></summary><div class='docblock'>Returns a new instance of <code>Self</code> by deserializing from <code>source_version</code>\nusing the specficifed <code>reader</code> and <code>version_map</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.version\" class=\"method trait-impl\"><a href=\"#method.version\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">version</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u16.html\">u16</a></h4></section></summary><div class='docblock'>Returns latest <code>Self</code> version number.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.type_id\" class=\"method trait-impl\"><a href=\"#method.type_id\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a class=\"fn\">type_id</a>() -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/any/struct.TypeId.html\" title=\"struct core::any::TypeId\">TypeId</a><div class=\"where\">where\n    Self: 'static,</div></h4></section></summary><div class='docblock'>Returns the <code>Self</code> type id.\nThe returned ID represents a globally unique identifier for a type.\nIt is required by the <code>VersionMap</code> implementation.</div></details></div></details>","Versionize","vmm::io_uring::probe::ProbeWrapper"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-FamStructWrapper%3CT%3E\" class=\"impl\"><a href=\"#impl-Clone-for-FamStructWrapper%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for FamStructWrapper&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> + FamStruct,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; FamStructWrapper&lt;T&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","vmm::io_uring::probe::ProbeWrapper"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CVec%3CT%3E%3E-for-FamStructWrapper%3CT%3E\" class=\"impl\"><a href=\"#impl-From%3CVec%3CT%3E%3E-for-FamStructWrapper%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;&gt; for FamStructWrapper&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> + FamStruct,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(vec: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;T&gt;) -&gt; FamStructWrapper&lt;T&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Vec<T>>","vmm::io_uring::probe::ProbeWrapper"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-FamStructWrapper%3CT%3E\" class=\"impl\"><a href=\"#impl-Debug-for-FamStructWrapper%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for FamStructWrapper&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> + FamStruct,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","vmm::io_uring::probe::ProbeWrapper"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-FamStructWrapper%3CT%3E\" class=\"impl\"><a href=\"#impl-PartialEq-for-FamStructWrapper%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for FamStructWrapper&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> + FamStruct + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;FamStructWrapper&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> ยท <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#242\">source</a></span><a href=\"#method.ne\" class=\"anchor\">ยง</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","vmm::io_uring::probe::ProbeWrapper"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()